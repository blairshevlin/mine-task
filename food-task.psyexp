<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.5">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/sub-%s_task-%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '666', 'group': &quot;['food','drug']&quot;, 'extra': '[0,1]', 'practice': '[1,0]', 'dorate': '[1,0]'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="['stimuli/food/1%milk.jpg', 'stimuli/food/AA026307.png', 'stimuli/food/AA026337.png', 'stimuli/food/AA026339.png', 'stimuli/food/AA026360.png', 'stimuli/food/air popcorn.jpg', 'stimuli/food/american cheese.jpg', 'stimuli/food/apple slices.jpg', 'stimuli/food/avacado.jpg', 'stimuli/food/baby cheese.jpg', 'stimuli/food/bagel and cc.jpg', 'stimuli/food/bagel plain.jpg', 'stimuli/food/baguette oil.jpg', 'stimuli/food/baked potato.jpg', 'stimuli/food/banana.jpg', 'stimuli/food/broccoli cauliflower.jpg', 'stimuli/food/brownie.jpg', 'stimuli/food/burger.jpg', 'stimuli/food/celery and carrot sticks.jpg', 'stimuli/food/Cheese nachos.jpg', 'stimuli/food/cherries.jpg', 'stimuli/food/cherry tomato.jpg', 'stimuli/food/chicken nuggets2.jpg', 'stimuli/food/cookies.jpg', 'stimuli/food/corn cob.jpg', 'stimuli/food/cucumber slices.jpg', 'stimuli/food/cupcakes am.jpg', 'stimuli/food/doughnuts.jpg', 'stimuli/food/eggs.jpg', 'stimuli/food/french fries.jpg', 'stimuli/food/fried eggs.jpg', 'stimuli/food/froot loops w milk.jpg', 'stimuli/food/granola w milk.jpg', 'stimuli/food/Grapes.jpg', 'stimuli/food/green beans.jpg', 'stimuli/food/grilled cheese.jpg', 'stimuli/food/grilled chicken strips.jpg', 'stimuli/food/Hershey Kisses.jpg', 'stimuli/food/hotdog w must.jpg', 'stimuli/food/ice cream sundae 002.jpg', 'stimuli/food/kiwi.jpg', 'stimuli/food/lollipops.jpg', 'stimuli/food/m_and_m.jpg', 'stimuli/food/mac &amp; cheese.jpg', 'stimuli/food/mashed potato.jpg', 'stimuli/food/mini muffins.jpg', 'stimuli/food/mozarella sticks.jpg', 'stimuli/food/mushrooms.jpg', 'stimuli/food/orange slices.jpg', 'stimuli/food/PB.jpg', 'stimuli/food/peaches.jpg', 'stimuli/food/pickles.jpg', 'stimuli/food/pizza.jpg', 'stimuli/food/Pretzels.jpg', 'stimuli/food/raisin bran w milk.jpg', 'stimuli/food/raisins.jpg', 'stimuli/food/reeses.jpg', 'stimuli/food/rice cakes.jpg', 'stimuli/food/rigatoni and sauce.jpg', 'stimuli/food/rigatoni.jpg', 'stimuli/food/ritz.jpg', 'stimuli/food/salad w chicken.jpg', 'stimuli/food/saltines.jpg', 'stimuli/food/seaweed.jpg', 'stimuli/food/Skim milk.jpg', 'stimuli/food/soup with spoon.jpg', 'stimuli/food/sour patch.jpg', 'stimuli/food/soy chips.jpg', 'stimuli/food/steak.jpg', 'stimuli/food/strawberries.jpg', 'stimuli/food/string cheese.jpg', 'stimuli/food/sushi w_condiments.jpg', 'stimuli/food/tacos.jpg', 'stimuli/food/trail mix.jpg', 'stimuli/food/Tribe humus pita.jpg', 'stimuli/food/turkey sandwich.jpg', 'stimuli/food/Whole milk.jpg', 'stimuli/food/yellow popcorn.jpg', 'stimuli/food/yellow rice_beans.jpg', 'stimuli/food/yogurt no spoon.jpg', 'stimuli/food/yogurt pretzels.jpg', 'finalfooditems.csv', 'finalfooditems.xlsx', 'foodChoiceTrials.xlsx', 'stimuli/examples/shard-example_L1.png', 'stimuli/examples/shard-example_L2.png', 'stimuli/examples/shard-example_L3.png', 'stimuli/examples/shard-example_L4.png', 'stimuli/examples/shard-example_L5.png', 'stimuli/examples/shard-example_L6.png', 'stimuli/examples/shard-example_R1.png', 'stimuli/examples/shard-example_R2.png', 'stimuli/examples/shard-example_R3.png', 'stimuli/examples/shard-example_R4.png', 'stimuli/examples/shard-example_R5.png', 'stimuli/examples/shard-example_R6.png', 'practice.csv', 'training_trials.csv', 'trials.csv']" valType="list" updates="None" name="Resources"/>
    <Param val="True" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="2022.2.5" valType="str" updates="None" name="Use version"/>
    <Param val="[1536, 960]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="crystals" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="choice">
      <CodeComponent name="draw_chests">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="left_chest = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name='left_chest', &amp;#10;    image='stimuli/chest.png', mask=None, anchor='center',&amp;#10;    ori=0.0, pos=(-.375, 0), size=(.6, .5),&amp;#10;    color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;    flipHoriz=False, flipVert=False,&amp;#10;    texRes=128.0, interpolate=False, depth=-1.0)&amp;#10;right_chest = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name='right_chest', &amp;#10;    image='stimuli/chest.png', mask=None, anchor='center',&amp;#10;    ori=0.0, pos=(.375, 0), size=(.6, .5),&amp;#10;    color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;    flipHoriz=True, flipVert=False,&amp;#10;    texRes=128.0, interpolate=False, depth=-2.0)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="left_chest = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;left_chest&quot;, &quot;image&quot;: &quot;stimuli/chest.png&quot;, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [(- 0.375), 0], &quot;size&quot;: [0.6, 0.5], &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: false, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: false, &quot;depth&quot;: (- 1.0)});&amp;#10;right_chest = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;right_chest&quot;, &quot;image&quot;: &quot;stimuli/chest.png&quot;, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [0.375, 0], &quot;size&quot;: [0.6, 0.5], &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: true, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: false, &quot;depth&quot;: (- 2.0)});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="left_chest.setAutoDraw(true);&amp;#10;right_chest.setAutoDraw(true);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="left_chest.setAutoDraw(True)&amp;#10;right_chest.setAutoDraw(True)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="draw_chests" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="fill_chests_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="chest_order = [&quot;Box1&quot;, &quot;Box2&quot;];&amp;#10;util.shuffle(chest_order);&amp;#10;&amp;#10;let left_shard_shapes = Array.from({ length: 6 }, () =&gt;&amp;#10;  Math.floor(Math.random() * 13) + 1&amp;#10;);&amp;#10;let right_shard_shapes = Array.from({ length: 6 }, () =&gt;&amp;#10;  Math.floor(Math.random() * 13) + 1&amp;#10;);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="chest_order = np.random.permutation(['Box1','Box2'])&amp;#10;#chest_order = ['Box1','Box2']&amp;#10;#shuffle(chest_order)&amp;#10;&amp;#10;left_shard_shapes = np.random.choice([1,2,3,4,5,6,7,8,9,10,11,12,13], size=6, replace=True)&amp;#10;right_shard_shapes = np.random.choice([1,2,3,4,5,6,7,8,9,10,11,12,13], size=6, replace=True)&amp;#10;#left_shard_shapes = random.choices(range(1, 14), k=6)&amp;#10;#right_shard_shapes = random.choices(range(1, 14), k=6)&amp;#10;#left_shard_shapes = random_choices(range(1, 14))&amp;#10;#right_shard_shapes = random_choices(range(1, 14))&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="fill_chests_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="set_shards">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="bonus_amt_pts = 20&amp;#10;#all_shards_size = (.1175, .1175)&amp;#10;#left_shards_pos = [[-.505, -.06225], [-.375, -.06225], [-.245, -.06225], &amp;#10;#                   [-.505, -.17225], [-.375, -.17225], [-.245, -.17225]]&amp;#10;#right_shards_pos = [[.505, -.06225], [.375, -.06225], [.245, -.06225], &amp;#10;#                   [.505, -.17225], [.375, -.17225], [.245, -.17225]]" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="bonus_amt_pts = 20;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="function reverse_value(num) {&amp;#10;    if ((num === 1)) {&amp;#10;        return 12;&amp;#10;    } else {&amp;#10;        if ((num === 2)) {&amp;#10;            return 11;&amp;#10;        } else {&amp;#10;            if ((num === 3)) {&amp;#10;                return 10;&amp;#10;            } else {&amp;#10;                if ((num === 4)) {&amp;#10;                    return 9;&amp;#10;                } else {&amp;#10;                    if ((num === 5)) {&amp;#10;                        return 8;&amp;#10;                    } else {&amp;#10;                        if ((num === 6)) {&amp;#10;                            return 7;&amp;#10;                        } else {&amp;#10;                            if ((num === 7)) {&amp;#10;                                return 6;&amp;#10;                            } else {&amp;#10;                                if ((num === 8)) {&amp;#10;                                    return 5;&amp;#10;                                } else {&amp;#10;                                    if ((num === 9)) {&amp;#10;                                        return 4;&amp;#10;                                    } else {&amp;#10;                                        if ((num === 10)) {&amp;#10;                                            return 3;&amp;#10;                                        } else {&amp;#10;                                            if ((num === 11)) {&amp;#10;                                                return 2;&amp;#10;                                            } else {&amp;#10;                                                if ((num === 12)) {&amp;#10;                                                    return 1;&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((chest_order[0] === &quot;Box1&quot;)) {&amp;#10;    if ((counter_balance === &quot;1&quot;)) {&amp;#10;        left_shard_sum = Box1_Sum.toString();&amp;#10;        right_shard_sum = Box2_Sum.toString();&amp;#10;        left_shard_colors = [Box1_val1, Box1_val2, Box1_val3, Box1_val4, Box1_val5, Box1_val6];&amp;#10;        right_shard_colors = [Box2_val1, Box2_val2, Box2_val3, Box2_val4, Box2_val5, Box2_val6];&amp;#10;    } else {&amp;#10;        if ((counter_balance === &quot;2&quot;)) {&amp;#10;            left_shard_sum = Box1_Sum.toString();&amp;#10;            right_shard_sum = Box2_Sum.toString();&amp;#10;            left_shard_colors = [reverse_value(Box1_val1), reverse_value(Box1_val2), reverse_value(Box1_val3), reverse_value(Box1_val4), reverse_value(Box1_val5), reverse_value(Box1_val6)];&amp;#10;            right_shard_colors = [reverse_value(Box2_val1), reverse_value(Box2_val2), reverse_value(Box2_val3), reverse_value(Box2_val4), reverse_value(Box2_val5), reverse_value(Box2_val6)];&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((chest_order[0] === &quot;Box2&quot;)) {&amp;#10;        if ((counter_balance === &quot;1&quot;)) {&amp;#10;            left_shard_sum = Box2_Sum.toString();&amp;#10;            right_shard_sum = Box1_Sum.toString();&amp;#10;            left_shard_colors = [Box2_val1, Box2_val2, Box2_val3, Box2_val4, Box2_val5, Box2_val6];&amp;#10;            right_shard_colors = [Box1_val1, Box1_val2, Box1_val3, Box1_val4, Box1_val5, Box1_val6];&amp;#10;        } else {&amp;#10;            if ((counter_balance === &quot;2&quot;)) {&amp;#10;                left_shard_sum = Box2_Sum.toString();&amp;#10;                right_shard_sum = Box1_Sum.toString();&amp;#10;                left_shard_colors = [reverse_value(Box2_val1), reverse_value(Box2_val2), reverse_value(Box2_val3), reverse_value(Box2_val4), reverse_value(Box2_val5), reverse_value(Box2_val6)];&amp;#10;                right_shard_colors = [reverse_value(Box1_val1), reverse_value(Box1_val2), reverse_value(Box1_val3), reverse_value(Box1_val4), reverse_value(Box1_val5), reverse_value(Box1_val6)];&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;left_shards = [];&amp;#10;right_shards = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(6), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    if ((left_shard_shapes[i] &gt;= 10)) {&amp;#10;        left_shards.push(((((&quot;stimuli/shard-&quot; + left_shard_shapes[i].toString()) + &quot;_color-&quot;) + left_shard_colors[i].toString()) + &quot;.png&quot;));&amp;#10;    } else {&amp;#10;        left_shards.push(((((&quot;stimuli/shard-0&quot; + left_shard_shapes[i].toString()) + &quot;_color-&quot;) + left_shard_colors[i].toString()) + &quot;.png&quot;));&amp;#10;    }&amp;#10;    if ((right_shard_shapes[i] &gt;= 10)) {&amp;#10;        right_shards.push(((((&quot;stimuli/shard-&quot; + right_shard_shapes[i].toString()) + &quot;_color-&quot;) + right_shard_colors[i].toString()) + &quot;.png&quot;));&amp;#10;    } else {&amp;#10;        right_shards.push(((((&quot;stimuli/shard-0&quot; + right_shard_shapes[i].toString()) + &quot;_color-&quot;) + right_shard_colors[i].toString()) + &quot;.png&quot;));&amp;#10;    }&amp;#10;}&amp;#10;if ((Number.parseFloat(left_shard_sum) &gt; Number.parseFloat(right_shard_sum))) {&amp;#10;    better_option = &quot;left&quot;;&amp;#10;} else {&amp;#10;    if ((Number.parseFloat(left_shard_sum) &lt; Number.parseFloat(right_shard_sum))) {&amp;#10;        better_option = &quot;right&quot;;&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;better_option&quot;, better_option);&amp;#10;if ((self_trials.thisTrialN === 81)) {&amp;#10;    if ((this_trial_choice === &quot;left&quot;)) {&amp;#10;        bonus_amt_pts = Number.parseFloat(left_shard_sum);&amp;#10;    }&amp;#10;    if ((this_trial_choice === &quot;right&quot;)) {&amp;#10;        bonus_amt_pts = Number.parseFloat(right_shard_sum);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="def reverse_value(num):&amp;#10;    if num == 1:&amp;#10;        return 12&amp;#10;    elif num == 2:&amp;#10;        return 11&amp;#10;    elif num == 3:&amp;#10;        return 10&amp;#10;    elif num == 4:&amp;#10;        return 9&amp;#10;    elif num == 5:&amp;#10;        return 8&amp;#10;    elif num == 6:&amp;#10;        return 7&amp;#10;    elif num == 7:&amp;#10;        return 6&amp;#10;    elif num == 8:&amp;#10;        return 5&amp;#10;    elif num == 9:&amp;#10;        return 4&amp;#10;    elif num == 10:&amp;#10;        return 3&amp;#10;    elif num == 11:&amp;#10;        return 2&amp;#10;    elif num == 12:&amp;#10;        return 1&amp;#10;&amp;#10;if chest_order[0] == 'Box1':&amp;#10;    if counter_balance == '1':&amp;#10;        left_shard_sum = str(Box1_Sum)&amp;#10;        right_shard_sum = str(Box2_Sum)&amp;#10;        &amp;#10;        left_shard_colors = [Box1_val1,Box1_val2,Box1_val3,&amp;#10;                             Box1_val4,Box1_val5,Box1_val6]&amp;#10;        right_shard_colors = [Box2_val1,Box2_val2,Box2_val3,&amp;#10;                              Box2_val4,Box2_val5,Box2_val6]&amp;#10;                              &amp;#10;    elif counter_balance == '2':&amp;#10;        left_shard_sum = str(Box1_Sum)&amp;#10;        right_shard_sum = str(Box2_Sum)&amp;#10;        &amp;#10;        left_shard_colors = [reverse_value(Box1_val1),reverse_value(Box1_val2),reverse_value(Box1_val3),&amp;#10;                             reverse_value(Box1_val4),reverse_value(Box1_val5),reverse_value(Box1_val6)]&amp;#10;        right_shard_colors = [reverse_value(Box2_val1),reverse_value(Box2_val2),reverse_value(Box2_val3),&amp;#10;                              reverse_value(Box2_val4),reverse_value(Box2_val5),reverse_value(Box2_val6)]&amp;#10;&amp;#10;elif chest_order[0] == 'Box2':&amp;#10;    if counter_balance == '1':&amp;#10;        left_shard_sum = str(Box2_Sum)&amp;#10;        right_shard_sum = str(Box1_Sum)&amp;#10;        left_shard_colors = [Box2_val1,Box2_val2,Box2_val3,&amp;#10;                              Box2_val4,Box2_val5,Box2_val6]&amp;#10;        right_shard_colors = [Box1_val1,Box1_val2,Box1_val3,&amp;#10;                              Box1_val4,Box1_val5,Box1_val6]&amp;#10;&amp;#10;    elif counter_balance == '2':&amp;#10;        left_shard_sum = str(Box2_Sum)&amp;#10;        right_shard_sum = str(Box1_Sum)&amp;#10;        &amp;#10;        left_shard_colors = [reverse_value(Box2_val1),reverse_value(Box2_val2),reverse_value(Box2_val3),&amp;#10;                              reverse_value(Box2_val4),reverse_value(Box2_val5),reverse_value(Box2_val6)]&amp;#10;        right_shard_colors = [reverse_value(Box1_val1),reverse_value(Box1_val2),reverse_value(Box1_val3),&amp;#10;                             reverse_value(Box1_val4),reverse_value(Box1_val5),reverse_value(Box1_val6)]&amp;#10;&amp;#10;left_shards = []&amp;#10;right_shards = []&amp;#10;for i in range(6):&amp;#10;    ## THIS PART CONVERTS TO JS USING [].PUSH&amp;#10;    if left_shard_shapes[i] &gt;= 10:&amp;#10;        left_shards.append('stimuli/shard-' + str(left_shard_shapes[i]) + '_color-' + str(left_shard_colors[i]) + '.png')&amp;#10;    else:&amp;#10;        left_shards.append('stimuli/shard-0' + str(left_shard_shapes[i]) + '_color-' + str(left_shard_colors[i]) + '.png')&amp;#10;&amp;#10;    ## THIS PART CONVERTS TO JS USING [].PUSH&amp;#10;    if right_shard_shapes[i] &gt;= 10:&amp;#10;        right_shards.append('stimuli/shard-' + str(right_shard_shapes[i]) + '_color-' + str(right_shard_colors[i]) + '.png')&amp;#10;    else:&amp;#10;        right_shards.append('stimuli/shard-0' + str(right_shard_shapes[i]) + '_color-' + str(right_shard_colors[i]) + '.png')&amp;#10;    &amp;#10;#left_shards = [f'stimuli/shard-{shape}_color-{color}.png' for shape, color in zip(left_shard_shapes, left_shard_colors)]&amp;#10;#right_shards = [f'stimuli/shard-{shape}_color-{color}.png' for shape, color in zip(right_shard_shapes, right_shard_colors)]&amp;#10;&amp;#10;## determine better option&amp;#10;if float(left_shard_sum) &gt; float(right_shard_sum):&amp;#10;    better_option = 'left'&amp;#10;elif float(left_shard_sum) &lt; float(right_shard_sum):&amp;#10;    better_option = 'right'&amp;#10;&amp;#10;thisExp.addData('better_option', better_option)&amp;#10;&amp;#10;if self_trials.thisTrialN == 81: # psuedorandomly selected trial&amp;#10;    if this_trial_choice == 'left':&amp;#10;        bonus_amt_pts = float(left_shard_sum)&amp;#10;    if this_trial_choice == 'right':&amp;#10;        bonus_amt_pts = float(right_shard_sum)&amp;#10;&amp;#10;#if chest_order[0] == 'Box1':&amp;#10;#    left_box = 'Box1'&amp;#10;#    thisExp.addData('left_box', left_box)&amp;#10;#&amp;#10;#    left_shard_colors = [Box1_val1,Box1_val2,Box1_val3,Box1_val4,Box1_val5,Box1_val6]&amp;#10;#    left_shard_sum = str(Box1_Sum)&amp;#10;#    right_shard_colors = [Box2_val1,Box2_val2,Box2_val3,&amp;#10;#                          Box2_val4,Box2_val5,Box2_val6]&amp;#10;#    right_shard_sum = str(Box2_Sum)&amp;#10;#elif chest_order[0] == 'Box2':&amp;#10;#    right_box = 'Box2'&amp;#10;#    thisExp.addData('right_box', right_box)&amp;#10;#    left_shard_colors = [Box2_val1,Box2_val2,Box2_val3,&amp;#10;#                          Box2_val4,Box2_val5,Box2_val6]&amp;#10;#    left_shard_sum = str(Box2_Sum)&amp;#10;#    right_shard_colors = [Box1_val1,Box1_val2,Box1_val3,&amp;#10;#                          Box1_val4,Box1_val5,Box1_val6]&amp;#10;#    right_shard_sum = str(Box1_Sum)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_shards" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="outline_settings">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if ((choice_resp.keys === &quot;f&quot;)) {&amp;#10;    this_trial_choice = &quot;left&quot;;&amp;#10;    this_trial_box_choice = chest_order[0];&amp;#10;    if ((better_option === &quot;left&quot;)) {&amp;#10;        correct = 1;&amp;#10;    } else {&amp;#10;        correct = 0;&amp;#10;    }&amp;#10;    outline_shape.setPos([(- 0.375), 0], {&quot;log&quot;: true});&amp;#10;    outline_shape.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((choice_resp.keys === &quot;j&quot;)) {&amp;#10;        this_trial_choice = &quot;right&quot;;&amp;#10;        this_trial_box_choice = chest_order[1];&amp;#10;        if ((better_option === &quot;right&quot;)) {&amp;#10;            correct = 1;&amp;#10;        } else {&amp;#10;            correct = 0;&amp;#10;        }&amp;#10;        outline_shape.setAutoDraw(true);&amp;#10;        outline_shape.setPos([0.375, 0], {&quot;log&quot;: true});&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;agent_choice&quot;, this_trial_choice);&amp;#10;psychoJS.experiment.addData(&quot;agent_box_choice&quot;, this_trial_box_choice);&amp;#10;psychoJS.experiment.addData(&quot;correct_choice&quot;, correct);&amp;#10;correct_choice_count.push(correct);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if choice_resp.keys == 'f': #left&amp;#10;    this_trial_choice = 'left'&amp;#10;    this_trial_box_choice = chest_order[0]&amp;#10;    &amp;#10;    if better_option == 'left':&amp;#10;        correct = 1&amp;#10;    else:&amp;#10;        correct = 0&amp;#10;    &amp;#10;    outline_shape.setPos((-.375, 0), log=True)&amp;#10;    outline_shape.setAutoDraw(True)&amp;#10;elif choice_resp.keys == 'j': #right&amp;#10;    this_trial_choice = 'right'&amp;#10;    this_trial_box_choice = chest_order[1]&amp;#10;    &amp;#10;    if better_option == 'right':&amp;#10;        correct = 1&amp;#10;    else:&amp;#10;        correct = 0&amp;#10;    outline_shape.setAutoDraw(True)&amp;#10;    outline_shape.setPos((.375, 0), log=True)&amp;#10;&amp;#10;thisExp.addData('agent_choice', this_trial_choice)&amp;#10;thisExp.addData('agent_box_choice', this_trial_box_choice)&amp;#10;thisExp.addData('correct_choice', correct)&amp;#10;correct_choice_count.append(correct)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="outline_settings" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="left_shard_5">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[5]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[5]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_0">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[0]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_0" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[0]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[1]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[1]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[2]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[2]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_3">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[3]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[3]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_4">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[4]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[4]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_5">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[5]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[5]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="choice_resp">
        <Param val="'f','j'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="choice_resp" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="get_bonus">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if ((TrialN === 81)) {&amp;#10;    if ((this_trial_choice === &quot;left&quot;)) {&amp;#10;        bonus_amt_pts = Number.parseFloat(left_shard_sum);&amp;#10;    }&amp;#10;    if ((this_trial_choice === &quot;right&quot;)) {&amp;#10;        bonus_amt_pts = Number.parseFloat(right_shard_sum);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if TrialN == 81: # psuedorandomly selected trial&amp;#10;    if this_trial_choice == 'left':&amp;#10;        bonus_amt_pts = float(left_shard_sum)&amp;#10;    if this_trial_choice == 'right':&amp;#10;        bonus_amt_pts = float(right_shard_sum)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="get_bonus" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="get_social_others">
      <TextboxComponent name="socialother_1a">
        <Param val="center" valType="str" updates="constant" name="alignment"/>
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="2" valType="num" updates="constant" name="borderWidth"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="editable"/>
        <Param val="None" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="socialother_1a" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(None, None)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please type the first names of the two closest people to you (e.g., spouse, partner, family member, best friend)" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </TextboxComponent>
    </Routine>
    <Routine name="start_exp">
      <CodeComponent name="code_JS">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="thisExp=psychoJS.experiment;&amp;#10;win=psychoJS.window;&amp;#10;event=psychoJS.eventManager;&amp;#10;//random = Math.random;&amp;#10;shuffle = util.shuffle;&amp;#10;Array.prototype.append = [].push;&amp;#10;//util.addInfoFromUrl(expInfo);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_JS" valType="extendedCode" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="hide_mouse">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="//document.body.style.cursor='none';" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="myMouse = event.Mouse()&amp;#10;myMouse.setPos(newPos=(1,1))&amp;#10;&amp;#10;win.mouseVisible = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="win.mouseVisible = True" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="//document.body.style.cursor='auto';" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="hide_mouse" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="check_bonus">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="if expInfo['extra'] == '1':&amp;#10;    BONUS_BOOL = 1&amp;#10;elif expInfo['extra'] == '0':&amp;#10;    BONUS_BOOL = 0&amp;#10;    &amp;#10;participant_id = expInfo[&quot;participant&quot;]" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="if ((expInfo[&quot;extra&quot;] === &quot;1&quot;)) {&amp;#10;    BONUS_BOOL = 1;&amp;#10;} else {&amp;#10;    if ((expInfo[&quot;extra&quot;] === &quot;0&quot;)) {&amp;#10;        BONUS_BOOL = 0;&amp;#10;    }&amp;#10;}&amp;#10;participant_id = expInfo[&quot;participant&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="check_bonus" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="reverse_opt">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="def reverse_value(num):&amp;#10;    if num == 1:&amp;#10;        return 12&amp;#10;    elif num == 2:&amp;#10;        return 11&amp;#10;    elif num == 3:&amp;#10;        return 10&amp;#10;    elif num == 4:&amp;#10;        return 9&amp;#10;    elif num == 5:&amp;#10;        return 8&amp;#10;    elif num == 6:&amp;#10;        return 7&amp;#10;    elif num == 7:&amp;#10;        return 6&amp;#10;    elif num == 8:&amp;#10;        return 5&amp;#10;    elif num == 9:&amp;#10;        return 4&amp;#10;    elif num == 10:&amp;#10;        return 3&amp;#10;    elif num == 11:&amp;#10;        return 2&amp;#10;    elif num == 12:&amp;#10;        return 1" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="function reverse_value(num) {&amp;#10;    if ((num === 1)) {&amp;#10;        return 12;&amp;#10;    } else {&amp;#10;        if ((num === 2)) {&amp;#10;            return 11;&amp;#10;        } else {&amp;#10;            if ((num === 3)) {&amp;#10;                return 10;&amp;#10;            } else {&amp;#10;                if ((num === 4)) {&amp;#10;                    return 9;&amp;#10;                } else {&amp;#10;                    if ((num === 5)) {&amp;#10;                        return 8;&amp;#10;                    } else {&amp;#10;                        if ((num === 6)) {&amp;#10;                            return 7;&amp;#10;                        } else {&amp;#10;                            if ((num === 7)) {&amp;#10;                                return 6;&amp;#10;                            } else {&amp;#10;                                if ((num === 8)) {&amp;#10;                                    return 5;&amp;#10;                                } else {&amp;#10;                                    if ((num === 9)) {&amp;#10;                                        return 4;&amp;#10;                                    } else {&amp;#10;                                        if ((num === 10)) {&amp;#10;                                            return 3;&amp;#10;                                        } else {&amp;#10;                                            if ((num === 11)) {&amp;#10;                                                return 2;&amp;#10;                                            } else {&amp;#10;                                                if ((num === 12)) {&amp;#10;                                                    return 1;&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="reverse_opt" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="check_practice">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from random import shuffle" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((expInfo[&quot;practice&quot;] === &quot;1&quot;)) {&amp;#10;    PRACTICE_BOOL = 1;&amp;#10;} else {&amp;#10;    if ((expInfo[&quot;practice&quot;] === &quot;0&quot;)) {&amp;#10;        PRACTICE_BOOL = 0;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if expInfo['practice'] == '1':&amp;#10;    PRACTICE_BOOL = 1&amp;#10;elif expInfo['practice'] == '0':&amp;#10;    PRACTICE_BOOL = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="check_practice" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="id_grab">
        <Param val="subID = expInfo['participant']" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="var subID;&amp;#10;const queryString = window.location.search;&amp;#10;const urlParams = new URLSearchParams(queryString);&amp;#10;subID = urlParams.get('participant'); //make sure this parameter is same as how you defined it in Prolific (aka case sensitive)&amp;#10;expInfo['participant'] = subID;&amp;#10;console.log(subID);" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="id_grab" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="check_stim">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="if expInfo['group'] == 'food':&amp;#10;    FOOD_BOOL = 1&amp;#10;    foodDF = [];&amp;#10;    print('Food')        &amp;#10;else:&amp;#10;    FOOD_BOOL = 0&amp;#10;if expInfo['group'] == 'drug':&amp;#10;    DRUG_BOOL = 1&amp;#10;    print('Drug')&amp;#10;else:&amp;#10;    DRUG_BOOL = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="if ((expInfo[&quot;group&quot;] === &quot;food&quot;)) {&amp;#10;    FOOD_BOOL = 1;&amp;#10;    foodDF = [];&amp;#10;    console.log(&quot;Food&quot;);&amp;#10;} else {&amp;#10;    FOOD_BOOL = 0;&amp;#10;}&amp;#10;if ((expInfo[&quot;group&quot;] === &quot;drug&quot;)) {&amp;#10;    DRUG_BOOL = 1;&amp;#10;    console.log(&quot;Drug&quot;);&amp;#10;} else {&amp;#10;    DRUG_BOOL = 0;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="check_stim" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="check_rate_js">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#import pandas as pd&amp;#10;#import numpy as np&amp;#10;#import itertools&amp;#10;#pd.set_option('mode.chained_assignment', None)&amp;#10;&amp;#10;#foodDF = pd.DataFrame(columns=['id', 'image', 'rating', 'val_cat', 'nrepeat','rank', 'whichItem', &quot;diff&quot;])&amp;#10;# Create dictionary&amp;#10;foodDF = {&amp;#10;    'id': [],&amp;#10;    'image': [],&amp;#10;    'rating': [],&amp;#10;    'val_cat': [],&amp;#10;    'nrepeat': [],&amp;#10;     'rank': [],&amp;#10;     'whichItem': [],&amp;#10;     &quot;diff&quot;: []&amp;#10;}&amp;#10;    &amp;#10;if expInfo['dorate'] == '1':&amp;#10;    RATE_BOOL = 1&amp;#10;    print('Doing Ratings')&amp;#10;else:&amp;#10;    RATE_BOOL = 0&amp;#10;    print('Not Doing Ratings')&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="//foodDF = {&quot;id&quot;: [], &quot;image&quot;: [], &quot;rating&quot;: [], &quot;val_cat&quot;: [], &quot;nrepeat&quot;: [], &quot;rank&quot;: [], &quot;whichItem&quot;: [], &quot;diff&quot;: []};&amp;#10;&amp;#10;if ((expInfo[&quot;dorate&quot;] === &quot;1&quot;)) {&amp;#10;    RATE_BOOL = 1;&amp;#10;    console.log(&quot;Doing Ratings&quot;);&amp;#10;} else {&amp;#10;    RATE_BOOL = 0;&amp;#10;    console.log(&quot;Not Doing Ratings&quot;);&amp;#10;}&amp;#10;&amp;#10;if ( (RATE_BOOL === 0) &amp; (FOOD_BOOL === 1) ){&amp;#10;    console.log(&quot;Generating Food Ratings&quot;);&amp;#10;    foodfile = &quot;finalfooditems.csv&quot;;&amp;#10;    //foodListData = new data.TrialHandler2({&quot;trialList&quot;: data.importConditions(foodfile), &quot;nReps&quot;: 77, &quot;method&quot;: &quot;sequential&quot;, &quot;extraInfo&quot;: expInfo});&amp;#10;    foodListData = new TrialHandler({&amp;#10;        psychoJS: psychoJS,&amp;#10;        nReps: 77, method: TrialHandler.Method.SEQUENTIAL,&amp;#10;        extraInfo: expInfo, originPath: undefined,&amp;#10;        trialList: foodfile,&amp;#10;        seed: undefined, name: 'foodListData'&amp;#10;    });&amp;#10;    &amp;#10;       function range(start, stop, step) {&amp;#10;        if (typeof stop == 'undefined') {&amp;#10;            // one param defined&amp;#10;            stop = start;&amp;#10;            start = 0;&amp;#10;        }&amp;#10;&amp;#10;        if (typeof step == 'undefined') {&amp;#10;            step = 1;&amp;#10;        }&amp;#10;&amp;#10;        if ((step &gt; 0 &amp;&amp; start &gt;= stop) || (step &lt; 0 &amp;&amp; start &lt;= stop)) {&amp;#10;            return [];&amp;#10;        }&amp;#10;&amp;#10;        var result = [];&amp;#10;        for (var i = start; step &gt; 0 ? i &lt; stop : i &gt; stop; i += step) {&amp;#10;            result.push(i);&amp;#10;        }&amp;#10;&amp;#10;        return result;&amp;#10;    };&amp;#10;    &amp;#10;    foodTrialList = foodListData.trialList;&amp;#10;    foodlen = foodTrialList.length;&amp;#10;    console.log(&quot;There are &quot;, foodlen,&quot; foods&quot;);&amp;#10;    food_ratings_df = {&quot;id&quot;: [], &quot;image&quot;: [], &quot;rating&quot;: [], &quot;val_cat&quot;: [], &quot;nrepeat&quot;: []};&amp;#10;    num_rows = foodlen;&amp;#10;    for (var i, _pj_c = 0, _pj_a = range(foodlen), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        food_ratings_df[&quot;id&quot;].push((i + 1));&amp;#10;        food_ratings_df[&quot;image&quot;].push(foodTrialList[i]);&amp;#10;        let rating = Math.round((Math.random() * 10) * 100) / 100;&amp;#10;        food_ratings_df[&quot;rating&quot;].push(rating);&amp;#10;        if ((rating &lt;= 3.33)) {&amp;#10;            food_ratings_df[&quot;val_cat&quot;].push(&quot;LV&quot;);&amp;#10;        } else {&amp;#10;            if ((rating &gt;= 6.67)) {&amp;#10;                food_ratings_df[&quot;val_cat&quot;].push(&quot;HV&quot;);&amp;#10;            } else {&amp;#10;                food_ratings_df[&quot;val_cat&quot;].push(&quot;MV&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;        food_ratings_df[&quot;nrepeat&quot;].push(0);&amp;#10;    };&amp;#10;&amp;#10;  // console.log(food_ratings_df);&amp;#10;}&amp;#10;&amp;#10;&amp;#10;if ((RATE_BOOL === 0)) {&amp;#10; // Separate foods based on value category&amp;#10;    let HVdf = [];&amp;#10;    let MVdf = [];&amp;#10;    let LVdf = [];&amp;#10;&amp;#10;    for (var i = 0; i &lt;= food_ratings_df.id.length; i++) {&amp;#10;    if (food_ratings_df.val_cat[i] === 'HV') {&amp;#10;        HVdf.push( {id: food_ratings_df.id[i], image: food_ratings_df.image[i], rating: food_ratings_df.rating[i], val_cat: food_ratings_df.val_cat[i], nrepeat: 0});&amp;#10;    } else if (food_ratings_df.val_cat[i] === 'MV') {&amp;#10;        MVdf.push( {id: food_ratings_df.id[i], image: food_ratings_df.image[i], rating: food_ratings_df.rating[i], val_cat: food_ratings_df.val_cat[i], nrepeat: 0});&amp;#10;    } else if (food_ratings_df.val_cat[i] === 'LV') {&amp;#10;        LVdf.push( {id: food_ratings_df.id[i], image: food_ratings_df.image[i], rating: food_ratings_df.rating[i], val_cat: food_ratings_df.val_cat[i], nrepeat: 0});&amp;#10;    }&amp;#10;    }&amp;#10;&amp;#10;    // Ranking for foods&amp;#10;    HVdf.sort((a, b) =&gt; b.rating - a.rating);&amp;#10;    MVdf.sort((a, b) =&gt; b.rating - a.rating);&amp;#10;    LVdf.sort((a, b) =&gt; b.rating - a.rating);&amp;#10;&amp;#10;    for (var i = 0; i &lt; HVdf.length; i++) {&amp;#10;        HVdf[i].ranking = (i+1);&amp;#10;    }&amp;#10;    for (var i = 0; i &lt; MVdf.length; i++) {&amp;#10;        MVdf[i].ranking = (i+1);&amp;#10;    }&amp;#10;    for (var i = 0; i &lt; LVdf.length; i++) {&amp;#10;        LVdf[i].ranking = (i+1);&amp;#10;    }&amp;#10;    &amp;#10;&amp;#10;    // Function to calculate the absolute difference between two values&amp;#10;    function absDiff(a, b) {&amp;#10;        return Math.abs(a - b);&amp;#10;    }&amp;#10;    &amp;#10;    // Function to find the intersection of two arrays&amp;#10;    function intersect(arr1, arr2) {&amp;#10;        return arr1.filter((value) =&gt; arr2.includes(value));&amp;#10;    }&amp;#10;&amp;#10;    // Helper function to get a random integer within a range&amp;#10;    function getRandomInt(min, max) {&amp;#10;        return Math.floor(Math.random() * (max - min + 1) + min);&amp;#10;    }&amp;#10;&amp;#10;    // Helper function for median&amp;#10;    function median(values){&amp;#10;        if(values.length ===0) throw new Error(&quot;No inputs&quot;);&amp;#10;    &amp;#10;        values.sort(function(a,b){&amp;#10;        return a-b;&amp;#10;        });&amp;#10;    &amp;#10;        var half = Math.floor(values.length / 2);&amp;#10;        &amp;#10;        if (values.length % 2)&amp;#10;        return values[half];&amp;#10;        &amp;#10;        return (values[half - 1] + values[half]) / 2.0;&amp;#10;    }&amp;#10;&amp;#10;    // Other necessary variables&amp;#10;    // Implementation of the provided Python code in JavaScript&amp;#10;&amp;#10;    var got_em = 0;&amp;#10;    var jitterHV = 0;&amp;#10;    var jitterMV = 0;&amp;#10;    var jitterLV = 0;&amp;#10;    var iteration = 0;&amp;#10;&amp;#10;&amp;#10;    while (got_em === 0) {&amp;#10;        if (iteration &gt; 100) {&amp;#10;            console.log(&quot;Too many tries&quot;)&amp;#10;            break&amp;#10;        }&amp;#10;&amp;#10;        // Protect jitter from going beyond the bounds of the median value&amp;#10;        var maxJitterHV = HVdf.length / 2;&amp;#10;        var maxJitterMV = MVdf.length / 2;&amp;#10;        var maxJitterLV = LVdf.length / 2;&amp;#10;    &amp;#10;        if (Math.abs(jitterHV) &gt; maxJitterHV) {&amp;#10;            jitterHV = getRandomInt(-maxJitterHV, maxJitterHV);&amp;#10;        }&amp;#10;        if (Math.abs(jitterMV) &gt; maxJitterMV) {&amp;#10;            jitterMV = getRandomInt(-maxJitterMV, maxJitterMV);&amp;#10;        }&amp;#10;        if (Math.abs(jitterLV) &gt; maxJitterLV) {&amp;#10;            jitterLV = getRandomInt(-maxJitterLV, maxJitterLV);&amp;#10;        }&amp;#10;    &amp;#10;        // Median trials&amp;#10;        var medianHV = HVdf.find((obj) =&gt; obj.ranking === Math.round(median(HVdf.map((obj) =&gt; obj.ranking)) + jitterHV));&amp;#10;        if (!medianHV) {&amp;#10;            jitterHV += getRandomInt(-4, 4);&amp;#10;            continue;&amp;#10;        }&amp;#10;        var medianMV = MVdf.find((obj) =&gt; obj.ranking === Math.round(median(MVdf.map((obj) =&gt; obj.ranking)) + jitterMV))&amp;#10;        if (!medianMV) {&amp;#10;            jitterMV += getRandomInt(-4, 4);&amp;#10;            continue;&amp;#10;        }&amp;#10;        var medianLV = LVdf.find((obj) =&gt; obj.ranking === Math.round(median(LVdf.map((obj) =&gt; obj.ranking)) + jitterLV))&amp;#10;        if (!medianLV) {&amp;#10;            jitterLV += getRandomInt(-4, 4);&amp;#10;            continue;&amp;#10;        }&amp;#10;    &amp;#10;        // Values of median trial&amp;#10;        var medHV = medianHV.rating;&amp;#10;        var medMV = medianMV.rating;&amp;#10;        var medLV = medianLV.rating;&amp;#10;    &amp;#10;        // Trials below/above median&amp;#10;        var lowerHV =  HVdf&amp;#10;            .filter((obj) =&gt; obj.ranking &gt; Math.round(median(HVdf.map((obj) =&gt; obj.ranking))))&amp;#10;            .sort((a, b) =&gt; b - a);&amp;#10;        var upperHV =  HVdf&amp;#10;            .filter((obj) =&gt; obj.ranking &lt; Math.round(median(HVdf.map((obj) =&gt; obj.ranking))))&amp;#10;            .sort((a, b) =&gt; b - a);&amp;#10;        var lowerMV = MVdf&amp;#10;            .filter((obj) =&gt; obj.ranking &gt; Math.round(median(MVdf.map((obj) =&gt; obj.ranking))))&amp;#10;            .sort((a, b) =&gt; b - a);&amp;#10;        var upperMV = MVdf&amp;#10;            .filter((obj) =&gt; obj.ranking &lt; Math.round(median(MVdf.map((obj) =&gt; obj.ranking))))&amp;#10;            .sort((a, b) =&gt; b - a);&amp;#10;        var lowerLV = LVdf&amp;#10;            .filter((obj) =&gt; obj.ranking &gt; Math.round(median(LVdf.map((obj) =&gt; obj.ranking))))&amp;#10;            .sort((a, b) =&gt; b - a);&amp;#10;        var upperLV = LVdf&amp;#10;            .filter((obj) =&gt; obj.ranking &lt; Math.round(median(LVdf.map((obj) =&gt; obj.ranking))))&amp;#10;            .sort((a, b) =&gt; b - a);&amp;#10;&amp;#10;        // Subtract each value from the median to create a difference score for later matching&amp;#10;        // Round to nearest 0.2&amp;#10;        lowerHV.forEach(item =&gt; {&amp;#10;            item.rat_diff = Math.ceil(Math.abs(item.rating - medHV) * 10) * 2 / 10;&amp;#10;          });&amp;#10;        upperHV.forEach(item =&gt; {&amp;#10;            item.rat_diff = Math.ceil(Math.abs(item.rating - medHV) * 10) * 2 / 10;&amp;#10;          });  &amp;#10;&amp;#10;        lowerMV.forEach(item =&gt; {&amp;#10;            item.rat_diff = Math.ceil(Math.abs(item.rating - medMV) * 10) * 2 / 10;&amp;#10;          });&amp;#10;        upperMV.forEach(item =&gt; {&amp;#10;            item.rat_diff = Math.ceil(Math.abs(item.rating - medMV) * 10) * 2 / 10;&amp;#10;          });  &amp;#10;&amp;#10;        lowerLV.forEach(item =&gt; {&amp;#10;            item.rat_diff = Math.ceil(Math.abs(item.rating - medLV) * 10) * 2 / 10;&amp;#10;          });&amp;#10;        upperLV.forEach(item =&gt; {&amp;#10;            item.rat_diff = Math.ceil(Math.abs(item.rating - medLV) * 10) * 2 / 10;&amp;#10;          });  &amp;#10;          &amp;#10;        // Find the intersection of VDs&amp;#10;        let intersect_value_HV = [];&amp;#10;        lowerHV.forEach(lowerItem =&gt; {&amp;#10;            upperHV.forEach(upperItem =&gt; {&amp;#10;            if (lowerItem.rat_diff === upperItem.rat_diff &amp;&amp; lowerItem.rat_diff !== 0) {&amp;#10;              intersect_value_HV.push({ lowerItem, upperItem });&amp;#10;            }&amp;#10;          });&amp;#10;        });&amp;#10;&amp;#10;        let intersect_value_MV = [];&amp;#10;        lowerMV.forEach(lowerItem =&gt; {&amp;#10;            upperMV.forEach(upperItem =&gt; {&amp;#10;            if (lowerItem.rat_diff === upperItem.rat_diff &amp;&amp; lowerItem.rat_diff !== 0) {&amp;#10;                intersect_value_MV.push({ lowerItem, upperItem });&amp;#10;            }&amp;#10;            });&amp;#10;        });&amp;#10;&amp;#10;        let intersect_value_LV = [];&amp;#10;        lowerLV.forEach(lowerItem =&gt; {&amp;#10;            upperLV.forEach(upperItem =&gt; {&amp;#10;            if (lowerItem.rat_diff === upperItem.rat_diff &amp;&amp; lowerItem.rat_diff !== 0) {&amp;#10;                intersect_value_LV.push({ lowerItem, upperItem });&amp;#10;            }&amp;#10;            });&amp;#10;        });&amp;#10;&amp;#10;        if (intersect_value_HV.length === 0) {&amp;#10;            jitterHV += getRandomInt(-4, 4);&amp;#10;           continue;&amp;#10;        }&amp;#10;        if (intersect_value_MV.length === 0) {&amp;#10;            jitterMV += getRandomInt(-4, 4);&amp;#10;           continue;&amp;#10;        }&amp;#10;        if (intersect_value_LV.length === 0) {&amp;#10;            jitterLV += getRandomInt(-4, 4);&amp;#10;           continue;&amp;#10;        }&amp;#10;&amp;#10;        // Find items with the same rat_diff from intersect_value_HV, intersect_value_MV, and intersect_value_LV&amp;#10;        let intersect_all = [];&amp;#10;        intersect_value_HV.forEach(itemHV =&gt; {&amp;#10;            intersect_value_MV.forEach(itemMV =&gt; {&amp;#10;                intersect_value_LV.forEach(itemLV =&gt; {&amp;#10;                    if (&amp;#10;                        itemHV.lowerItem.rat_diff === itemMV.lowerItem.rat_diff &amp;&amp;&amp;#10;                        itemHV.lowerItem.rat_diff === itemLV.lowerItem.rat_diff&amp;#10;                    ) {&amp;#10;                        intersect_all.push({&amp;#10;                        HV: itemHV,&amp;#10;                        MV: itemMV,&amp;#10;                        LV: itemLV&amp;#10;                    });&amp;#10;                    }&amp;#10;                });&amp;#10;            });&amp;#10;        });&amp;#10;    &amp;#10;        if (intersect_all.length === 0) {&amp;#10;            var jitt_r = getRandomInt(1, 3);&amp;#10;            if (jitt_r === 1) {&amp;#10;                jitterLV += getRandomInt(-4, 4);&amp;#10;                continue;&amp;#10;            } else if (jitt_r === 2) {&amp;#10;                jitterMV += getRandomInt(-4, 4);&amp;#10;                continue;&amp;#10;            } else {&amp;#10;                jitterHV += getRandomInt(-4, 4);&amp;#10;                continue;&amp;#10;            }&amp;#10;        }&amp;#10;&amp;#10;        // High-Value&amp;#10;        // Lower&amp;#10;        var lowerHVFood = intersect_all[0].HV.lowerItem&amp;#10;        // Upper&amp;#10;        var upperHVFood = intersect_all[0].HV.upperItem&amp;#10;&amp;#10;&amp;#10;        // Middle-Value&amp;#10;        // Lower&amp;#10;        var lowerMVFood = intersect_all[0].MV.lowerItem&amp;#10;        // Upper&amp;#10;        var upperMVFood = intersect_all[0].MV.upperItem&amp;#10;&amp;#10;        // Low-Value&amp;#10;        // Lower&amp;#10;        var lowerLVFood = intersect_all[0].LV.lowerItem&amp;#10;        // Upper&amp;#10;        var upperLVFood = intersect_all[0].LV.upperItem&amp;#10;&amp;#10;        // Assign 'whichItem' values&amp;#10;        upperHVFood['whichItem'] = 'HV1';&amp;#10;        upperMVFood['whichItem'] = 'MV1';&amp;#10;        upperLVFood['whichItem'] = 'LV1';&amp;#10;        medianHV['whichItem'] = 'HV2';&amp;#10;        medianMV['whichItem'] = 'MV2';&amp;#10;        medianLV['whichItem'] = 'LV2';&amp;#10;        lowerHVFood['whichItem'] = 'HV3';&amp;#10;        lowerMVFood['whichItem'] = 'MV3';&amp;#10;        lowerLVFood['whichItem'] = 'LV3';&amp;#10;        &amp;#10;        // Assign values to associate with rainbow&amp;#10;        lowerLVFood['val'] = 1;&amp;#10;        medianLV['val'] = 2;&amp;#10;        upperLVFood['val'] = 3;&amp;#10;        lowerMVFood['val'] = 4;&amp;#10;        medianMV['val'] = 5;&amp;#10;        upperMVFood['val'] = 6;&amp;#10;        lowerHVFood['val'] = 7;&amp;#10;        medianHV['val'] = 8;&amp;#10;        upperHVFood['val'] = 9;&amp;#10;&amp;#10;        // Concatenate data to the foodDF array (assuming it is an array of objects)&amp;#10;        foodDF.push(medianHV);&amp;#10;        foodDF.push(medianMV);&amp;#10;        foodDF.push(medianLV);&amp;#10;        foodDF.push(lowerHVFood);&amp;#10;        foodDF.push(lowerMVFood);&amp;#10;        foodDF.push(lowerLVFood);&amp;#10;        foodDF.push(upperHVFood);&amp;#10;        foodDF.push(upperMVFood);&amp;#10;        foodDF.push(upperLVFood);&amp;#10;    &amp;#10;        if (foodDF.length === 9) {&amp;#10;        got_em = 1;&amp;#10;        }&amp;#10;    }&amp;#10;    &amp;#10;    console.log(&quot;These are the foods we'll use&quot;,foodDF);&amp;#10;&amp;#10;}" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Code to randomly generating ratings&amp;#10;if RATE_BOOL == '0':&amp;#10;    # Defunct version with pandas and numpy (RIP)&amp;#10;   # foodData = pd.read_excel(&quot;finalfooditems.xlsx&quot;)&amp;#10;    #food_ratings_df = pd.DataFrame(columns=['image', 'ratings', 'val_cat', 'nrepeat'])&amp;#10;&amp;#10;    #food_ratings_df['image'] = foodData[&quot;image&quot;]&amp;#10;    #food_ratings_df['ratings'] = np.random.uniform(low = 1.0, high = 10.0, size = len(foodData))&amp;#10;    #food_ratings_df['val_cat'] = np.where(food_ratings_df['ratings'] &lt;= 3.33, &quot;LV&quot;, np.where(food_ratings_df['ratings'] &gt;= 6.67, &quot;HV&quot;, &quot;MV&quot;))&amp;#10;   &amp;#10;    food_ratings_df = {&amp;#10;        'id': [],&amp;#10;        'image': [],&amp;#10;        'rating': [],&amp;#10;        'val_cat': [],&amp;#10;        'nrepeat': []&amp;#10;    }&amp;#10;&amp;#10;    num_rows = len(foods)&amp;#10;    &amp;#10;    for i in range(num_rows):&amp;#10;        food_ratings_df['id'].append(i + 1)&amp;#10;        food_ratings_df['image'].append(foods[i])&amp;#10;        rating = round(Math.random() * 11, 2)&amp;#10;        food_ratings_df['rating'].append(rating)&amp;#10;        &amp;#10;        if rating &lt;= 3.33:&amp;#10;            food_ratings_df['val_cat'].append(&quot;LV&quot;)&amp;#10;        elif rating &gt;= 6.67:&amp;#10;            food_ratings_df['val_cat'].append(&quot;HV&quot;)&amp;#10;        else:&amp;#10;            food_ratings_df['val_cat'].append(&quot;MV&quot;)&amp;#10;            &amp;#10;        food_ratings_df['nrepeat'].append(0)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="file_str = &quot;food_ratings_&quot; + str(expInfo['participant']) + &quot;.csv&quot; &amp;#10;&amp;#10;food_ratings_df.to_csv(file_str)" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if RATE_BOOL == '0':&amp;#10;    # Create a set of 3 images per category such that each image has the same difference&amp;#10;    ## That is LV1 - LV2 == HV1 - HV2 == MV1 - MV2&amp;#10;&amp;#10;   ## Separate foods based on value category&amp;#10;    HVdf = []&amp;#10;    MVdf = []&amp;#10;    LVdf = []&amp;#10;&amp;#10;    for i in range(len(food_ratings_df['val_cat'])):&amp;#10;        if food_ratings_df['val_cat'][i] == 'HV':&amp;#10;            HVdf.append(i)&amp;#10;        elif food_ratings_df['val_cat'][i] == 'MV':&amp;#10;            MVdf.append(i)&amp;#10;        elif food_ratings_df['val_cat'][i] == 'LV':&amp;#10;            LVdf.append(i)&amp;#10;               &amp;#10;    # Generate ranks&amp;#10;    HVdf_ranking = []&amp;#10;    MVdf_ranking = []&amp;#10;    LVdf_ranking = []&amp;#10;    &amp;#10;    for i in range(len(HVdf)):&amp;#10;        HVdf_ranking.append(0)&amp;#10;    for i in range(len(MVdf)):&amp;#10;        MVdf_ranking.append(0)&amp;#10;    for i in range(len(LVdf)):&amp;#10;        LVdf_ranking.append(0)&amp;#10;&amp;#10;    for i in range(len(HVdf)):&amp;#10;        for j in range(len(HVdf)):&amp;#10;            if i != j and food_ratings_df['rating'][HVdf[i]] &lt; food_ratings_df['rating'][HVdf[j]]:&amp;#10;                HVdf_ranking[i] += 1&amp;#10;    for i in range(len(MVdf)):&amp;#10;        for j in range(len(MVdf)):&amp;#10;            if i != j and food_ratings_df['rating'][MVdf[i]] &lt; food_ratings_df['rating'][MVdf[j]]:&amp;#10;                MVdf_ranking[i] += 1&amp;#10;    for i in range(len(LVdf)):&amp;#10;        for j in range(len(LVdf)):&amp;#10;            if i != j and food_ratings_df['rating'][LVdf[i]] &lt; food_ratings_df['rating'][LVdf[j]]:&amp;#10;                LVdf_ranking[i] += 1&amp;#10;                &amp;#10;    #See if we can find pairs with the same value-difference&amp;#10;    got_em = 0&amp;#10;    jitterHV = 0 # for adjusting the median around&amp;#10;    jitterMV = 0&amp;#10;    jitterLV = 0&amp;#10;    &amp;#10;&amp;#10;    # Use chatgbt here" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="check_rate_js" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="check_rate_py">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="foodDF = {&quot;id&quot;: [], &quot;image&quot;: [], &quot;rating&quot;: [], &quot;val_cat&quot;: [], &quot;nrepeat&quot;: [], &quot;rank&quot;: [], &quot;whichItem&quot;: [], &quot;diff&quot;: []};&amp;#10;if expInfo[&quot;dorate&quot;] == &quot;1&quot;:&amp;#10;    RATE_BOOL = 1;&amp;#10;    print(&quot;Doing Ratings&quot;);&amp;#10;else:&amp;#10;    RATE_BOOL = 0;&amp;#10;    print(&quot;Not Doing Ratings&quot;);&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="foodDF = {&quot;id&quot;: [], &quot;image&quot;: [], &quot;rating&quot;: [], &quot;val_cat&quot;: [], &quot;nrepeat&quot;: [], &quot;rank&quot;: [], &quot;whichItem&quot;: [], &quot;diff&quot;: []};&amp;#10;if ((expInfo[&quot;dorate&quot;] === &quot;1&quot;)) {&amp;#10;    RATE_BOOL = 1;&amp;#10;    console.log(&quot;Doing Ratings&quot;);&amp;#10;} else {&amp;#10;    RATE_BOOL = 0;&amp;#10;    console.log(&quot;Not Doing Ratings&quot;);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((RATE_BOOL === 0)) {&amp;#10;    console.log(&quot;Generating Food Ratings&quot;);&amp;#10;    foodfile = &quot;finalfooditems.csv&quot;;&amp;#10;    foodListData = new data.TrialHandler2({&quot;trialList&quot;: data.importConditions(foodfile), &quot;nReps&quot;: 77, &quot;method&quot;: &quot;sequential&quot;, &quot;extraInfo&quot;: expInfo});&amp;#10;    foodTrialList = foodListData.trialList;&amp;#10;    foodlen = foodTrialList.length;&amp;#10;    foodList = [];&amp;#10;    foods = {};&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(foodlen), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        foodList.push(foodTrialList[i][&quot;image&quot;]);&amp;#10;    }&amp;#10;    foods[&quot;image&quot;] = foodList;&amp;#10;    import * as np from 'numpy';&amp;#10;    food_ratings_df = {&quot;id&quot;: [], &quot;image&quot;: [], &quot;rating&quot;: [], &quot;val_cat&quot;: [], &quot;nrepeat&quot;: []};&amp;#10;    num_rows = foodlen;&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(foodlen), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        food_ratings_df[&quot;id&quot;].push((i + 1));&amp;#10;        food_ratings_df[&quot;image&quot;].push(foods[&quot;image&quot;][i]);&amp;#10;        rating = Math.round(np.random.randint({&quot;low&quot;: 1, &quot;high&quot;: 10}), 2);&amp;#10;        food_ratings_df[&quot;rating&quot;].push(rating);&amp;#10;        if ((rating &lt;= 3.33)) {&amp;#10;            food_ratings_df[&quot;val_cat&quot;].push(&quot;LV&quot;);&amp;#10;        } else {&amp;#10;            if ((rating &gt;= 6.67)) {&amp;#10;                food_ratings_df[&quot;val_cat&quot;].push(&quot;HV&quot;);&amp;#10;            } else {&amp;#10;                food_ratings_df[&quot;val_cat&quot;].push(&quot;MV&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;        food_ratings_df[&quot;nrepeat&quot;].push(0);&amp;#10;    }&amp;#10;    console.log(food_ratings_df);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if RATE_BOOL == 0:&amp;#10;    print(&quot;Generating Food Ratings&quot;)&amp;#10;    foodfile = 'finalfooditems.csv'&amp;#10;    &amp;#10;    foodListData = data.TrialHandler2(trialList= data.importConditions(foodfile), nReps = 77, method='sequential', extraInfo= expInfo)&amp;#10;    foodTrialList = foodListData.trialList&amp;#10;    &amp;#10;    foodlen = len(foodTrialList)&amp;#10;    #print('Number of foods: ' + str(foodlen))&amp;#10;    &amp;#10;    foodList = []&amp;#10;    foods = {}&amp;#10;    for i in range(foodlen):&amp;#10;        #print(foodList[i]['image'])&amp;#10;        foodList.append(foodTrialList[i]['image'])&amp;#10;&amp;#10;    foods['image'] = foodList&amp;#10;    &amp;#10;    import numpy as np&amp;#10;    &amp;#10;    food_ratings_df = {&quot;id&quot;: [], &quot;image&quot;: [], &quot;rating&quot;: [], &quot;val_cat&quot;: [], &quot;nrepeat&quot;: []}&amp;#10;    num_rows = foodlen&amp;#10;    for i in range(foodlen):&amp;#10;        food_ratings_df[&quot;id&quot;].append((i + 1))&amp;#10;        food_ratings_df[&quot;image&quot;].append(foods['image'][i])&amp;#10;        rating = round(np.random.randint(low=1,high=10), 2)&amp;#10;        #rating = Math.round((Math.random() * 11), 2)&amp;#10;        food_ratings_df[&quot;rating&quot;].append(rating)&amp;#10;        if rating &lt;= 3.33:&amp;#10;            food_ratings_df[&quot;val_cat&quot;].append(&quot;LV&quot;)&amp;#10;        elif rating &gt;= 6.67:&amp;#10;            food_ratings_df[&quot;val_cat&quot;].append(&quot;HV&quot;)&amp;#10;        else:&amp;#10;            food_ratings_df[&quot;val_cat&quot;].append(&quot;MV&quot;)&amp;#10;        food_ratings_df[&quot;nrepeat&quot;].append(0)&amp;#10;        &amp;#10;    print(food_ratings_df)&amp;#10;    " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="check_rate_py" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="prac_instr">
      <TextComponent name="text_3">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You’ve completed the training phase. Before we start the experiment, let's try a few final practice rounds.&amp;#10;&amp;#10;Select the better of the two treasure chests, and we will show you how many points you would be awarded for your choice.&amp;#10;&amp;#10;When you are ready, press the SPACE BAR to begin.&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_3">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_3" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="social_instr">
      <TextComponent name="text_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Now you will allocate boxes of gems for different people in your social network.&amp;#10;&amp;#10;Please SPACE to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="self_instr">
      <CodeComponent name="start_task_txt">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((BONUS_BOOL === 1)) {&amp;#10;    start_task_txt_disp = &quot;You are now ready to begin the experiment. In this portion of the study, you will no longer be shown how much each treasure chest is worth. Remember, your bonus payment will depend on your choices in this phase. At the end of the experiment, one random round will be selected, and you will get points for whichever option you chose.\n\nWhen you are ready, press the SPACE BAR to continue.&quot;;&amp;#10;} else {&amp;#10;    start_task_txt_disp = &quot;You are now ready to begin the experiment. In this portion of the study, you will no longer be shown how much each treasure chest is worth.\n\nWhen you are ready, press the SPACE BAR to continue.&quot;;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if BONUS_BOOL == 1:&amp;#10;    start_task_txt_disp = 'You are now ready to begin the experiment. In this portion of the study, you will no longer be shown how much each treasure chest is worth. Remember, your bonus payment will depend on your choices in this phase. At the end of the experiment, one random round will be selected, and you will get points for whichever option you chose.\n\nWhen you are ready, press the SPACE BAR to continue.'&amp;#10;else:&amp;#10;    start_task_txt_disp = 'You are now ready to begin the experiment. In this portion of the study, you will no longer be shown how much each treasure chest is worth.\n\nWhen you are ready, press the SPACE BAR to continue.'" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="start_task_txt" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_4">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$start_task_txt_disp" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_2" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="get_ready">
      <KeyboardComponent name="start_keys">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="start_keys" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="correct_choice_count = []" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="correct_choice_count = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="instr_keys = event.getKeys()&amp;#10;&amp;#10;if 'space' in instr_keys:&amp;#10;    instr_keyboard.clearEvents()&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;instr_keys = psychoJS.eventManager.getKeys();&amp;#10;if (_pj.in_es6(&quot;space&quot;, instr_keys)) {&amp;#10;    instr_keyboard.clearEvents();&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_7">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_7" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You will now begin the training.&amp;#10;&amp;#10;A treasure chest made up of six random crystals will appear on the left, and another treasure chest made up of another six random crystals will appear on the right. Select the side that you think is worth more points. Press F to select left, and press J to select right. &amp;#10;&amp;#10;When you are ready, rest your fingers on the F and J keys, and press the SPACE BAR to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="check_learning">
      <CodeComponent name="continue_learning">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="repeat_training_txt = visual.TextStim(win=win, name='repeat_training_txt',&amp;#10;    text='',&amp;#10;    font='Open Sans',&amp;#10;    pos=(0, 0), height=0.05, wrapWidth=None, ori=0.0, &amp;#10;    color='white', colorSpace='rgb', opacity=None, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-17.0);&amp;#10;&amp;#10;repeat_training_txt.autoDraw = False&amp;#10;rounds_passed = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="repeat_training_txt = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;repeat_training_txt&quot;, &quot;text&quot;: &quot;&quot;, &quot;font&quot;: &quot;Open Sans&quot;, &quot;pos&quot;: [0, 0], &quot;height&quot;: 0.05, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0.0, &quot;color&quot;: &quot;white&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: (- 17.0)});&amp;#10;repeat_training_txt.autoDraw = false;&amp;#10;rounds_passed = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((correct_choice_count.length === 30)) {&amp;#10;    pct_correct = (util.sum(correct_choice_count) / correct_choice_count.length);&amp;#10;    if ((pct_correct &gt; 0.7)) {&amp;#10;        whoops_txt = &quot;Great job!\n\nPlease press the SPACE BAR to continue.&quot;;&amp;#10;        repeat_training_txt.setText(whoops_txt);&amp;#10;        repeat_training_txt.autoDraw = true;&amp;#10;        training.finished = 1;&amp;#10;    } else {&amp;#10;        correct_choice_count = [];&amp;#10;        rounds_passed += 1;&amp;#10;        if ((rounds_passed &lt; 3)) {&amp;#10;            whoops_txt = &quot;Whoops! Looks like you made a couple of mistakes. Let's try that again.\n\nPlease remember to select the treasure chest with the higher value sum.\n\nPress F to select left, and press J to select right.\n\nWhen you are ready, press the SPACE BAR to try the training again.&quot;;&amp;#10;            repeat_training_txt.setText(whoops_txt);&amp;#10;            repeat_training_txt.autoDraw = true;&amp;#10;        } else {&amp;#10;            whoops_txt = &quot;Whoops! Looks like you made a couple of mistakes.\n\nPlease try your best in the next part of the experiment.\n\nPlease press the SPACE BAR to continue.&quot;;&amp;#10;            repeat_training_txt.setText(whoops_txt);&amp;#10;            repeat_training_txt.autoDraw = true;&amp;#10;            training.finished = 1;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if len(correct_choice_count) == 30:&amp;#10;    pct_correct = sum(correct_choice_count)/len(correct_choice_count)&amp;#10;    &amp;#10;    if pct_correct &gt; .7:&amp;#10;        whoops_txt = 'Great job!\n\nPlease press the SPACE BAR to continue.'&amp;#10;        repeat_training_txt.setText(whoops_txt)&amp;#10;        repeat_training_txt.autoDraw = True&amp;#10;        training.finished = 1&amp;#10;    else:&amp;#10;        correct_choice_count = []&amp;#10;        rounds_passed += 1 &amp;#10;        if rounds_passed &lt; 3:&amp;#10;            whoops_txt = 'Whoops! Looks like you made a couple of mistakes. Let\'s try that again.\n\nPlease remember to select the treasure chest with the higher value sum.\n\nPress F to select left, and press J to select right.\n\nWhen you are ready, press the SPACE BAR to try the training again.'&amp;#10;            repeat_training_txt.setText(whoops_txt)&amp;#10;            repeat_training_txt.autoDraw = True&amp;#10;        else:&amp;#10;            whoops_txt = 'Whoops! Looks like you made a couple of mistakes.\n\nPlease try your best in the next part of the experiment.\n\nPlease press the SPACE BAR to continue.'&amp;#10;            repeat_training_txt.setText(whoops_txt)&amp;#10;            repeat_training_txt.autoDraw = True&amp;#10;            training.finished = 1&amp;#10;else:&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="repeat_training_txt.setText(&quot;&quot;);&amp;#10;repeat_training_txt.autoDraw = true;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="repeat_training_txt.setText('')&amp;#10;repeat_training_txt.autoDraw = True" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="continue_learning" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="end_training_round">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="end_training_round" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ender">
      <CodeComponent name="set_end_txt">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((BONUS_BOOL === 1)) {&amp;#10;    ender_txt_disp = &quot;Congratulations - you have completed the experiment!\n\nPress the SPACE BAR to see your reward.&quot;;&amp;#10;} else {&amp;#10;    ender_txt_disp = &quot;Congratulations - you have completed the experiment!\n\nPress the SPACE BAR to exit.&quot;;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if BONUS_BOOL == 1:&amp;#10;    ender_txt_disp = 'Congratulations - you have completed the experiment!\n\nPress the SPACE BAR to see your reward.'&amp;#10;else:&amp;#10;    ender_txt_disp = 'Congratulations - you have completed the experiment!\n\nPress the SPACE BAR to exit.'" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_end_txt" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_5">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$ender_txt_disp" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_4">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_4" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="reward">
      <CodeComponent name="bonus_txt">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="bonus_amt_money = (0.25 * bonus_amt_pts);&amp;#10;bonus_txt_disp = `On this round, the option you chose was worth ${bonus_amt_pts} points. At a conversion rate of 25 cents for every point, you will receive a total of ${util.pad(Number.parseFloat(bonus_amt_money).toFixed(2), 1)} dollars.&amp;#10;&amp;#10;Press the SPACE BAR to exit.`&amp;#10;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="bonus_amt_money = .25 * bonus_amt_pts&amp;#10;bonus_txt_disp = f'On this round, the option you chose was worth {bonus_amt_pts} points. At a conversion rate of 25 cents for every point, you will receive a total of {bonus_amt_money:.02f} dollars.\n\nPress the SPACE BAR to exit.'" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="bonus_txt" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_6">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_6" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$bonus_txt_disp" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_5">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_5" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="colorblindness">
      <TextComponent name="colorblind_txt">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="colorblind_txt" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Do you have full color vision?&amp;#10;&amp;#10;Press 'Y' for yes and 'N' for no." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="full_color_vision">
        <Param val="'y','n'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="full_color_vision" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="task_feedback">
      <CodeComponent name="undraw_chests">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="left_chest.setAutoDraw(false);&amp;#10;right_chest.setAutoDraw(false);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="left_chest.setAutoDraw(False)&amp;#10;right_chest.setAutoDraw(False)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="undraw_chests" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="draw_outline_4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="outline_shape = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name='outline_shape', &amp;#10;    image='stimuli/highlight_nolid.png', mask=None, anchor='center',&amp;#10;    ori=0.0, pos=(0, 0), size=(.6, .5), #size=(.685, .685),&amp;#10;    color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;    flipHoriz=False, flipVert=False,&amp;#10;    texRes=128.0, interpolate=False, depth=0.0)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="outline_shape = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;outline_shape&quot;, &quot;image&quot;: &quot;stimuli/highlight_nolid.png&quot;, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [0, 0], &quot;size&quot;: [0.6, 0.5], &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: false, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: false, &quot;depth&quot;: 0.0});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((this_trial_choice === &quot;left&quot;)) {&amp;#10;    outline_shape.setPos([(- 0.375), 0], {&quot;log&quot;: true});&amp;#10;    outline_shape.setAutoDraw(true);&amp;#10;} else {&amp;#10;    if ((this_trial_choice === &quot;right&quot;)) {&amp;#10;        outline_shape.setPos([0.375, 0], {&quot;log&quot;: true});&amp;#10;        outline_shape.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if this_trial_choice == 'left': #left&amp;#10;    outline_shape.setPos((-.375, 0), log=True)&amp;#10;    outline_shape.setAutoDraw(True)&amp;#10;elif this_trial_choice == 'right': #right&amp;#10;    outline_shape.setPos((.375, 0), log=True)&amp;#10;    outline_shape.setAutoDraw(True)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="outline_shape.setAutoDraw(false);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="outline_shape.setAutoDraw(False)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="draw_outline_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="left_shard_17">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[0]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_17" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[0]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_18">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[1]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_18" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[1]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_19">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[2]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_19" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[2]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_20">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[3]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_20" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[3]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_21">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[4]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_21" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[4]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_22">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[5]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_22" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[5]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_17">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[0]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_17" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[0]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_18">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[1]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_18" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[1]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_19">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[2]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_19" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[2]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_20">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[3]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_20" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[3]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_21">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[4]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_21" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[4]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_22">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[5]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_22" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[5]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <CodeComponent name="get_bonus_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if ((TrialN === 81)) {&amp;#10;    if ((this_trial_choice === &quot;left&quot;)) {&amp;#10;        bonus_amt_pts = Number.parseFloat(left_shard_sum);&amp;#10;    }&amp;#10;    if ((this_trial_choice === &quot;right&quot;)) {&amp;#10;        bonus_amt_pts = Number.parseFloat(right_shard_sum);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if TrialN == 81: # psuedorandomly selected trial&amp;#10;    if this_trial_choice == 'left':&amp;#10;        bonus_amt_pts = float(left_shard_sum)&amp;#10;    if this_trial_choice == 'right':&amp;#10;        bonus_amt_pts = float(right_shard_sum)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="get_bonus_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="rateFood">
      <CodeComponent name="cycleFood">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="thisFood = image;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="thisFood = image" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if food_slider.rating==None:&amp;#10;    rating_value = 0&amp;#10;else:&amp;#10;    rating_value = math.round(food_slider.getRating()/10,2)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((food_slider.rating === null)) {&amp;#10;    rating_value = 0;&amp;#10;} else {&amp;#10;    rating_value = Math.round((food_slider.getRating() / 10), 2);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="cycleFood" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <SliderComponent name="food_slider">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="LightGray" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Red" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val=".1" valType="num" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)" valType="list" updates="constant" name="labels"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="food_slider" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.175)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.0, 0.05)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="rating" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <ImageComponent name="foodImage">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$thisFood" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="foodImage" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.15)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.4, 0.4)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="slider_value">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider_value" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.075)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="food_slider.rating!=None" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$rating_value" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ButtonComponent name="next_button">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="0" valType="num" updates="constant" name="borderWidth"/>
        <Param val="" valType="extendedCode" updates="constant" name="callback"/>
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="darkgrey" valType="color" updates="constant" name="fillColor"/>
        <Param val="Arvo" valType="str" updates="constant" name="font"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="next_button" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="oncePerClick"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="" valType="num" updates="constant" name="padding"/>
        <Param val="(0, -0.4)" valType="list" updates="constant" name="pos"/>
        <Param val="every click" valType="str" updates="None" name="save"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="[0.5, 0.13]" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$food_slider.rating!=null" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Press Spacebar To Continue" valType="str" updates="constant" name="text"/>
        <Param val="button onset" valType="str" updates="constant" name="timeRelativeTo"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ButtonComponent>
      <KeyboardComponent name="check_space_key">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="check_space_key" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$food_slider.rating!=null" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="filterFood">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="if RATE_BOOL != &quot;0&quot;:&amp;#10;        food_ratings_df = {&quot;id&quot;: [], &quot;image&quot;: [], &quot;rating&quot;: [], &quot;val_cat&quot;: [], &quot;nrepeat&quot;: []};&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="if ((RATE_BOOL !== &quot;0&quot;)) {&amp;#10;    food_ratings_df = {&quot;id&quot;: [], &quot;image&quot;: [], &quot;rating&quot;: [], &quot;val_cat&quot;: [], &quot;nrepeat&quot;: []};&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="food_ratings_df[&quot;id&quot;].push(food_ratings_df[&quot;id&quot;].length + 1);&amp;#10;food_ratings_df[&quot;image&quot;].push(thisFood);&amp;#10;food_ratings_df[&quot;rating&quot;].push(Math.round(food_slider.getRating()/10,2));&amp;#10;&amp;#10;if (food_slider.getRating()/10 &lt;= 3.33) {&amp;#10;    food_ratings_df[&quot;val_cat&quot;].push(&quot;LV&quot;);&amp;#10;} else if (food_slider.getRating()/10 &gt;= 6.67) {&amp;#10;    food_ratings_df[&quot;val_cat&quot;].push(&quot;HV&quot;);   &amp;#10;} else { &amp;#10;    food_ratings_df[&quot;val_cat&quot;].push(&quot;MV&quot;);&amp;#10;}&amp;#10;&amp;#10;food_ratings_df[&quot;nrepeat&quot;].push(0);" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="file_str = &quot;food_ratings_&quot; + str(expInfo['participant']) + &quot;.csv&quot; &amp;#10;&amp;#10;#food_ratings_df.to_csv(file_str)" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="file_str = ((&quot;food_ratings_&quot; + expInfo[&quot;participant&quot;].toString()) + &quot;.csv&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="filterFood" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="fixation_500ms">
      <TextComponent name="text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.075" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="fixation_1000ms">
      <TextComponent name="fix">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.075" valType="num" updates="constant" name="letterHeight"/>
        <Param val="fix" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="start_food_ratings">
      <KeyboardComponent name="start_food_rat_key">
        <Param val="'right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="start_food_rat_key" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="start_food_rat_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="start_food_rat_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You will now view a series of food images. Using the mouse, please indicate how much you would like to consume food in each image, on a scale from 1 (&quot;Not at al&quot;) to 10 (&quot;Very much&quot;). &amp;#10;&amp;#10;Press the RIGHT ARROW to start." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="show_mouse">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.window.mouseVisible = true;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="win.mouseVisible = True" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="show_mouse" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="hide_mouse_routine">
      <CodeComponent name="code_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.window.mouseVisible = false;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="win.mouseVisible = False" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="sort_food">
      <CodeComponent name="sort_food_df_js">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// Separate foods based on value category&amp;#10;let HVdf = [];&amp;#10;let MVdf = [];&amp;#10;let LVdf = [];&amp;#10;&amp;#10;for (var i = 0; i &lt;= food_ratings_df.id.length; i++) {&amp;#10;if (food_ratings_df.val_cat[i] === 'HV') {&amp;#10;    HVdf.push( {id: food_ratings_df.id[i], image: food_ratings_df.image[i], rating: food_ratings_df.rating[i], val_cat: food_ratings_df.val_cat[i], nrepeat: 0});&amp;#10;} else if (food_ratings_df.val_cat[i] === 'MV') {&amp;#10;    MVdf.push( {id: food_ratings_df.id[i], image: food_ratings_df.image[i], rating: food_ratings_df.rating[i], val_cat: food_ratings_df.val_cat[i], nrepeat: 0});&amp;#10;} else if (food_ratings_df.val_cat[i] === 'LV') {&amp;#10;    LVdf.push( {id: food_ratings_df.id[i], image: food_ratings_df.image[i], rating: food_ratings_df.rating[i], val_cat: food_ratings_df.val_cat[i], nrepeat: 0});&amp;#10;}&amp;#10;}&amp;#10;&amp;#10;// Ranking for foods&amp;#10;HVdf.sort((a, b) =&gt; b.rating - a.rating);&amp;#10;MVdf.sort((a, b) =&gt; b.rating - a.rating);&amp;#10;LVdf.sort((a, b) =&gt; b.rating - a.rating);&amp;#10;&amp;#10;for (var i = 0; i &lt; HVdf.length; i++) {&amp;#10;    HVdf[i].ranking = (i+1);&amp;#10;}&amp;#10;for (var i = 0; i &lt; MVdf.length; i++) {&amp;#10;    MVdf[i].ranking = (i+1);&amp;#10;}&amp;#10;for (var i = 0; i &lt; LVdf.length; i++) {&amp;#10;    LVdf[i].ranking = (i+1);&amp;#10;}&amp;#10;&amp;#10;&amp;#10;// Function to calculate the absolute difference between two values&amp;#10;function absDiff(a, b) {&amp;#10;    return Math.abs(a - b);&amp;#10;}&amp;#10;&amp;#10;// Function to find the intersection of two arrays&amp;#10;function intersect(arr1, arr2) {&amp;#10;    return arr1.filter((value) =&gt; arr2.includes(value));&amp;#10;}&amp;#10;&amp;#10;// Helper function to get a random integer within a range&amp;#10;function getRandomInt(min, max) {&amp;#10;    return Math.floor(Math.random() * (max - min + 1) + min);&amp;#10;}&amp;#10;&amp;#10;// Helper function for median&amp;#10;function median(values){&amp;#10;    if(values.length ===0) throw new Error(&quot;No inputs&quot;);&amp;#10;&amp;#10;    values.sort(function(a,b){&amp;#10;    return a-b;&amp;#10;    });&amp;#10;&amp;#10;    var half = Math.floor(values.length / 2);&amp;#10;    &amp;#10;    if (values.length % 2)&amp;#10;    return values[half];&amp;#10;    &amp;#10;    return (values[half - 1] + values[half]) / 2.0;&amp;#10;}&amp;#10;&amp;#10;// Other necessary variables&amp;#10;var got_em = 0;&amp;#10;var jitterHV = 0;&amp;#10;var jitterMV = 0;&amp;#10;var jitterLV = 0;&amp;#10;var iteration = 0;&amp;#10;&amp;#10;&amp;#10;while (got_em === 0) {&amp;#10;    if (iteration &gt; 100) {&amp;#10;        console.log(&quot;Too many tries&quot;)&amp;#10;        break&amp;#10;    }&amp;#10;&amp;#10;    // Protect jitter from going beyond the bounds of the median value&amp;#10;    var maxJitterHV = HVdf.length / 2;&amp;#10;    var maxJitterMV = MVdf.length / 2;&amp;#10;    var maxJitterLV = LVdf.length / 2;&amp;#10;&amp;#10;    if (Math.abs(jitterHV) &gt; maxJitterHV) {&amp;#10;        jitterHV = getRandomInt(-maxJitterHV, maxJitterHV);&amp;#10;    }&amp;#10;    if (Math.abs(jitterMV) &gt; maxJitterMV) {&amp;#10;        jitterMV = getRandomInt(-maxJitterMV, maxJitterMV);&amp;#10;    }&amp;#10;    if (Math.abs(jitterLV) &gt; maxJitterLV) {&amp;#10;        jitterLV = getRandomInt(-maxJitterLV, maxJitterLV);&amp;#10;    }&amp;#10;&amp;#10;    // Median trials&amp;#10;    var medianHV = HVdf.find((obj) =&gt; obj.ranking === Math.round(median(HVdf.map((obj) =&gt; obj.ranking)) + jitterHV));&amp;#10;    if (!medianHV) {&amp;#10;        jitterHV += getRandomInt(-4, 4);&amp;#10;        continue;&amp;#10;    }&amp;#10;    var medianMV = MVdf.find((obj) =&gt; obj.ranking === Math.round(median(MVdf.map((obj) =&gt; obj.ranking)) + jitterMV))&amp;#10;    if (!medianMV) {&amp;#10;        jitterMV += getRandomInt(-4, 4);&amp;#10;        continue;&amp;#10;    }&amp;#10;    var medianLV = LVdf.find((obj) =&gt; obj.ranking === Math.round(median(LVdf.map((obj) =&gt; obj.ranking)) + jitterLV))&amp;#10;    if (!medianLV) {&amp;#10;        jitterLV += getRandomInt(-4, 4);&amp;#10;        continue;&amp;#10;    }&amp;#10;&amp;#10;    // Values of median trial&amp;#10;    var medHV = medianHV.rating;&amp;#10;    var medMV = medianMV.rating;&amp;#10;    var medLV = medianLV.rating;&amp;#10;&amp;#10;    // Trials below/above median&amp;#10;    var lowerHV =  HVdf&amp;#10;        .filter((obj) =&gt; obj.ranking &gt; Math.round(median(HVdf.map((obj) =&gt; obj.ranking))))&amp;#10;        .sort((a, b) =&gt; b - a);&amp;#10;    var upperHV =  HVdf&amp;#10;        .filter((obj) =&gt; obj.ranking &lt; Math.round(median(HVdf.map((obj) =&gt; obj.ranking))))&amp;#10;        .sort((a, b) =&gt; b - a);&amp;#10;    var lowerMV = MVdf&amp;#10;        .filter((obj) =&gt; obj.ranking &gt; Math.round(median(MVdf.map((obj) =&gt; obj.ranking))))&amp;#10;        .sort((a, b) =&gt; b - a);&amp;#10;    var upperMV = MVdf&amp;#10;        .filter((obj) =&gt; obj.ranking &lt; Math.round(median(MVdf.map((obj) =&gt; obj.ranking))))&amp;#10;        .sort((a, b) =&gt; b - a);&amp;#10;    var lowerLV = LVdf&amp;#10;        .filter((obj) =&gt; obj.ranking &gt; Math.round(median(LVdf.map((obj) =&gt; obj.ranking))))&amp;#10;        .sort((a, b) =&gt; b - a);&amp;#10;    var upperLV = LVdf&amp;#10;        .filter((obj) =&gt; obj.ranking &lt; Math.round(median(LVdf.map((obj) =&gt; obj.ranking))))&amp;#10;        .sort((a, b) =&gt; b - a);&amp;#10;&amp;#10;    // Subtract each value from the median to create a difference score for later matching&amp;#10;    // Round to nearest 0.2&amp;#10;    lowerHV.forEach(item =&gt; {&amp;#10;        item.rat_diff = Math.ceil(Math.abs(item.rating - medHV) * 10) * 2 / 10;&amp;#10;      });&amp;#10;    upperHV.forEach(item =&gt; {&amp;#10;        item.rat_diff = Math.ceil(Math.abs(item.rating - medHV) * 10) * 2 / 10;&amp;#10;      });  &amp;#10;&amp;#10;    lowerMV.forEach(item =&gt; {&amp;#10;        item.rat_diff = Math.ceil(Math.abs(item.rating - medMV) * 10) * 2 / 10;&amp;#10;      });&amp;#10;    upperMV.forEach(item =&gt; {&amp;#10;        item.rat_diff = Math.ceil(Math.abs(item.rating - medMV) * 10) * 2 / 10;&amp;#10;      });  &amp;#10;&amp;#10;    lowerLV.forEach(item =&gt; {&amp;#10;        item.rat_diff = Math.ceil(Math.abs(item.rating - medLV) * 10) * 2 / 10;&amp;#10;      });&amp;#10;    upperLV.forEach(item =&gt; {&amp;#10;        item.rat_diff = Math.ceil(Math.abs(item.rating - medLV) * 10) * 2 / 10;&amp;#10;      });  &amp;#10;      &amp;#10;    // Find the intersection of VDs&amp;#10;    let intersect_value_HV = [];&amp;#10;    lowerHV.forEach(lowerItem =&gt; {&amp;#10;        upperHV.forEach(upperItem =&gt; {&amp;#10;        if (lowerItem.rat_diff === upperItem.rat_diff &amp;&amp; lowerItem.rat_diff !== 0) {&amp;#10;          intersect_value_HV.push({ lowerItem, upperItem });&amp;#10;        }&amp;#10;      });&amp;#10;    });&amp;#10;&amp;#10;    let intersect_value_MV = [];&amp;#10;    lowerMV.forEach(lowerItem =&gt; {&amp;#10;        upperMV.forEach(upperItem =&gt; {&amp;#10;        if (lowerItem.rat_diff === upperItem.rat_diff &amp;&amp; lowerItem.rat_diff !== 0) {&amp;#10;            intersect_value_MV.push({ lowerItem, upperItem });&amp;#10;        }&amp;#10;        });&amp;#10;    });&amp;#10;&amp;#10;    let intersect_value_LV = [];&amp;#10;    lowerLV.forEach(lowerItem =&gt; {&amp;#10;        upperLV.forEach(upperItem =&gt; {&amp;#10;        if (lowerItem.rat_diff === upperItem.rat_diff &amp;&amp; lowerItem.rat_diff !== 0) {&amp;#10;            intersect_value_LV.push({ lowerItem, upperItem });&amp;#10;        }&amp;#10;        });&amp;#10;    });&amp;#10;&amp;#10;    if (intersect_value_HV.length === 0) {&amp;#10;        jitterHV += getRandomInt(-4, 4);&amp;#10;       continue;&amp;#10;    }&amp;#10;    if (intersect_value_MV.length === 0) {&amp;#10;        jitterMV += getRandomInt(-4, 4);&amp;#10;       continue;&amp;#10;    }&amp;#10;    if (intersect_value_LV.length === 0) {&amp;#10;        jitterLV += getRandomInt(-4, 4);&amp;#10;       continue;&amp;#10;    }&amp;#10;&amp;#10;    // Find items with the same rat_diff from intersect_value_HV, intersect_value_MV, and intersect_value_LV&amp;#10;    let intersect_all = [];&amp;#10;    intersect_value_HV.forEach(itemHV =&gt; {&amp;#10;        intersect_value_MV.forEach(itemMV =&gt; {&amp;#10;            intersect_value_LV.forEach(itemLV =&gt; {&amp;#10;                if (&amp;#10;                    itemHV.lowerItem.rat_diff === itemMV.lowerItem.rat_diff &amp;&amp;&amp;#10;                    itemHV.lowerItem.rat_diff === itemLV.lowerItem.rat_diff&amp;#10;                ) {&amp;#10;                    intersect_all.push({&amp;#10;                    HV: itemHV,&amp;#10;                    MV: itemMV,&amp;#10;                    LV: itemLV&amp;#10;                });&amp;#10;                }&amp;#10;            });&amp;#10;        });&amp;#10;    });&amp;#10;&amp;#10;    if (intersect_all.length === 0) {&amp;#10;        var jitt_r = getRandomInt(1, 3);&amp;#10;        if (jitt_r === 1) {&amp;#10;            jitterLV += getRandomInt(-4, 4);&amp;#10;            continue;&amp;#10;        } else if (jitt_r === 2) {&amp;#10;            jitterMV += getRandomInt(-4, 4);&amp;#10;            continue;&amp;#10;        } else {&amp;#10;            jitterHV += getRandomInt(-4, 4);&amp;#10;            continue;&amp;#10;        }&amp;#10;    }&amp;#10;&amp;#10;    // High-Value&amp;#10;    // Lower&amp;#10;    var lowerHVFood = intersect_all[0].HV.lowerItem&amp;#10;    // Upper&amp;#10;    var upperHVFood = intersect_all[0].HV.upperItem&amp;#10;&amp;#10;&amp;#10;    // Middle-Value&amp;#10;    // Lower&amp;#10;    var lowerMVFood = intersect_all[0].MV.lowerItem&amp;#10;    // Upper&amp;#10;    var upperMVFood = intersect_all[0].MV.upperItem&amp;#10;&amp;#10;    // Low-Value&amp;#10;    // Lower&amp;#10;    var lowerLVFood = intersect_all[0].LV.lowerItem&amp;#10;    // Upper&amp;#10;    var upperLVFood = intersect_all[0].LV.upperItem&amp;#10;&amp;#10;    // Assign 'whichItem' values&amp;#10;    upperHVFood['whichItem'] = 'HV1';&amp;#10;    upperMVFood['whichItem'] = 'MV1';&amp;#10;    upperLVFood['whichItem'] = 'LV1';&amp;#10;    medianHV['whichItem'] = 'HV2';&amp;#10;    medianMV['whichItem'] = 'MV2';&amp;#10;    medianLV['whichItem'] = 'LV2';&amp;#10;    lowerHVFood['whichItem'] = 'HV3';&amp;#10;    lowerMVFood['whichItem'] = 'MV3';&amp;#10;    lowerLVFood['whichItem'] = 'LV3';&amp;#10;    &amp;#10;    // Assign values to associate with rainbow&amp;#10;    lowerLVFood['val'] = 1;&amp;#10;    medianLV['val'] = 2;&amp;#10;    upperLVFood['val'] = 3;&amp;#10;    lowerMVFood['val'] = 4;&amp;#10;    medianMV['val'] = 5;&amp;#10;    upperMVFood['val'] = 6;&amp;#10;    lowerHVFood['val'] = 7;&amp;#10;    medianHV['val'] = 8;&amp;#10;    upperHVFood['val'] = 9;&amp;#10;&amp;#10;&amp;#10;    // Concatenate data to the foodDF array (assuming it is an array of objects)&amp;#10;    foodDF.push(medianHV);&amp;#10;    foodDF.push(medianMV);&amp;#10;    foodDF.push(medianLV);&amp;#10;    foodDF.push(lowerHVFood);&amp;#10;    foodDF.push(lowerMVFood);&amp;#10;    foodDF.push(lowerLVFood);&amp;#10;    foodDF.push(upperHVFood);&amp;#10;    foodDF.push(upperMVFood);&amp;#10;    foodDF.push(upperLVFood);&amp;#10;&amp;#10;    if (foodDF.length === 9) {&amp;#10;    got_em = 1;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;console.log(foodDF);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Rank each&amp;#10;# Create a set of 3 images per category such that each image has the same difference&amp;#10;## That is LV1 - LV2 == HV1 - HV2 == MV1 - MV2&amp;#10;&amp;#10;## Separate foods based on value category&amp;#10;HVdf = food_ratings_df.loc[food_ratings_df['val_cat'] == 'HV']&amp;#10;MVdf = food_ratings_df.loc[food_ratings_df['val_cat'] == 'MV']&amp;#10;LVdf = food_ratings_df.loc[food_ratings_df['val_cat'] == 'LV']&amp;#10;&amp;#10;# Generate ranks&amp;#10;HVdf['ranking'] = HVdf['rating'].rank(ascending=False, method = 'first')&amp;#10;MVdf['ranking'] = MVdf['rating'].rank(ascending=False, method = 'first')&amp;#10;LVdf['ranking'] = LVdf['rating'].rank(ascending=False, method = 'first')&amp;#10;&amp;#10;#See if we can find pairs with the same value-difference&amp;#10;got_em = 0&amp;#10;jitterHV = 0 # for adjusting the median around&amp;#10;jitterMV = 0&amp;#10;jitterLV = 0&amp;#10;&amp;#10;while got_em == 0:&amp;#10;&amp;#10;    # Protect Jitter from going beyond the bounds of the median value&amp;#10;    if abs(jitterHV) &gt; len(HVdf['ranking'])/2:&amp;#10;        jitterHV = np.random.randint(low=-len(HVdf['ranking'])/4,high=len(HVdf['ranking'])/4)&amp;#10;    if abs(jitterMV) &gt; len(MVdf['ranking'])/2:&amp;#10;        jitterMV = np.random.randint(low=-len(MVdf['ranking'])/4,high=len(MVdf['ranking'])/4)&amp;#10;    if abs(jitterLV) &gt; len(LVdf['ranking'])/2:&amp;#10;        jitterLV = np.random.randint(low=-len(LVdf['ranking'])/4,high=len(LVdf['ranking'])/4)&amp;#10;&amp;#10;    # Median trials&amp;#10;    medianHV = HVdf.loc[HVdf['ranking'] == round(np.median(HVdf['ranking']) + jitterHV)]&amp;#10;    if medianHV['id'].any() == False:&amp;#10;        jitterHV = jitterHV + np.random.randint(low=-4,high=4)&amp;#10;        medianHV = HVdf.loc[HVdf['ranking'] == round(np.median(HVdf['ranking']) + jitterHV)]&amp;#10;        &amp;#10;    medianMV = MVdf.loc[MVdf['ranking'] == round(np.median(MVdf['ranking']) + jitterMV)]&amp;#10;    if medianMV['id'].any() == False:&amp;#10;        jitterMV = jitterMV + np.random.randint(low=-4,high=4)&amp;#10;        medianMV = MVdf.loc[MVdf['ranking'] == round(np.median(MVdf['ranking']) + jitterMV)]&amp;#10;&amp;#10;    medianLV = LVdf.loc[LVdf['ranking'] == round(np.median(LVdf['ranking']) + jitterLV)]&amp;#10;    if medianLV['id'].any() == False:&amp;#10;        jitterLV = jitterLV + np.random.randint(low=-4,high=4)&amp;#10;        medianLV = LVdf.loc[LVdf['ranking'] == round(np.median(LVdf['ranking']) + jitterLV)]&amp;#10;&amp;#10;    # Values of median trial&amp;#10;     &amp;#10;    medHV = float(medianHV['rating'].values)&amp;#10;    medMV = float(medianMV['rating'].values)&amp;#10;    medLV = float(medianLV['rating'].values)&amp;#10;&amp;#10;    # Trials below/above median&amp;#10;    lowerHV = HVdf.loc[HVdf['ranking'] &gt; round(np.median(HVdf['ranking']))].sort_values(by =['ranking'], ascending=False)&amp;#10;    upperHV = HVdf.loc[HVdf['ranking'] &lt; round(np.median(HVdf['ranking']))].sort_values(by =['ranking'])&amp;#10;    lowerMV = MVdf.loc[MVdf['ranking'] &gt; round(np.median(MVdf['ranking']))].sort_values(by =['ranking'], ascending=False)&amp;#10;    upperMV = MVdf.loc[MVdf['ranking'] &lt; round(np.median(MVdf['ranking']))].sort_values(by =['ranking'])&amp;#10;    lowerLV = LVdf.loc[LVdf['ranking'] &gt; round(np.median(LVdf['ranking']))].sort_values(by =['ranking'], ascending=False)&amp;#10;    upperLV = LVdf.loc[LVdf['ranking'] &lt; round(np.median(LVdf['ranking']))].sort_values(by =['ranking'])&amp;#10;&amp;#10;    # Subtract each value from the median to create difference score for later matching&amp;#10;    lowerHV['diff'] = np.round(abs(lowerHV['rating'] - medHV),1)&amp;#10;    upperHV['diff'] = np.round(abs(upperHV['rating'] - medHV),1)&amp;#10;    lowerMV['diff'] = np.round(abs(lowerMV['rating'] - medMV),1)&amp;#10;    upperMV['diff'] = np.round(abs(upperMV['rating'] - medMV),1)&amp;#10;    lowerLV['diff'] = np.round(abs(lowerLV['rating'] - medLV),1)&amp;#10;    upperLV['diff'] = np.round(abs(upperLV['rating'] - medLV),1)&amp;#10;&amp;#10;    # Find the intersection of VDs&amp;#10;    intersect_value_HV = np.intersect1d([ lowerHV['diff']], [upperHV['diff']] )&amp;#10;    if not intersect_value_HV.all():&amp;#10;        jitterHV = jitterHV + np.random.randint(low=-4,high=4) # was 1&amp;#10;        continue&amp;#10;    intersect_value_MV = np.intersect1d([ lowerMV['diff']], [upperMV['diff']] )&amp;#10;    if not intersect_value_MV.all():&amp;#10;        jitterMV = jitterMV + np.random.randint(low=-4,high=4)&amp;#10;        continue&amp;#10;    intersect_value_LV = np.intersect1d([ lowerLV['diff']], [upperLV['diff']] )&amp;#10;    if not intersect_value_LV.all():&amp;#10;        jitterLV = jitterLV + np.random.randint(low=-4,high=4)&amp;#10;        continue&amp;#10;    &amp;#10;    intersect_all = np.intersect1d( np.intersect1d(intersect_value_HV, intersect_value_MV), intersect_value_LV)&amp;#10;    if not intersect_all.any():&amp;#10;        jitt_r = np.random.randint(low=1,high=4)&amp;#10;        if jitt_r == 1:&amp;#10;            jitterLV = jitterLV + np.random.randint(low=-4,high=4)&amp;#10;        elif jitt_r == 2:&amp;#10;            jitterMV = jitterMV + np.random.randint(low=-4,high=4)&amp;#10;        else:&amp;#10;            jitterHV = jitterHV + np.random.randint(low=-4,high=4)&amp;#10;        continue&amp;#10;    &amp;#10;    # High-value&amp;#10;    ## Lower&amp;#10;    if len(lowerHV.loc[lowerHV['diff'] == float(intersect_all) ]) &gt; 1:&amp;#10;        lowerHVFood = lowerHV[lowerHV['diff'] == float(intersect_all) ].iloc[[0]]&amp;#10;    else:&amp;#10;        lowerHVFood = lowerHV.loc[lowerHV['diff'] == float(intersect_all)]&amp;#10;    ## Upper&amp;#10;    if len(upperHV.loc[upperHV['diff'] == float(intersect_all) ]) &gt; 1:&amp;#10;        upperHVFood = upperHV[upperHV['diff'] == float(intersect_all) ].iloc[[0]]&amp;#10;    else:&amp;#10;        upperHVFood = upperHV.loc[upperHV['diff'] == float(intersect_all)]&amp;#10;    &amp;#10;    # Middle-value&amp;#10;    ## Lower&amp;#10;    if len(lowerMV.loc[lowerMV['diff'] == float(intersect_all) ]) &gt; 1:&amp;#10;        lowerMVFood = lowerMV[lowerMV['diff'] == float(intersect_all) ].iloc[[0]]&amp;#10;    else:&amp;#10;        lowerMVFood = lowerMV.loc[lowerMV['diff'] == float(intersect_all)]&amp;#10;    ## Upper&amp;#10;    if len(upperMV.loc[upperMV['diff'] == float(intersect_all) ]) &gt; 1:&amp;#10;        upperMVFood = upperMV[upperMV['diff'] == float(intersect_all) ].iloc[[0]]&amp;#10;    else:&amp;#10;        upperMVFood = upperMV.loc[upperMV['diff'] == float(intersect_all)]&amp;#10;&amp;#10;    # Lower-value&amp;#10;    ## Lower&amp;#10;    if len(lowerLV.loc[lowerLV['diff'] == float(intersect_all) ]) &gt; 1:&amp;#10;        lowerLVFood = lowerLV[lowerLV['diff'] == float(intersect_all) ].iloc[[0]]&amp;#10;    else:&amp;#10;        lowerLVFood = lowerLV.loc[lowerLV['diff'] == float(intersect_all)]&amp;#10;    ## Upper&amp;#10;    if len(upperLV.loc[upperLV['diff'] == float(intersect_all) ]) &gt; 1:&amp;#10;        upperLVFood = upperLV[upperLV['diff'] == float(intersect_all) ].iloc[[0]]&amp;#10;    else:&amp;#10;        upperLVFood = upperLV.loc[upperLV['diff'] == float(intersect_all)]&amp;#10;&amp;#10;    upperHVFood['whichItem'] = 'HV1'&amp;#10;    upperMVFood['whichItem'] = 'MV1'&amp;#10;    upperLVFood['whichItem'] = 'LV1'&amp;#10;    medianHV['whichItem'] = 'HV2'&amp;#10;    medianMV['whichItem'] = 'MV2'&amp;#10;    medianLV['whichItem'] = 'LV2'&amp;#10;    lowerHVFood['whichItem'] = 'HV3'&amp;#10;    lowerMVFood['whichItem'] = 'MV3'&amp;#10;    lowerLVFood['whichItem'] = 'LV3'&amp;#10;        &amp;#10;    foodDF = pd.concat([foodDF,medianHV])&amp;#10;    foodDF = pd.concat([foodDF, medianMV])&amp;#10;    foodDF = pd.concat([foodDF, medianLV])&amp;#10;    foodDF = pd.concat([foodDF, lowerHVFood])&amp;#10;    foodDF = pd.concat([foodDF, lowerMVFood])&amp;#10;    foodDF = pd.concat([foodDF, lowerLVFood])&amp;#10;    foodDF = pd.concat([foodDF, upperHVFood])&amp;#10;    foodDF = pd.concat([foodDF, upperMVFood])&amp;#10;    foodDF = pd.concat([foodDF, upperLVFood])&amp;#10;    #if xx:&amp;#10;    #    jitter = jitter + 1&amp;#10;    #else:&amp;#10;    if foodDF.shape[0] == 9:&amp;#10;        got_em = 1&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="sort_food_df_js" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="choose_food">
      <CodeComponent name="select_food_image">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="thisImage = []" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="var thisImage = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="thisImage_obj = foodDF&amp;#10;    .filter((obj) =&gt; obj.whichItem === whichItem)&amp;#10;&amp;#10;thisImage_obj2 = thisImage_obj[0].image;&amp;#10;thisImage = thisImage_obj2.image;&amp;#10;//console.log(thisImage);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#import csv&amp;#10;#filename = &quot;test_foodDF.csv&quot;&amp;#10;#with open(filename, 'w', newline='') as file:&amp;#10;#    writer = csv.DictWriter(file, fieldnames=foodDF.keys())&amp;#10;#    writer.writeheader()&amp;#10;#    writer.writerows(foodDF)&amp;#10;    &amp;#10;thisImage = str(foodDF.image[foodDF['whichItem'] == whichItem].values)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="select_food_image" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="food_img_choice">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$thisImage" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="food_img_choice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.75" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="instr_1">
      <CodeComponent name="instr_dict">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="nrounds = 150" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="nrounds = 150;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instr_back_txt = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;back_forth&quot;, &quot;text&quot;: &quot;&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;pos&quot;: [0, (- 0.4)], &quot;height&quot;: 0.05, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0, &quot;color&quot;: &quot;white&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: 1, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: 0.0});&amp;#10;instr_back_txt.text = &quot;\nPress RIGHT ARROW to continue.&quot;;&amp;#10;instr_back_txt.autoDraw = true;&amp;#10;if ((BONUS_BOOL === 1)) {&amp;#10;    instr_strs = {};&amp;#10;    instr_strs[0] = `Today, your task will be to make a series of choices between two treasure chests. Each chest will contain a variety of crystals inside.&amp;#10;&amp;#10;For your participation today, you will gain a bonus based on your choices.`&amp;#10;;&amp;#10;    instr_strs[1] = `Here are two diffferent treasure chest examples&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;`&amp;#10;;&amp;#10;    instr_strs[2] = `Over ${nrounds} rounds, you will be choosing the better of two treasure chests. The value of each treasure chest is simply the sum of the values of each crystal in the chest. The crystals are each worth a different number of points depending on their color, and each color is equally likely to appear. In this task, every point is worth ${(conversion_rate * 100)} cents. In order to know the value of a treasure chest, you will first need to learn what each color is worth.&amp;#10;&amp;#10;`&amp;#10;;&amp;#10;    instr_strs[3] = `The following screen will display the colors you will see throughout this task.`;&amp;#10;    instr_strs[4] = `The value of the colors increases across the spectrum, from left to right.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;`&amp;#10;;&amp;#10;} else {&amp;#10;    instr_strs = {};&amp;#10;    instr_strs[0] = `Today, your task will be to mine for treasure chests. Each chest will contain a variety of crystals inside, representing different types of rewards.&amp;#10;&amp;#10;`&amp;#10;;&amp;#10;    instr_strs[1] = `Here are two diffferent treasure chest examples&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;`&amp;#10;;&amp;#10;    if ((FOOD_BOOL === 1)) {&amp;#10;        instr_strs[2] = `Different crystals can be exchanged for different types of rewards. Some crystals can be exchanged for images of food, while others can be exchanged for images of social gatherings.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;`&amp;#10;;&amp;#10;    } else {&amp;#10;        instr_strs[2] = `Different crystals can be exchanged for different types of rewards. Some crystals can be exchanged for images of drugs, while others can be exchanged for images of social gatherings.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;`&amp;#10;;&amp;#10;    }&amp;#10;    instr_strs[3] = `Before you start learning about the crystals, you will first rate a series of images. This will ensure that the rewards are tailored to your specific preferences.`;&amp;#10;}&amp;#10;instr_disp_txt = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;instructions&quot;, &quot;text&quot;: &quot;&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;pos&quot;: [0, 0], &quot;height&quot;: 0.04, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0, &quot;color&quot;: &quot;white&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: 1, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: 0.0});&amp;#10;instr_disp_txt.text = instr_strs[0];&amp;#10;instr_disp_txt.autoDraw = true;&amp;#10;curr_instr = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instr_back_txt = visual.TextStim(win=win, name='back_forth',&amp;#10;    text='',&amp;#10;    font='Arial',&amp;#10;    pos=(0, -.4), height=0.05, wrapWidth=None, ori=0, &amp;#10;    color='white', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;&amp;#10;instr_back_txt.text = '\nPress RIGHT ARROW to continue.'&amp;#10;instr_back_txt.autoDraw = True&amp;#10;#win.flip()&amp;#10;&amp;#10;# 1 - Display treasure chests&amp;#10;# 5 - Display rainbow&amp;#10;&amp;#10;if BONUS_BOOL == 1:&amp;#10;    instr_strs = {}&amp;#10;    instr_strs[0] = f'Today, your task will be to make a series of choices between two treasure chests. Each chest will contain a variety of crystals inside.\n\nFor your participation today, you will gain a bonus based on your choices.'&amp;#10;    instr_strs[1] = f'Here are two diffferent treasure chest examples\n\n\n\n\n\n\n\n\n\n\n\n\n'&amp;#10;    instr_strs[2] = f'Over {nrounds} rounds, you will be choosing the better of two treasure chests. The value of each treasure chest is simply the sum of the values of each crystal in the chest. The crystals are each worth a different number of points depending on their color, and each color is equally likely to appear. In this task, every point is worth {conversion_rate*100} cents. In order to know the value of a treasure chest, you will first need to learn what each color is worth.\n\n\n'&amp;#10;    instr_strs[3] = f'The following screen will display the colors you will see throughout this task.'&amp;#10;    instr_strs[4] = f'The value of the colors increases across the spectrum, from left to right.\n\n\n\n\n\n\n\n\n\n\n\n\n\n'&amp;#10;else:&amp;#10;    instr_strs = {}&amp;#10;    instr_strs[0] = f'Today, your task will be to mine for treasure chests. Each chest will contain a variety of crystals inside, representing different types of rewards.\n\n\n'&amp;#10;    instr_strs[1] = f'Here are two diffferent treasure chest examples\n\n\n\n\n\n\n\n\n\n\n\n\n'&amp;#10;    if FOOD_BOOL == 1:&amp;#10;        instr_strs[2] = f'Different crystals can be exchanged for different types of rewards. Some crystals can be exchanged for images of food, while others can be exchanged for images of social gatherings.\n\n\n\n\n\n\n\n'&amp;#10;    else:&amp;#10;        instr_strs[2] = f'Different crystals can be exchanged for different types of rewards. Some crystals can be exchanged for images of drugs, while others can be exchanged for images of social gatherings.\n\n\n\n\n\n\n\n'&amp;#10;    instr_strs[3] = f'Before you start learning about the crystals, you will first rate a series of images. This will ensure that the rewards are tailored to your specific preferences.'&amp;#10;&amp;#10;instr_disp_txt = visual.TextStim(win=win, name='instructions',&amp;#10;    text='',&amp;#10;    font='Arial',&amp;#10;    pos=(0, 0), height=0.04, wrapWidth=None, ori=0, &amp;#10;    color='white', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;instr_disp_txt.text = instr_strs[0]&amp;#10;instr_disp_txt.autoDraw = True&amp;#10;&amp;#10;curr_instr = 0&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="instr_keys = event.getKeys()&amp;#10;&amp;#10;if curr_instr == 0:&amp;#10;    instr_back_txt.text = '\nPress RIGHT ARROW to continue.'&amp;#10;&amp;#10;    if 'right' in instr_keys:&amp;#10;        instr_keyboard.clearEvents()&amp;#10;        curr_instr += 1&amp;#10;        instr_disp_txt.text = instr_strs[curr_instr]&amp;#10;        instr_back_txt.autoDraw = True&amp;#10;#        win.flip()&amp;#10;elif curr_instr == 3: #Last slide&amp;#10;    instr_back_txt.text = 'Press LEFT ARROW to go back.\nPress RIGHT ARROW to begin.'&amp;#10;    if 'right' in instr_keys:&amp;#10;        instr_keyboard.clearEvents()&amp;#10;        continueRoutine = False&amp;#10;    elif 'left' in instr_keys:&amp;#10;        instr_keyboard.clearEvents()&amp;#10;        curr_instr -= 1&amp;#10;        instr_disp_txt.text = instr_strs[curr_instr]&amp;#10;        &amp;#10;        # if prev instr == 0, then remove left arrow as option&amp;#10;        if curr_instr == 0:&amp;#10;            instr_back_txt.autoDraw = False&amp;#10;        else:&amp;#10;            instr_back_txt.autoDraw = True&amp;#10;else:&amp;#10;    if curr_instr == 2:&amp;#10;        #social_image.setAutoDraw(True)&amp;#10;        if FOOD_BOOL == 1:&amp;#10;            food_image_1.setAutoDraw(True)&amp;#10;            food_image_2.setAutoDraw(True)&amp;#10;        else:&amp;#10;            drug_image.setAutoDraw(True)&amp;#10;        &amp;#10;    instr_back_txt.text = 'Press LEFT ARROW to go back.\nPress RIGHT ARROW to continue.'&amp;#10;    if 'right' in instr_keys:&amp;#10;        social_image.setAutoDraw(False)&amp;#10;        food_image_1.setAutoDraw(False)&amp;#10;        food_image_2.setAutoDraw(False)&amp;#10;        drug_image.setAutoDraw(False)&amp;#10;        &amp;#10;        instr_keyboard.clearEvents()&amp;#10;        curr_instr += 1&amp;#10;        instr_disp_txt.text = instr_strs[curr_instr]&amp;#10;        instr_back_txt.autoDraw = True&amp;#10;#        win.flip()&amp;#10;    elif 'left' in instr_keys:&amp;#10;        &amp;#10;        social_image.setAutoDraw(False)&amp;#10;        food_image_1.setAutoDraw(False)&amp;#10;        food_image_2.setAutoDraw(False)&amp;#10;        drug_image.setAutoDraw(False)&amp;#10;        &amp;#10;        instr_keyboard.clearEvents()&amp;#10;        curr_instr -= 1&amp;#10;        instr_disp_txt.text = instr_strs[curr_instr]&amp;#10;        &amp;#10;        # if prev instr == 0, then remove left arrow as option&amp;#10;        if curr_instr == 0:&amp;#10;            instr_back_txt.text = '\nPress RIGHT ARROW to continue.'&amp;#10;        else:&amp;#10;            instr_back_txt.text = 'Press LEFT ARROW to go back.\nPress RIGHT ARROW to continue.'&amp;#10;            &amp;#10;#        win.flip()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;instr_keys = psychoJS.eventManager.getKeys();&amp;#10;if ((curr_instr === 0)) {&amp;#10;    instr_back_txt.text = &quot;\nPress RIGHT ARROW to continue.&quot;;&amp;#10;    if (_pj.in_es6(&quot;right&quot;, instr_keys)) {&amp;#10;        instr_keyboard.clearEvents();&amp;#10;        curr_instr += 1;&amp;#10;        instr_disp_txt.text = instr_strs[curr_instr];&amp;#10;        instr_back_txt.autoDraw = true;&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((curr_instr === 3)) {&amp;#10;        instr_back_txt.text = &quot;Press LEFT ARROW to go back.\nPress RIGHT ARROW to begin.&quot;;&amp;#10;        if (_pj.in_es6(&quot;right&quot;, instr_keys)) {&amp;#10;            instr_keyboard.clearEvents();&amp;#10;            continueRoutine = false;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;left&quot;, instr_keys)) {&amp;#10;                instr_keyboard.clearEvents();&amp;#10;                curr_instr -= 1;&amp;#10;                instr_disp_txt.text = instr_strs[curr_instr];&amp;#10;                if ((curr_instr === 0)) {&amp;#10;                    instr_back_txt.autoDraw = false;&amp;#10;                } else {&amp;#10;                    instr_back_txt.autoDraw = true;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((curr_instr === 2)) {&amp;#10;            if ((FOOD_BOOL === 1)) {&amp;#10;                food_image_1.setAutoDraw(true);&amp;#10;                food_image_2.setAutoDraw(true);&amp;#10;            } else {&amp;#10;                drug_image.setAutoDraw(true);&amp;#10;            }&amp;#10;        }&amp;#10;        instr_back_txt.text = &quot;Press LEFT ARROW to go back.\nPress RIGHT ARROW to continue.&quot;;&amp;#10;        if (_pj.in_es6(&quot;right&quot;, instr_keys)) {&amp;#10;            social_image.setAutoDraw(false);&amp;#10;            food_image_1.setAutoDraw(false);&amp;#10;            food_image_2.setAutoDraw(false);&amp;#10;            drug_image.setAutoDraw(false);&amp;#10;            instr_keyboard.clearEvents();&amp;#10;            curr_instr += 1;&amp;#10;            instr_disp_txt.text = instr_strs[curr_instr];&amp;#10;            instr_back_txt.autoDraw = true;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;left&quot;, instr_keys)) {&amp;#10;                social_image.setAutoDraw(false);&amp;#10;                food_image_1.setAutoDraw(false);&amp;#10;                food_image_2.setAutoDraw(false);&amp;#10;                drug_image.setAutoDraw(false);&amp;#10;                instr_keyboard.clearEvents();&amp;#10;                curr_instr -= 1;&amp;#10;                instr_disp_txt.text = instr_strs[curr_instr];&amp;#10;                if ((curr_instr === 0)) {&amp;#10;                    instr_back_txt.text = &quot;\nPress RIGHT ARROW to continue.&quot;;&amp;#10;                } else {&amp;#10;                    instr_back_txt.text = &quot;Press LEFT ARROW to go back.\nPress RIGHT ARROW to continue.&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="instr_back_txt.autoDraw = false;&amp;#10;instr_disp_txt.autoDraw = false;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="instr_back_txt.autoDraw = False&amp;#10;instr_disp_txt.autoDraw = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="instr_dict" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="instr_keyboard">
        <Param val="'left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="instr_keyboard" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="set_ex_images">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="food_image_1 = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name='food_image', &amp;#10;    image='stimuli/food/AA026307.png', mask=None, anchor='center',&amp;#10;    ori=0.0, pos=(-.300, -.1), size=(1, 1),&amp;#10;    color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;    flipHoriz=False, flipVert=False,&amp;#10;    texRes=128.0, interpolate=False, depth=-1.0)&amp;#10;food_image_2 = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name='food_image', &amp;#10;    image='stimuli/food/AA026339.png', mask=None, anchor='center',&amp;#10;    ori=0.0, pos=(.300, -.1), size=(1, 1),&amp;#10;    color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;    flipHoriz=False, flipVert=False,&amp;#10;    texRes=128.0, interpolate=False, depth=-1.0)&amp;#10;drug_image = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name='drug_image', &amp;#10;    image='stimuli/food/AA026307.png', mask=None, anchor='center',&amp;#10;    ori=0.0, pos=(-.300, -.1), size=(.25, .25),&amp;#10;    color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;    flipHoriz=False, flipVert=False,&amp;#10;    texRes=128.0, interpolate=False, depth=-1.0)&amp;#10;social_image = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name='social_image', &amp;#10;    image='stimuli/food/AA026307.png', mask=None, anchor='center',&amp;#10;    ori=0.0, pos=(.300, -.1), size=(.25, .25),&amp;#10;    color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;    flipHoriz=True, flipVert=False,&amp;#10;    texRes=128.0, interpolate=False, depth=-2.0)&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="food_image_1 = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;food_image&quot;, &quot;image&quot;: &quot;stimuli/food/AA026307.png&quot;, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [(- 0.3), (- 0.1)], &quot;size&quot;: [1, 1], &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: false, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: false, &quot;depth&quot;: (- 1.0)});&amp;#10;food_image_2 = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;food_image&quot;, &quot;image&quot;: &quot;stimuli/food/AA026339.png&quot;, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [0.3, (- 0.1)], &quot;size&quot;: [1, 1], &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: false, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: false, &quot;depth&quot;: (- 1.0)});&amp;#10;drug_image = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;drug_image&quot;, &quot;image&quot;: &quot;stimuli/food/AA026307.png&quot;, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [(- 0.3), (- 0.1)], &quot;size&quot;: [0.25, 0.25], &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: false, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: false, &quot;depth&quot;: (- 1.0)});&amp;#10;social_image = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;social_image&quot;, &quot;image&quot;: &quot;stimuli/food/AA026307.png&quot;, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [0.3, (- 0.1)], &quot;size&quot;: [0.25, 0.25], &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: true, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: false, &quot;depth&quot;: (- 2.0)});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_ex_images" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instr_2">
      <CodeComponent name="instr_dict_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="days = 10&amp;#10;rounds = 15" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="days = 10;&amp;#10;rounds = 15;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="instr_back_txt = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;back_forth&quot;, &quot;text&quot;: &quot;&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;pos&quot;: [0, (- 0.4)], &quot;height&quot;: 0.05, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0, &quot;color&quot;: &quot;white&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: 1, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: 0.0});&amp;#10;instr_back_txt.text = &quot;\nPress RIGHT ARROW to continue.&quot;;&amp;#10;instr_back_txt.autoDraw = true;&amp;#10;instr_strs = {};&amp;#10;instr_strs[0] = `You have completed the rating phase.&amp;#10;In this next phase, you will learn more about how the mining task works.`&amp;#10;;&amp;#10;instr_strs[1] = `In this task, you are playing the role of a miner. It is up to you to select where you will mine for crystals and which crystals you want to keep.`;&amp;#10;instr_strs[2] = `Over ${days} days, you will be choosing which cave you want to work in. Once you are in a cave, you will be presented with a series of chests containg crystals. The value of these chests depend on the type of crystals inside. Each crystal is worth a different reward, depending on its color.`;&amp;#10;if ((FOOD_BOOL === 1)) {&amp;#10;    instr_strs[3] = `Each day, after selecting a cave, you will make ${rounds} choices between two chests. Some times those chests will contain crystals that give you food rewards, but other times they will give you social rewards.`;&amp;#10;} else {&amp;#10;    instr_strs[3] = `Each day, after selecting a cave, you will make ${rounds} choices between two chests. Some times those chests will contain crystals that give you drug rewards, but other times they will give you social rewards.`;&amp;#10;}&amp;#10;instr_strs[4] = `To get the type of rewards you want, you will need to learn both which mine is more likely to have the right crystals, and which crystals give you the best reward.`;&amp;#10;instr_strs[5] = `The following screen will display the colors you will see throughout this task.`;&amp;#10;instr_strs[6] = `Each rainbow offers a different type of reward. The value of the colors increases across the spectrum, from left to right.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;`&amp;#10;;&amp;#10;instr_disp_txt = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;instructions&quot;, &quot;text&quot;: &quot;&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;pos&quot;: [0, 0], &quot;height&quot;: 0.04, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0, &quot;color&quot;: &quot;white&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: 1, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: 0.0});&amp;#10;instr_disp_txt.text = instr_strs[0];&amp;#10;instr_disp_txt.autoDraw = true;&amp;#10;curr_instr = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="instr_back_txt = visual.TextStim(win=win, name='back_forth',&amp;#10;    text='',&amp;#10;    font='Arial',&amp;#10;    pos=(0, -.4), height=0.05, wrapWidth=None, ori=0, &amp;#10;    color='white', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;&amp;#10;instr_back_txt.text = '\nPress RIGHT ARROW to continue.'&amp;#10;instr_back_txt.autoDraw = True&amp;#10;#win.flip()&amp;#10;&amp;#10;# 1 - Display treasure chests&amp;#10;# 5 - Display rainbow&amp;#10;&amp;#10;&amp;#10;instr_strs = {}&amp;#10;instr_strs[0] = f'You have completed the rating phase.\nIn this next phase, you will learn more about how the mining task works.'&amp;#10;instr_strs[1] = f'In this task, you are playing the role of a miner. It is up to you to select where you will mine for crystals and which crystals you want to keep.'&amp;#10;instr_strs[2] = f'Over {days} days, you will be choosing which cave you want to work in. Once you are in a cave, you will be presented with a series of chests containg crystals. The value of these chests depend on the type of crystals inside. Each crystal is worth a different reward, depending on its color.'&amp;#10;if FOOD_BOOL == 1:&amp;#10;    instr_strs[3] = f'Each day, after selecting a cave, you will make {rounds} choices between two chests. Some times those chests will contain crystals that give you food rewards, but other times they will give you social rewards.'&amp;#10;else:&amp;#10;    instr_strs[3] = f'Each day, after selecting a cave, you will make {rounds} choices between two chests. Some times those chests will contain crystals that give you drug rewards, but other times they will give you social rewards.'&amp;#10;instr_strs[4] = f'To get the type of rewards you want, you will need to learn both which mine is more likely to have the right crystals, and which crystals give you the best reward.';&amp;#10;instr_strs[5] = f'The following screen will display the colors you will see throughout this task.'&amp;#10;instr_strs[6] = f'Each rainbow offers a different type of reward. The value of the colors increases across the spectrum, from left to right.\n\n\n\n\n\n\n\n\n\n\n\n\n\n'&amp;#10;&amp;#10;instr_disp_txt = visual.TextStim(win=win, name='instructions',&amp;#10;    text='',&amp;#10;    font='Arial',&amp;#10;    pos=(0, 0), height=0.04, wrapWidth=None, ori=0, &amp;#10;    color='white', colorSpace='rgb', opacity=1, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=0.0);&amp;#10;instr_disp_txt.text = instr_strs[0]&amp;#10;instr_disp_txt.autoDraw = True&amp;#10;&amp;#10;curr_instr = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="instr_keys = event.getKeys()&amp;#10;&amp;#10;if curr_instr == 0:&amp;#10;    instr_back_txt.text = '\nPress RIGHT ARROW to continue.'&amp;#10;&amp;#10;    if 'right' in instr_keys:&amp;#10;        instr_keyboard.clearEvents()&amp;#10;        curr_instr += 1&amp;#10;        instr_disp_txt.text = instr_strs[curr_instr]&amp;#10;        instr_back_txt.autoDraw = True&amp;#10;#        win.flip()&amp;#10;elif curr_instr == 6: #rainbow&amp;#10;    for swatch_index in range(len(color_scale1)):&amp;#10;        swatches_top[swatch_index].setAutoDraw(True)&amp;#10;        swatches_bot[swatch_index].setAutoDraw(True)&amp;#10;&amp;#10;    instr_back_txt.text = 'Press LEFT ARROW to go back.\nPress RIGHT ARROW to begin.'&amp;#10;    if 'right' in instr_keys:&amp;#10;        for swatch_index in range(len(color_scale1)):&amp;#10;            swatches_top[swatch_index].setAutoDraw(False)&amp;#10;            swatches_bot[swatch_index].setAutoDraw(False)&amp;#10;&amp;#10;        instr_keyboard.clearEvents()&amp;#10;        continueRoutine = False&amp;#10;    elif 'left' in instr_keys:&amp;#10;        for swatch_index in range(len(color_scale_1)):&amp;#10;            swatches_top[swatch_index].setAutoDraw(False)&amp;#10;            swatches_bot[swatch_index].setAutoDraw(False)&amp;#10;&amp;#10;        instr_keyboard.clearEvents()&amp;#10;        curr_instr -= 1&amp;#10;        instr_disp_txt.text = instr_strs[curr_instr]&amp;#10;        &amp;#10;        # if prev instr == 0, then remove left arrow as option&amp;#10;        if curr_instr == 0:&amp;#10;            instr_back_txt.autoDraw = False&amp;#10;        else:&amp;#10;            instr_back_txt.autoDraw = True&amp;#10;            &amp;#10;#        win.flip()&amp;#10;else:&amp;#10;    if curr_instr == 11: #draw shards&amp;#10;        left_chest.setAutoDraw(True)&amp;#10;        left_shard.setAutoDraw(True)&amp;#10;        left_shard_6.setAutoDraw(True)&amp;#10;        left_shard_7.setAutoDraw(True)&amp;#10;        left_shard_8.setAutoDraw(True)&amp;#10;        left_shard_9.setAutoDraw(True)&amp;#10;        left_shard_10.setAutoDraw(True)&amp;#10;        &amp;#10;        right_chest.setAutoDraw(True)&amp;#10;        right_shard.setAutoDraw(True)&amp;#10;        right_shard_6.setAutoDraw(True)&amp;#10;        right_shard_7.setAutoDraw(True)&amp;#10;        right_shard_8.setAutoDraw(True)&amp;#10;        right_shard_9.setAutoDraw(True)&amp;#10;        right_shard_10.setAutoDraw(True)&amp;#10;        &amp;#10;    instr_back_txt.text = 'Press LEFT ARROW to go back.\nPress RIGHT ARROW to continue.'&amp;#10;    if 'right' in instr_keys:&amp;#10;        for swatch_index in range(len(color_scale_1)):&amp;#10;            swatches[swatch_index].setAutoDraw(False)&amp;#10;        left_chest.setAutoDraw(False)&amp;#10;        left_shard.setAutoDraw(False)&amp;#10;        left_shard_6.setAutoDraw(False)&amp;#10;        left_shard_7.setAutoDraw(False)&amp;#10;        left_shard_8.setAutoDraw(False)&amp;#10;        left_shard_9.setAutoDraw(False)&amp;#10;        left_shard_10.setAutoDraw(False)&amp;#10;        &amp;#10;        right_chest.setAutoDraw(False)&amp;#10;        right_shard.setAutoDraw(False)&amp;#10;        right_shard_6.setAutoDraw(False)&amp;#10;        right_shard_7.setAutoDraw(False)&amp;#10;        right_shard_8.setAutoDraw(False)&amp;#10;        right_shard_9.setAutoDraw(False)&amp;#10;        right_shard_10.setAutoDraw(False)&amp;#10;        &amp;#10;        social_image.setAutoDraw(False)&amp;#10;        food_image.setAutoDraw(False)&amp;#10;        drug_image.setAutoDraw(False)&amp;#10;        &amp;#10;        instr_keyboard.clearEvents()&amp;#10;        curr_instr += 1&amp;#10;        instr_disp_txt.text = instr_strs[curr_instr]&amp;#10;        instr_back_txt.autoDraw = True&amp;#10;#        win.flip()&amp;#10;    elif 'left' in instr_keys:&amp;#10;        for swatch_index in range(len(color_scale_1)):&amp;#10;            swatches[swatch_index].setAutoDraw(False)&amp;#10;        left_chest.setAutoDraw(False)&amp;#10;        left_shard.setAutoDraw(False)&amp;#10;        left_shard_6.setAutoDraw(False)&amp;#10;        left_shard_7.setAutoDraw(False)&amp;#10;        left_shard_8.setAutoDraw(False)&amp;#10;        left_shard_9.setAutoDraw(False)&amp;#10;        left_shard_10.setAutoDraw(False)&amp;#10;        &amp;#10;        right_chest.setAutoDraw(False)&amp;#10;        right_shard.setAutoDraw(False)&amp;#10;        right_shard_6.setAutoDraw(False)&amp;#10;        right_shard_7.setAutoDraw(False)&amp;#10;        right_shard_8.setAutoDraw(False)&amp;#10;        right_shard_9.setAutoDraw(False)&amp;#10;        right_shard_10.setAutoDraw(False)&amp;#10;        &amp;#10;        social_image.setAutoDraw(False)&amp;#10;        food_image.setAutoDraw(False)&amp;#10;        drug_image.setAutoDraw(False)&amp;#10;        &amp;#10;        instr_keyboard.clearEvents()&amp;#10;        curr_instr -= 1&amp;#10;        instr_disp_txt.text = instr_strs[curr_instr]&amp;#10;        &amp;#10;        # if prev instr == 0, then remove left arrow as option&amp;#10;        if curr_instr == 0:&amp;#10;            instr_back_txt.text = '\nPress RIGHT ARROW to continue.'&amp;#10;        else:&amp;#10;            instr_back_txt.text = 'Press LEFT ARROW to go back.\nPress RIGHT ARROW to continue.'&amp;#10;            &amp;#10;#        win.flip()" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;instr_keys = psychoJS.eventManager.getKeys();&amp;#10;if ((curr_instr === 0)) {&amp;#10;    instr_back_txt.text = &quot;\nPress RIGHT ARROW to continue.&quot;;&amp;#10;    if (_pj.in_es6(&quot;right&quot;, instr_keys)) {&amp;#10;        instr_keyboard.clearEvents();&amp;#10;        curr_instr += 1;&amp;#10;        instr_disp_txt.text = instr_strs[curr_instr];&amp;#10;        instr_back_txt.autoDraw = true;&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((curr_instr === 6)) {&amp;#10;        for (var swatch_index, _pj_c = 0, _pj_a = util.range(color_scale1.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            swatch_index = _pj_a[_pj_c];&amp;#10;            swatches_top[swatch_index].setAutoDraw(true);&amp;#10;            swatches_bot[swatch_index].setAutoDraw(true);&amp;#10;        }&amp;#10;        instr_back_txt.text = &quot;Press LEFT ARROW to go back.\nPress RIGHT ARROW to begin.&quot;;&amp;#10;        if (_pj.in_es6(&quot;right&quot;, instr_keys)) {&amp;#10;            for (var swatch_index, _pj_c = 0, _pj_a = util.range(color_scale1.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                swatch_index = _pj_a[_pj_c];&amp;#10;                swatches_top[swatch_index].setAutoDraw(false);&amp;#10;                swatches_bot[swatch_index].setAutoDraw(false);&amp;#10;            }&amp;#10;            instr_keyboard.clearEvents();&amp;#10;            continueRoutine = false;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;left&quot;, instr_keys)) {&amp;#10;                for (var swatch_index, _pj_c = 0, _pj_a = util.range(color_scale_1.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    swatch_index = _pj_a[_pj_c];&amp;#10;                    swatches_top[swatch_index].setAutoDraw(false);&amp;#10;                    swatches_bot[swatch_index].setAutoDraw(false);&amp;#10;                }&amp;#10;                instr_keyboard.clearEvents();&amp;#10;                curr_instr -= 1;&amp;#10;                instr_disp_txt.text = instr_strs[curr_instr];&amp;#10;                if ((curr_instr === 0)) {&amp;#10;                    instr_back_txt.autoDraw = false;&amp;#10;                } else {&amp;#10;                    instr_back_txt.autoDraw = true;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((curr_instr === 11)) {&amp;#10;            left_chest.setAutoDraw(true);&amp;#10;            left_shard.setAutoDraw(true);&amp;#10;            left_shard_6.setAutoDraw(true);&amp;#10;            left_shard_7.setAutoDraw(true);&amp;#10;            left_shard_8.setAutoDraw(true);&amp;#10;            left_shard_9.setAutoDraw(true);&amp;#10;            left_shard_10.setAutoDraw(true);&amp;#10;            right_chest.setAutoDraw(true);&amp;#10;            right_shard.setAutoDraw(true);&amp;#10;            right_shard_6.setAutoDraw(true);&amp;#10;            right_shard_7.setAutoDraw(true);&amp;#10;            right_shard_8.setAutoDraw(true);&amp;#10;            right_shard_9.setAutoDraw(true);&amp;#10;            right_shard_10.setAutoDraw(true);&amp;#10;        }&amp;#10;        instr_back_txt.text = &quot;Press LEFT ARROW to go back.\nPress RIGHT ARROW to continue.&quot;;&amp;#10;        if (_pj.in_es6(&quot;right&quot;, instr_keys)) {&amp;#10;            for (var swatch_index, _pj_c = 0, _pj_a = util.range(color_scale_1.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                swatch_index = _pj_a[_pj_c];&amp;#10;                swatches[swatch_index].setAutoDraw(false);&amp;#10;            }&amp;#10;            left_chest.setAutoDraw(false);&amp;#10;            left_shard.setAutoDraw(false);&amp;#10;            left_shard_6.setAutoDraw(false);&amp;#10;            left_shard_7.setAutoDraw(false);&amp;#10;            left_shard_8.setAutoDraw(false);&amp;#10;            left_shard_9.setAutoDraw(false);&amp;#10;            left_shard_10.setAutoDraw(false);&amp;#10;            right_chest.setAutoDraw(false);&amp;#10;            right_shard.setAutoDraw(false);&amp;#10;            right_shard_6.setAutoDraw(false);&amp;#10;            right_shard_7.setAutoDraw(false);&amp;#10;            right_shard_8.setAutoDraw(false);&amp;#10;            right_shard_9.setAutoDraw(false);&amp;#10;            right_shard_10.setAutoDraw(false);&amp;#10;            social_image.setAutoDraw(false);&amp;#10;            food_image.setAutoDraw(false);&amp;#10;            drug_image.setAutoDraw(false);&amp;#10;            instr_keyboard.clearEvents();&amp;#10;            curr_instr += 1;&amp;#10;            instr_disp_txt.text = instr_strs[curr_instr];&amp;#10;            instr_back_txt.autoDraw = true;&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;left&quot;, instr_keys)) {&amp;#10;                for (var swatch_index, _pj_c = 0, _pj_a = util.range(color_scale_1.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    swatch_index = _pj_a[_pj_c];&amp;#10;                    swatches[swatch_index].setAutoDraw(false);&amp;#10;                }&amp;#10;                left_chest.setAutoDraw(false);&amp;#10;                left_shard.setAutoDraw(false);&amp;#10;                left_shard_6.setAutoDraw(false);&amp;#10;                left_shard_7.setAutoDraw(false);&amp;#10;                left_shard_8.setAutoDraw(false);&amp;#10;                left_shard_9.setAutoDraw(false);&amp;#10;                left_shard_10.setAutoDraw(false);&amp;#10;                right_chest.setAutoDraw(false);&amp;#10;                right_shard.setAutoDraw(false);&amp;#10;                right_shard_6.setAutoDraw(false);&amp;#10;                right_shard_7.setAutoDraw(false);&amp;#10;                right_shard_8.setAutoDraw(false);&amp;#10;                right_shard_9.setAutoDraw(false);&amp;#10;                right_shard_10.setAutoDraw(false);&amp;#10;                social_image.setAutoDraw(false);&amp;#10;                food_image.setAutoDraw(false);&amp;#10;                drug_image.setAutoDraw(false);&amp;#10;                instr_keyboard.clearEvents();&amp;#10;                curr_instr -= 1;&amp;#10;                instr_disp_txt.text = instr_strs[curr_instr];&amp;#10;                if ((curr_instr === 0)) {&amp;#10;                    instr_back_txt.text = &quot;\nPress RIGHT ARROW to continue.&quot;;&amp;#10;                } else {&amp;#10;                    instr_back_txt.text = &quot;Press LEFT ARROW to go back.\nPress RIGHT ARROW to continue.&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="instr_back_txt.autoDraw = false;&amp;#10;instr_disp_txt.autoDraw = false;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="instr_back_txt.autoDraw = False&amp;#10;instr_disp_txt.autoDraw = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="instr_dict_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="instr_2_resp">
        <Param val="'left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="instr_2_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="learn_feedback_foods">
      <CodeComponent name="undraw_chests_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="left_chest.setAutoDraw(false);&amp;#10;right_chest.setAutoDraw(false);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="left_chest.setAutoDraw(False)&amp;#10;right_chest.setAutoDraw(False)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="undraw_chests_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="draw_outline_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="out_txt_right = ''&amp;#10;out_txt_left = ''&amp;#10;&amp;#10;feedback_left = visual.TextStim(win=win, name='feedback_left',&amp;#10;    text='',&amp;#10;    font='Arial',&amp;#10;    pos=(-.375, .3), height=0.05, wrapWidth=None, ori=0.0, &amp;#10;    color='white', colorSpace='rgb', opacity=None, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-100.0);&amp;#10;feedback_right = visual.TextStim(win=win, name='feedback_right',&amp;#10;    text='',&amp;#10;    font='Arial',&amp;#10;    pos=(.375, .3), height=0.05, wrapWidth=None, ori=0.0, &amp;#10;    color='white', colorSpace='rgb', opacity=None, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-100.0);" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="out_txt_right = &quot;&quot;;&amp;#10;out_txt_left = &quot;&quot;;&amp;#10;feedback_left = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;feedback_left&quot;, &quot;text&quot;: &quot;&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;pos&quot;: [(- 0.375), 0.3], &quot;height&quot;: 0.05, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0.0, &quot;color&quot;: &quot;white&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: (- 100.0)});&amp;#10;feedback_right = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;feedback_right&quot;, &quot;text&quot;: &quot;&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;pos&quot;: [0.375, 0.3], &quot;height&quot;: 0.05, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0.0, &quot;color&quot;: &quot;white&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: (- 100.0)});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#if this_trial_choice == 'left': #left&amp;#10;   # outline_shape.setPos((-.375, 0), log=True)&amp;#10;   # outline_shape.setAutoDraw(True)&amp;#10;   # feedback_left.setText(left_shard_sum)&amp;#10;   # feedback_left.autoDraw = True&amp;#10;   # feedback_right.setText(right_shard_sum)&amp;#10;   # feedback_right.autoDraw = True&amp;#10;#elif this_trial_choice == 'right': #right&amp;#10;   # outline_shape.setPos((.375, 0), log=True)&amp;#10;   # outline_shape.setAutoDraw(True)&amp;#10;   # feedback_left.setText(left_shard_sum)&amp;#10;   # feedback_left.autoDraw = True&amp;#10;   # feedback_right.setText(right_shard_sum)&amp;#10;   # feedback_right.autoDraw = True" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="outline_shape.setAutoDraw(false);&amp;#10;feedback_right.setText(&quot;&quot;);&amp;#10;feedback_left.setText(&quot;&quot;);&amp;#10;feedback_right.autoDraw = false;&amp;#10;feedback_left.autoDraw = false;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="outline_shape.setAutoDraw(False)&amp;#10;&amp;#10;feedback_right.setText('')&amp;#10;feedback_left.setText('')&amp;#10;feedback_right.autoDraw = False&amp;#10;feedback_left.autoDraw = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="draw_outline_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="left_shard_11">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$tmp_left_food_11" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_11" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[0]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_12">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$tmp_left_food_12" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_12" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[1]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_13">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$tmp_left_food_13" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_13" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[2]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_14">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$tmp_left_food_14" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_14" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[3]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_15">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$tmp_left_food_15" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_15" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[4]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_16">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$tmp_left_food_16" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_16" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[5]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_11">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$tmp_right_food_11" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_11" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[0]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_12">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$tmp_right_food_12" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_12" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[1]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_13">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$tmp_right_food_13" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_13" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[2]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_14">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$tmp_right_food_14" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_14" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[3]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_15">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$tmp_right_food_15" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_15" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[4]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_16">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$tmp_right_food_16" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_16" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[5]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="learn_feedback_points">
      <CodeComponent name="undraw_chests_4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="left_chest.setAutoDraw(false);&amp;#10;right_chest.setAutoDraw(false);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="left_chest.setAutoDraw(False)&amp;#10;right_chest.setAutoDraw(False)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="undraw_chests_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="draw_outline">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="out_txt_right = ''&amp;#10;out_txt_left = ''&amp;#10;&amp;#10;feedback_left = visual.TextStim(win=win, name='feedback_left',&amp;#10;    text='',&amp;#10;    font='Arial',&amp;#10;    pos=(-.375, .3), height=0.05, wrapWidth=None, ori=0.0, &amp;#10;    color='white', colorSpace='rgb', opacity=None, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-100.0);&amp;#10;feedback_right = visual.TextStim(win=win, name='feedback_right',&amp;#10;    text='',&amp;#10;    font='Arial',&amp;#10;    pos=(.375, .3), height=0.05, wrapWidth=None, ori=0.0, &amp;#10;    color='white', colorSpace='rgb', opacity=None, &amp;#10;    languageStyle='LTR',&amp;#10;    depth=-100.0);" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="out_txt_right = &quot;&quot;;&amp;#10;out_txt_left = &quot;&quot;;&amp;#10;feedback_left = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;feedback_left&quot;, &quot;text&quot;: &quot;&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;pos&quot;: [(- 0.375), 0.3], &quot;height&quot;: 0.05, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0.0, &quot;color&quot;: &quot;white&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: (- 100.0)});&amp;#10;feedback_right = new visual.TextStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;feedback_right&quot;, &quot;text&quot;: &quot;&quot;, &quot;font&quot;: &quot;Arial&quot;, &quot;pos&quot;: [0.375, 0.3], &quot;height&quot;: 0.05, &quot;wrapWidth&quot;: null, &quot;ori&quot;: 0.0, &quot;color&quot;: &quot;white&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;languageStyle&quot;: &quot;LTR&quot;, &quot;depth&quot;: (- 100.0)});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((this_trial_choice === &quot;left&quot;)) {&amp;#10;    outline_shape.setPos([(- 0.375), 0], {&quot;log&quot;: true});&amp;#10;    outline_shape.setAutoDraw(true);&amp;#10;    feedback_left.setText(left_shard_sum);&amp;#10;    feedback_left.autoDraw = true;&amp;#10;    feedback_right.setText(right_shard_sum);&amp;#10;    feedback_right.autoDraw = true;&amp;#10;} else {&amp;#10;    if ((this_trial_choice === &quot;right&quot;)) {&amp;#10;        outline_shape.setPos([0.375, 0], {&quot;log&quot;: true});&amp;#10;        outline_shape.setAutoDraw(true);&amp;#10;        feedback_left.setText(left_shard_sum);&amp;#10;        feedback_left.autoDraw = true;&amp;#10;        feedback_right.setText(right_shard_sum);&amp;#10;        feedback_right.autoDraw = true;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if this_trial_choice == 'left': #left&amp;#10;    outline_shape.setPos((-.375, 0), log=True)&amp;#10;    outline_shape.setAutoDraw(True)&amp;#10;    feedback_left.setText(left_shard_sum)&amp;#10;    feedback_left.autoDraw = True&amp;#10;    feedback_right.setText(right_shard_sum)&amp;#10;    feedback_right.autoDraw = True&amp;#10;elif this_trial_choice == 'right': #right&amp;#10;    outline_shape.setPos((.375, 0), log=True)&amp;#10;    outline_shape.setAutoDraw(True)&amp;#10;    feedback_left.setText(left_shard_sum)&amp;#10;    feedback_left.autoDraw = True&amp;#10;    feedback_right.setText(right_shard_sum)&amp;#10;    feedback_right.autoDraw = True" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="outline_shape.setAutoDraw(false);&amp;#10;feedback_right.setText(&quot;&quot;);&amp;#10;feedback_left.setText(&quot;&quot;);&amp;#10;feedback_right.autoDraw = false;&amp;#10;feedback_left.autoDraw = false;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="outline_shape.setAutoDraw(False)&amp;#10;&amp;#10;feedback_right.setText('')&amp;#10;feedback_left.setText('')&amp;#10;feedback_right.autoDraw = False&amp;#10;feedback_left.autoDraw = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="draw_outline" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="left_shard_23">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[0]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_23" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[0]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_24">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[1]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_24" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[1]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_25">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[2]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_25" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[2]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_26">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[3]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_26" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[3]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_27">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[4]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_27" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[4]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_28">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[5]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_28" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[5]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_23">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[0]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_23" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[0]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_24">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[1]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_24" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[1]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_25">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[2]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_25" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[2]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_26">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[3]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_26" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[3]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_27">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[4]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_27" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[4]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_28">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[5]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_28" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[5]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
    <Routine name="learn_food">
      <CodeComponent name="draw_chests_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="left_chest = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name='left_chest', &amp;#10;    image='stimuli/chest.png', mask=None, anchor='center',&amp;#10;    ori=0.0, pos=(-.375, 0), size=(1, 1),&amp;#10;    color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;    flipHoriz=False, flipVert=False,&amp;#10;    texRes=128.0, interpolate=False, depth=-1.0)&amp;#10;right_chest = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name='right_chest', &amp;#10;    image='stimuli/chest.png', mask=None, anchor='center',&amp;#10;    ori=0.0, pos=(.375, 0), size=(1, 1),&amp;#10;    color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;    flipHoriz=True, flipVert=False,&amp;#10;    texRes=128.0, interpolate=False, depth=-2.0)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="left_chest = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;left_chest&quot;, &quot;image&quot;: &quot;stimuli/chest.png&quot;, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [(- 0.375), 0], &quot;size&quot;: [1, 1], &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: false, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: false, &quot;depth&quot;: (- 1.0)});&amp;#10;right_chest = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;right_chest&quot;, &quot;image&quot;: &quot;stimuli/chest.png&quot;, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [0.375, 0], &quot;size&quot;: [1, 1], &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: true, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: false, &quot;depth&quot;: (- 2.0)});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="left_chest.setAutoDraw(true);&amp;#10;right_chest.setAutoDraw(true);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="left_chest.setAutoDraw(True)&amp;#10;right_chest.setAutoDraw(True)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="draw_chests_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="fill_chests_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="let chest_order&amp;#10;let left_shard_shapes&amp;#10;let right_shard_shapes" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="chest_order = [&quot;Box1&quot;, &quot;Box2&quot;];&amp;#10;util.shuffle(chest_order);&amp;#10;&amp;#10;left_shard_shapes = [1,1,1,1,1,1];&amp;#10;right_shard_shapes = [1,1,1,1,1,1];" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="chest_order = np.random.permutation(['Box1','Box2'])&amp;#10;&amp;#10;left_shard_shapes = [1,1,1,1,1,1]&amp;#10;right_shard_shapes = [1,1,1,1,1,1]" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="fill_chests_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="set_shards_4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="function reverse_value(num) {&amp;#10;    if ((num === 1)) {&amp;#10;        return 9;&amp;#10;    } else {&amp;#10;        if ((num === 2)) {&amp;#10;            return 8;&amp;#10;        } else {&amp;#10;            if ((num === 3)) {&amp;#10;                return 7;&amp;#10;            } else {&amp;#10;                if ((num === 4)) {&amp;#10;                    return 6;&amp;#10;                } else {&amp;#10;                    if ((num === 5)) {&amp;#10;                        return 5;&amp;#10;                    } else {&amp;#10;                        if ((num === 6)) {&amp;#10;                            return 4;&amp;#10;                        } else {&amp;#10;                            if ((num === 7)) {&amp;#10;                                return 3;&amp;#10;                            } else {&amp;#10;                                if ((num === 8)) {&amp;#10;                                    return 2;&amp;#10;                                } else {&amp;#10;                                    if ((num === 9)) {&amp;#10;                                        return 1;&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;console.log(&quot;counter_balance&quot;, counter_balance);&amp;#10;console.log(&quot;chest_order&quot;, chest_order);&amp;#10;console.log(&quot;left_shard_shapes&quot;, left_shard_shapes);&amp;#10;console.log(&quot;right_shard_shapes&quot;, right_shard_shapes);&amp;#10;left_shard_colors = [];&amp;#10;right_shard_colors = [];&amp;#10;if ((chest_order[0] === &quot;Box1&quot;)) {&amp;#10;    console.log(&quot;box1&quot;);&amp;#10;    if ((counter_balance === &quot;1&quot;)) {&amp;#10;        console.log(&quot;cb1&quot;);&amp;#10;        left_shard_sum = Box1_Sum.toString();&amp;#10;        right_shard_sum = Box2_Sum.toString();&amp;#10;        left_shard_colors = [Box1_val1, Box1_val2, Box1_val3, Box1_val4, Box1_val5, Box1_val6];&amp;#10;        right_shard_colors = [Box2_val1, Box2_val2, Box2_val3, Box2_val4, Box2_val5, Box2_val6];&amp;#10;    } else {&amp;#10;        if ((counter_balance === &quot;2&quot;)) {&amp;#10;            console.log(&quot;cb2&quot;);&amp;#10;            left_shard_sum = Box1_Sum.toString();&amp;#10;            right_shard_sum = Box2_Sum.toString();&amp;#10;            left_shard_colors = [reverse_value(Box1_val1), reverse_value(Box1_val2), reverse_value(Box1_val3), reverse_value(Box1_val4), reverse_value(Box1_val5), reverse_value(Box1_val6)];&amp;#10;            right_shard_colors = [reverse_value(Box2_val1), reverse_value(Box2_val2), reverse_value(Box2_val3), reverse_value(Box2_val4), reverse_value(Box2_val5), reverse_value(Box2_val6)];&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((chest_order[0] === &quot;Box2&quot;)) {&amp;#10;        console.log(&quot;box2&quot;);&amp;#10;        if ((counter_balance === &quot;1&quot;)) {&amp;#10;            console.log(&quot;cb1&quot;);&amp;#10;            left_shard_sum = Box2_Sum.toString();&amp;#10;            right_shard_sum = Box1_Sum.toString();&amp;#10;            left_shard_colors = [Box2_val1, Box2_val2, Box2_val3, Box2_val4, Box2_val5, Box2_val6];&amp;#10;            right_shard_colors = [Box1_val1, Box1_val2, Box1_val3, Box1_val4, Box1_val5, Box1_val6];&amp;#10;        } else {&amp;#10;            if ((counter_balance === &quot;2&quot;)) {&amp;#10;                console.log(&quot;cb2&quot;);&amp;#10;                left_shard_sum = Box2_Sum.toString();&amp;#10;                right_shard_sum = Box1_Sum.toString();&amp;#10;                left_shard_colors = [reverse_value(Box2_val1), reverse_value(Box2_val2), reverse_value(Box2_val3), reverse_value(Box2_val4), reverse_value(Box2_val5), reverse_value(Box2_val6)];&amp;#10;                right_shard_colors = [reverse_value(Box1_val1), reverse_value(Box1_val2), reverse_value(Box1_val3), reverse_value(Box1_val4), reverse_value(Box1_val5), reverse_value(Box1_val6)];&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;console.log(left_shard_colors, &quot;left_shard_colors&quot;);&amp;#10;console.log(right_shard_colors, &quot;right_shard_colors&quot;);&amp;#10;left_shards = [];&amp;#10;right_shards = [];&amp;#10;left_foods = [];&amp;#10;right_foods = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(6), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    if ((left_shard_shapes[i] &gt;= 10)) {&amp;#10;        left_shards.push(((((((&quot;stimuli/&quot; + color_2) + &quot;/shard-&quot;) + left_shard_shapes[i].toString()) + &quot;_color-&quot;) + left_shard_colors[i].toString()) + &quot;.png&quot;));&amp;#10;    } else {&amp;#10;        left_shards.push(((((((&quot;stimuli/&quot; + color_2) + &quot;/shard-0&quot;) + left_shard_shapes[i].toString()) + &quot;_color-&quot;) + left_shard_colors[i].toString()) + &quot;.png&quot;));&amp;#10;    }&amp;#10;    if ((right_shard_shapes[i] &gt;= 10)) {&amp;#10;        right_shards.push(((((((&quot;stimuli/&quot; + color_2) + &quot;/shard-&quot;) + right_shard_shapes[i].toString()) + &quot;_color-&quot;) + right_shard_colors[i].toString()) + &quot;.png&quot;));&amp;#10;    } else {&amp;#10;        right_shards.push(((((((&quot;stimuli/&quot; + color_2) + &quot;/shard-0&quot;) + right_shard_shapes[i].toString()) + &quot;_color-&quot;) + right_shard_colors[i].toString()) + &quot;.png&quot;));&amp;#10;    }&amp;#10;    for (var obj, _pj_f = 0, _pj_d = foodDF, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;        obj = _pj_d[_pj_f];&amp;#10;        if ((obj.val === left_shard_colors[i])) {&amp;#10;            left_foods.push(obj.image);&amp;#10;        }&amp;#10;        if ((obj.val === right_shard_colors[i])) {&amp;#10;            right_foods.push(obj.image);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((Number.parseFloat(left_shard_sum) &gt; Number.parseFloat(right_shard_sum))) {&amp;#10;    better_option = &quot;left&quot;;&amp;#10;} else {&amp;#10;    if ((Number.parseFloat(left_shard_sum) &lt; Number.parseFloat(right_shard_sum))) {&amp;#10;        better_option = &quot;right&quot;;&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;better_option&quot;, better_option);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="def reverse_value(num):&amp;#10;    if num == 1:&amp;#10;        return 9&amp;#10;    elif num == 2:&amp;#10;        return 8&amp;#10;    elif num == 3:&amp;#10;        return 7&amp;#10;    elif num == 4:&amp;#10;        return 6&amp;#10;    elif num == 5:&amp;#10;        return 5&amp;#10;    elif num == 6:&amp;#10;        return 4&amp;#10;    elif num == 7:&amp;#10;        return 3&amp;#10;    elif num == 8:&amp;#10;        return 2&amp;#10;    elif num == 9:&amp;#10;        return 1&amp;#10;        &amp;#10;print('counter_balance', counter_balance)&amp;#10;print('chest_order', chest_order)&amp;#10;print('left_shard_shapes', left_shard_shapes)&amp;#10;print('right_shard_shapes', right_shard_shapes)&amp;#10;&amp;#10;left_shard_colors = []&amp;#10;right_shard_colors = []&amp;#10;if chest_order[0] == 'Box1':&amp;#10;    print('box1')&amp;#10;    if counter_balance == '1':&amp;#10;        print('cb1')&amp;#10;        left_shard_sum = str(Box1_Sum)&amp;#10;        right_shard_sum = str(Box2_Sum)&amp;#10;        &amp;#10;        left_shard_colors = [Box1_val1,Box1_val2,Box1_val3,&amp;#10;                             Box1_val4,Box1_val5,Box1_val6]&amp;#10;        right_shard_colors = [Box2_val1,Box2_val2,Box2_val3,&amp;#10;                              Box2_val4,Box2_val5,Box2_val6]&amp;#10;&amp;#10;    elif counter_balance == '2':&amp;#10;        print('cb2')&amp;#10;        left_shard_sum = str(Box1_Sum)&amp;#10;        right_shard_sum = str(Box2_Sum)&amp;#10;        &amp;#10;        left_shard_colors = [reverse_value(Box1_val1),reverse_value(Box1_val2),reverse_value(Box1_val3),&amp;#10;                             reverse_value(Box1_val4),reverse_value(Box1_val5),reverse_value(Box1_val6)]&amp;#10;        right_shard_colors = [reverse_value(Box2_val1),reverse_value(Box2_val2),reverse_value(Box2_val3),&amp;#10;                              reverse_value(Box2_val4),reverse_value(Box2_val5),reverse_value(Box2_val6)]&amp;#10;    &amp;#10;elif chest_order[0] == 'Box2':&amp;#10;    print('box2')&amp;#10;    if counter_balance == '1':&amp;#10;        print('cb1')&amp;#10;        left_shard_sum = str(Box2_Sum)&amp;#10;        right_shard_sum = str(Box1_Sum)&amp;#10;        left_shard_colors = [Box2_val1,Box2_val2,Box2_val3,&amp;#10;                              Box2_val4,Box2_val5,Box2_val6]&amp;#10;        right_shard_colors = [Box1_val1,Box1_val2,Box1_val3,&amp;#10;                              Box1_val4,Box1_val5,Box1_val6]&amp;#10;&amp;#10;    elif counter_balance == '2':&amp;#10;        print('cb2')&amp;#10;        left_shard_sum = str(Box2_Sum)&amp;#10;        right_shard_sum = str(Box1_Sum)&amp;#10;        &amp;#10;        left_shard_colors = [reverse_value(Box2_val1),reverse_value(Box2_val2),reverse_value(Box2_val3),&amp;#10;                              reverse_value(Box2_val4),reverse_value(Box2_val5),reverse_value(Box2_val6)]&amp;#10;        right_shard_colors = [reverse_value(Box1_val1),reverse_value(Box1_val2),reverse_value(Box1_val3),&amp;#10;                             reverse_value(Box1_val4),reverse_value(Box1_val5),reverse_value(Box1_val6)]&amp;#10;&amp;#10;print(left_shard_colors, 'left_shard_colors')&amp;#10;print(right_shard_colors, 'right_shard_colors')&amp;#10;&amp;#10;left_shards = []&amp;#10;right_shards = []&amp;#10;left_foods = []&amp;#10;right_foods = []&amp;#10;for i in range(6):&amp;#10;    ## THIS PART CONVERTS TO JS USING [].PUSH&amp;#10;    if left_shard_shapes[i] &gt;= 10:&amp;#10;        left_shards.append('stimuli/'+color_2+'/shard-' + str(left_shard_shapes[i]) + '_color-' + str(left_shard_colors[i]) + '.png')&amp;#10;    else:&amp;#10;        left_shards.append('stimuli/'+color_2+'/shard-0' + str(left_shard_shapes[i]) + '_color-' + str(left_shard_colors[i]) + '.png')&amp;#10;    &amp;#10;    ## THIS PART CONVERTS TO JS USING [].PUSH&amp;#10;    if right_shard_shapes[i] &gt;= 10:&amp;#10;        right_shards.append('stimuli/'+color_2+'/shard-' + str(right_shard_shapes[i]) + '_color-' + str(right_shard_colors[i]) + '.png')&amp;#10;    else:&amp;#10;        right_shards.append('stimuli/'+color_2+'/shard-0' + str(right_shard_shapes[i]) + '_color-' + str(right_shard_colors[i]) + '.png')&amp;#10;&amp;#10;    ## ADD FOODS&amp;#10;    for obj in foodDF:&amp;#10;        if obj.val == left_shard_colors[i]:&amp;#10;         #   print(&quot;Left food&quot;, str(i), obj.image)&amp;#10;            left_foods.append(obj.image)&amp;#10;        if obj.val == right_shard_colors[i]:&amp;#10;            right_foods.append(obj.image)&amp;#10;         #   print(&quot;Right food&quot;, str(i), obj.image)&amp;#10;&amp;#10;        &amp;#10;## determine better option&amp;#10;if float(left_shard_sum) &gt; float(right_shard_sum):&amp;#10;    better_option = 'left'&amp;#10;elif float(left_shard_sum) &lt; float(right_shard_sum):&amp;#10;    better_option = 'right'&amp;#10;&amp;#10;thisExp.addData('better_option', better_option)&amp;#10;&amp;#10;#print('chest_order', chest_order)&amp;#10;#print('first left food', left_foods[0])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_shards_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="outline_settings_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="tmp_left_food_11 = ''&amp;#10;tmp_left_food_12 = ''&amp;#10;tmp_left_food_13 = ''&amp;#10;tmp_left_food_14 = ''&amp;#10;tmp_left_food_15 = ''&amp;#10;tmp_left_food_16 = ''&amp;#10;&amp;#10;tmp_right_food_11 = ''&amp;#10;tmp_right_food_12 = ''&amp;#10;tmp_right_food_13 = ''&amp;#10;tmp_right_food_14 = ''&amp;#10;tmp_right_food_15 = ''&amp;#10;tmp_right_food_16 = ''" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="tmp_left_food_11 = &quot;&quot;;&amp;#10;tmp_left_food_12 = &quot;&quot;;&amp;#10;tmp_left_food_13 = &quot;&quot;;&amp;#10;tmp_left_food_14 = &quot;&quot;;&amp;#10;tmp_left_food_15 = &quot;&quot;;&amp;#10;tmp_left_food_16 = &quot;&quot;;&amp;#10;tmp_right_food_11 = &quot;&quot;;&amp;#10;tmp_right_food_12 = &quot;&quot;;&amp;#10;tmp_right_food_13 = &quot;&quot;;&amp;#10;tmp_right_food_14 = &quot;&quot;;&amp;#10;tmp_right_food_15 = &quot;&quot;;&amp;#10;tmp_right_food_16 = &quot;&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="console.log(chest_order);&amp;#10;tmp_left_food_11 = &quot;&quot;;&amp;#10;tmp_left_food_12 = &quot;&quot;;&amp;#10;tmp_left_food_13 = &quot;&quot;;&amp;#10;tmp_left_food_14 = &quot;&quot;;&amp;#10;tmp_left_food_15 = &quot;&quot;;&amp;#10;tmp_left_food_16 = &quot;&quot;;&amp;#10;tmp_right_food_11 = &quot;&quot;;&amp;#10;tmp_right_food_12 = &quot;&quot;;&amp;#10;tmp_right_food_13 = &quot;&quot;;&amp;#10;tmp_right_food_14 = &quot;&quot;;&amp;#10;tmp_right_food_15 = &quot;&quot;;&amp;#10;tmp_right_food_16 = &quot;&quot;;&amp;#10;if ((choice_resp_3.keys === &quot;f&quot;)) {&amp;#10;    made_choice = 1;&amp;#10;    this_trial_choice = &quot;left&quot;;&amp;#10;    this_trial_box_choice = chest_order[0];&amp;#10;    if ((better_option === &quot;left&quot;)) {&amp;#10;        correct = 1;&amp;#10;    } else {&amp;#10;        correct = 0;&amp;#10;    }&amp;#10;    tmp_left_food_11 = left_foods[0].image;&amp;#10;    tmp_left_food_12 = left_foods[1].image;&amp;#10;    tmp_left_food_13 = left_foods[2].image;&amp;#10;    tmp_left_food_14 = left_foods[3].image;&amp;#10;    tmp_left_food_15 = left_foods[4].image;&amp;#10;    tmp_left_food_16 = left_foods[5].image;&amp;#10;    tmp_right_food_11 = right_shards[0];&amp;#10;    tmp_right_food_12 = right_shards[1];&amp;#10;    tmp_right_food_13 = right_shards[2];&amp;#10;    tmp_right_food_14 = right_shards[3];&amp;#10;    tmp_right_food_15 = right_shards[4];&amp;#10;    tmp_right_food_16 = right_shards[5];&amp;#10;} else {&amp;#10;    if ((choice_resp_3.keys === &quot;j&quot;)) {&amp;#10;        made_choice = 1;&amp;#10;        this_trial_choice = &quot;right&quot;;&amp;#10;        this_trial_box_choice = chest_order[1];&amp;#10;        if ((better_option === &quot;right&quot;)) {&amp;#10;            correct = 1;&amp;#10;        } else {&amp;#10;            correct = 0;&amp;#10;        }&amp;#10;        tmp_left_food_11 = left_shards[0];&amp;#10;        tmp_left_food_12 = left_shards[1];&amp;#10;        tmp_left_food_13 = left_shards[2];&amp;#10;        tmp_left_food_14 = left_shards[3];&amp;#10;        tmp_left_food_15 = left_shards[4];&amp;#10;        tmp_left_food_16 = left_shards[5];&amp;#10;        tmp_right_food_11 = right_foods[0].image;&amp;#10;        tmp_right_food_12 = right_foods[1].image;&amp;#10;        tmp_right_food_13 = right_foods[2].image;&amp;#10;        tmp_right_food_14 = right_foods[3].image;&amp;#10;        tmp_right_food_15 = right_foods[4].image;&amp;#10;        tmp_right_food_16 = right_foods[5].image;&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;agent_choice&quot;, this_trial_choice);&amp;#10;psychoJS.experiment.addData(&quot;agent_box_choice&quot;, this_trial_box_choice);&amp;#10;psychoJS.experiment.addData(&quot;correct_choice&quot;, correct);&amp;#10;correct_choice_count.push(correct);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="print(chest_order)&amp;#10;tmp_left_food_11 = ''&amp;#10;tmp_left_food_12 = ''&amp;#10;tmp_left_food_13 = ''&amp;#10;tmp_left_food_14 = ''&amp;#10;tmp_left_food_15 = ''&amp;#10;tmp_left_food_16 = ''&amp;#10;&amp;#10;tmp_right_food_11 = ''&amp;#10;tmp_right_food_12 = ''&amp;#10;tmp_right_food_13 = ''&amp;#10;tmp_right_food_14 = ''&amp;#10;tmp_right_food_15 = ''&amp;#10;tmp_right_food_16 = ''&amp;#10;&amp;#10;if choice_resp_3.keys == 'f': #left&amp;#10;    made_choice = 1&amp;#10;    this_trial_choice = 'left'&amp;#10;    this_trial_box_choice = chest_order[0]&amp;#10;    if better_option == 'left':&amp;#10;        correct = 1&amp;#10;    else:&amp;#10;        correct = 0&amp;#10;    &amp;#10;    tmp_left_food_11 = left_foods[0].image&amp;#10;    tmp_left_food_12 = left_foods[1].image&amp;#10;    tmp_left_food_13 = left_foods[2].image&amp;#10;    tmp_left_food_14 = left_foods[3].image&amp;#10;    tmp_left_food_15 = left_foods[4].image&amp;#10;    tmp_left_food_16 = left_foods[5].image&amp;#10;    &amp;#10;    tmp_right_food_11 = right_shards[0]&amp;#10;    tmp_right_food_12 = right_shards[1]&amp;#10;    tmp_right_food_13 = right_shards[2]&amp;#10;    tmp_right_food_14 = right_shards[3]&amp;#10;    tmp_right_food_15 = right_shards[4]&amp;#10;    tmp_right_food_16 = right_shards[5]&amp;#10;        &amp;#10;elif choice_resp_3.keys == 'j': #right&amp;#10;    made_choice = 1&amp;#10;    this_trial_choice = 'right'&amp;#10;    this_trial_box_choice = chest_order[1]&amp;#10;    if better_option == 'right':&amp;#10;        correct = 1&amp;#10;    else:&amp;#10;        correct = 0&amp;#10;    tmp_left_food_11 = left_shards[0]&amp;#10;    tmp_left_food_12 = left_shards[1]&amp;#10;    tmp_left_food_13 = left_shards[2]&amp;#10;    tmp_left_food_14 = left_shards[3]&amp;#10;    tmp_left_food_15 = left_shards[4]&amp;#10;    tmp_left_food_16 = left_shards[5]&amp;#10;    &amp;#10;    tmp_right_food_11 = right_foods[0].image&amp;#10;    tmp_right_food_12 = right_foods[1].image&amp;#10;    tmp_right_food_13 = right_foods[2].image&amp;#10;    tmp_right_food_14 = right_foods[3].image&amp;#10;    tmp_right_food_15 = right_foods[4].image&amp;#10;    tmp_right_food_16 = right_foods[5].image&amp;#10;&amp;#10;thisExp.addData('agent_choice', this_trial_choice)&amp;#10;thisExp.addData('agent_box_choice', this_trial_box_choice)&amp;#10;thisExp.addData('correct_choice', correct)&amp;#10;correct_choice_count.append(correct)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="outline_settings_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="left_shard_29">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[0]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_29" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[0]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_30">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[1]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_30" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[1]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_31">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[2]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_31" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[2]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_32">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[3]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_32" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[3]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_33">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[4]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_33" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[4]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="left_shard_34">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$left_shards[5]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="left_shard_34" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$left_shards_pos[5]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_29">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[0]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_29" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[0]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_30">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[1]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_30" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[1]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_31">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[2]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_31" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[2]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_32">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[3]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_32" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[3]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_33">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[4]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_33" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[4]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="right_shard_34">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$right_shards[5]" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="right_shard_34" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="$right_shards_pos[5]" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$all_shards_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="choice_resp_3">
        <Param val="'f','j'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="choice_resp_3" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="def_randchoice_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import random&amp;#10;&amp;#10;def random_choices(k):&amp;#10;    return random.choices(k, k=6)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="def_randchoice_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="set_shards_copy_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="let chest_order = [&quot;Box1&quot;, &quot;Box2&quot;];&amp;#10;util.shuffle(chest_order);&amp;#10;&amp;#10;let left_shard_shapes = Array.from({ length: 6 }, () =&gt;&amp;#10;  Math.floor(Math.random() * 13) + 1&amp;#10;);&amp;#10;let right_shard_shapes = Array.from({ length: 6 }, () =&gt;&amp;#10;  Math.floor(Math.random() * 13) + 1&amp;#10;);&amp;#10;&amp;#10;let left_shard_sum, right_shard_sum, left_shard_colors, right_shard_colors;&amp;#10;if (chest_order[0] === &quot;Box1&quot;) {&amp;#10;    if (counter_balance === &quot;1&quot;) {&amp;#10;        left_shard_sum = Box1_Sum.toString();&amp;#10;        right_shard_sum = Box2_Sum.toString();&amp;#10;        left_shard_colors = [Box1_val1, Box1_val2, Box1_val3, Box1_val4, Box1_val5, Box1_val6];&amp;#10;        right_shard_colors = [Box2_val1, Box2_val2, Box2_val3, Box2_val4, Box2_val5, Box2_val6];&amp;#10;    } else {&amp;#10;        if (counter_balance === &quot;2&quot;) {&amp;#10;            left_shard_sum = Box1_Sum.toString();&amp;#10;            right_shard_sum = Box2_Sum.toString();&amp;#10;            left_shard_colors = [reverse_value(Box1_val1), reverse_value(Box1_val2), reverse_value(Box1_val3), reverse_value(Box1_val4), reverse_value(Box1_val5), reverse_value(Box1_val6)];&amp;#10;            right_shard_colors = [reverse_value(Box2_val1), reverse_value(Box2_val2), reverse_value(Box2_val3), reverse_value(Box2_val4), reverse_value(Box2_val5), reverse_value(Box2_val6)];&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if (chest_order[0] === &quot;Box2&quot;) {&amp;#10;        if (counter_balance === &quot;1&quot;) {&amp;#10;            left_shard_sum = Box2_Sum.toString();&amp;#10;            right_shard_sum = Box1_Sum.toString();&amp;#10;            left_shard_colors = [Box2_val1, Box2_val2, Box2_val3, Box2_val4, Box2_val5, Box2_val6];&amp;#10;            right_shard_colors = [Box1_val1, Box1_val2, Box1_val3, Box1_val4, Box1_val5, Box1_val6];&amp;#10;        } else {&amp;#10;            if (counter_balance === &quot;2&quot;) {&amp;#10;                left_shard_sum = Box2_Sum.toString();&amp;#10;                right_shard_sum = Box1_Sum.toString();&amp;#10;                left_shard_colors = [reverse_value(Box2_val1), reverse_value(Box2_val2), reverse_value(Box2_val3), reverse_value(Box2_val4), reverse_value(Box2_val5), reverse_value(Box2_val6)];&amp;#10;                right_shard_colors = [reverse_value(Box1_val1), reverse_value(Box1_val2), reverse_value(Box1_val3), reverse_value(Box1_val4), reverse_value(Box1_val5), reverse_value(Box1_val6)];&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;let left_shards = [];&amp;#10;let right_shards = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(6), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    let left_shape = left_shard_shapes[i];&amp;#10;    let left_color = left_shard_colors[i];&amp;#10;    left_shards.push(`stimuli/shard-${left_shape.toString().padStart(2, '0')}_color-${left_color}.png`);&amp;#10;&amp;#10;    let right_shape = right_shard_shapes[i];&amp;#10;    let right_color = right_shard_colors[i];&amp;#10;    right_shards.push(`stimuli/shard-${right_shape.toString().padStart(2, '0')}_color-${right_color}.png`);&amp;#10;}&amp;#10;&amp;#10;//for (let i = 0; i &lt; 6; i++) {&amp;#10;//    let left_shape = left_shard_shapes[i];&amp;#10;//    let left_color = left_shard_colors[i];&amp;#10;//    left_shards.push(`stimuli/shard-${left_shape.toString().padStart(2, '0')}_color-${left_color}.png`);&amp;#10;//&amp;#10;//    let right_shape = right_shard_shapes[i];&amp;#10;//    let right_color = right_shard_colors[i];&amp;#10;//    right_shards.push(`stimuli/shard-${right_shape.toString().padStart(2, '0')}_color-${right_color}.png`);&amp;#10;//}&amp;#10;&amp;#10;let better_option;&amp;#10;&amp;#10;const leftShardSum = parseFloat(left_shard_sum);&amp;#10;const rightShardSum = parseFloat(right_shard_sum);&amp;#10;&amp;#10;if (leftShardSum &gt; rightShardSum) {&amp;#10;  better_option = &quot;left&quot;;&amp;#10;} else if (leftShardSum &lt; rightShardSum) {&amp;#10;  better_option = &quot;right&quot;;&amp;#10;}&amp;#10;&amp;#10;psychoJS.experiment.addData(&quot;better_option&quot;, better_option);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#chest_order = np.random.permutation(['Box1','Box2'])&amp;#10;chest_order = ['Box1','Box2']&amp;#10;shuffle(chest_order)&amp;#10;&amp;#10;left_shard_shapes = np.random.choice([1,2,3,4,5,6,7,8,9,10,11,12,13], size=6, replace=True)&amp;#10;right_shard_shapes = np.random.choice([1,2,3,4,5,6,7,8,9,10,11,12,13], size=6, replace=True)&amp;#10;#left_shard_shapes = random.choices(range(1, 14), k=6)&amp;#10;#right_shard_shapes = random.choices(range(1, 14), k=6)&amp;#10;#left_shard_shapes = random_choices(range(1, 14))&amp;#10;#right_shard_shapes = random_choices(range(1, 14))&amp;#10;&amp;#10;if chest_order[0] == 'Box1':&amp;#10;    if counter_balance == '1':&amp;#10;        left_shard_sum = str(Box1_Sum)&amp;#10;        right_shard_sum = str(Box2_Sum)&amp;#10;        &amp;#10;        left_shard_colors = [Box1_val1,Box1_val2,Box1_val3,&amp;#10;                             Box1_val4,Box1_val5,Box1_val6]&amp;#10;        right_shard_colors = [Box2_val1,Box2_val2,Box2_val3,&amp;#10;                              Box2_val4,Box2_val5,Box2_val6]&amp;#10;&amp;#10;    elif counter_balance == '2':&amp;#10;        left_shard_sum = str(Box1_Sum)&amp;#10;        right_shard_sum = str(Box2_Sum)&amp;#10;        &amp;#10;        left_shard_colors = [reverse_value(Box1_val1),reverse_value(Box1_val2),reverse_value(Box1_val3),&amp;#10;                             reverse_value(Box1_val4),reverse_value(Box1_val5),reverse_value(Box1_val6)]&amp;#10;        right_shard_colors = [reverse_value(Box2_val1),reverse_value(Box2_val2),reverse_value(Box2_val3),&amp;#10;                              reverse_value(Box2_val4),reverse_value(Box2_val5),reverse_value(Box2_val6)]&amp;#10;        &amp;#10;    &amp;#10;elif chest_order[0] == 'Box2':&amp;#10;&amp;#10;    if counter_balance == '1':&amp;#10;        left_shard_sum = str(Box2_Sum)&amp;#10;        right_shard_sum = str(Box1_Sum)&amp;#10;        left_shard_colors = [Box2_val1,Box2_val2,Box2_val3,&amp;#10;                              Box2_val4,Box2_val5,Box2_val6]&amp;#10;        right_shard_colors = [Box1_val1,Box1_val2,Box1_val3,&amp;#10;                              Box1_val4,Box1_val5,Box1_val6]&amp;#10;&amp;#10;    elif counter_balance == '2':&amp;#10;        left_shard_sum = str(Box2_Sum)&amp;#10;        right_shard_sum = str(Box1_Sum)&amp;#10;        &amp;#10;        left_shard_colors = [reverse_value(Box2_val1),reverse_value(Box2_val2),reverse_value(Box2_val3),&amp;#10;                              reverse_value(Box2_val4),reverse_value(Box2_val5),reverse_value(Box2_val6)]&amp;#10;        right_shard_colors = [reverse_value(Box1_val1),reverse_value(Box1_val2),reverse_value(Box1_val3),&amp;#10;                             reverse_value(Box1_val4),reverse_value(Box1_val5),reverse_value(Box1_val6)]&amp;#10;&amp;#10;left_shards = []&amp;#10;right_shards = []&amp;#10;for i in range(6):&amp;#10;    left_shape = left_shard_shapes[i]&amp;#10;    left_color = left_shard_colors[i]&amp;#10;&amp;#10;    ## THIS PART CONVERTS TO JS USING [].PUSH&amp;#10;    left_shards.append(f'stimuli/shard-{left_shape:02d}_color-{left_color}.png')&amp;#10;    right_shape = right_shard_shapes[i]&amp;#10;    right_color = right_shard_colors[i]&amp;#10;&amp;#10;    ## THIS PART CONVERTS TO JS USING [].PUSH&amp;#10;    right_shards.append(f'stimuli/shard-{right_shape:02d}_color-{right_color}.png')&amp;#10;    &amp;#10;    #left_shards = [f'stimuli/shard-0{shape}_color-{color}.png' for shape, color in zip(left_shard_shapes, left_shard_colors)]&amp;#10;    #right_shards = [f'stimuli/shard-0{shape}_color-{color}.png' for shape, color in zip(right_shard_shapes, right_shard_colors)]&amp;#10;&amp;#10;## determine better option&amp;#10;if float(left_shard_sum) &gt; float(right_shard_sum):&amp;#10;    better_option = 'left'&amp;#10;elif float(left_shard_sum) &lt; float(right_shard_sum):&amp;#10;    better_option = 'right'&amp;#10;&amp;#10;thisExp.addData('better_option', better_option)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="set_shards_copy_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="practice_choice">
      <CodeComponent name="draw_chests_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="left_chest = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name='left_chest', &amp;#10;    image='stimuli/chest.png', mask=None, anchor='center',&amp;#10;    ori=0.0, pos=(-.375, 0), size=(1, 1),&amp;#10;    color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;    flipHoriz=False, flipVert=False,&amp;#10;    texRes=128.0, interpolate=False, depth=-1.0)&amp;#10;right_chest = visual.ImageStim(&amp;#10;    win=win,&amp;#10;    name='right_chest', &amp;#10;    image='stimuli/chest.png', mask=None, anchor='center',&amp;#10;    ori=0.0, pos=(.375, 0), size=(1, 1),&amp;#10;    color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;    flipHoriz=True, flipVert=False,&amp;#10;    texRes=128.0, interpolate=False, depth=-2.0)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="left_chest = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;left_chest&quot;, &quot;image&quot;: &quot;stimuli/chest.png&quot;, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [(- 0.375), 0], &quot;size&quot;: [1, 1], &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: false, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: false, &quot;depth&quot;: (- 1.0)});&amp;#10;right_chest = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;right_chest&quot;, &quot;image&quot;: &quot;stimuli/chest.png&quot;, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [0.375, 0], &quot;size&quot;: [1, 1], &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: true, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: false, &quot;depth&quot;: (- 2.0)});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="left_chest.setAutoDraw(true);&amp;#10;right_chest.setAutoDraw(true);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="left_chest.setAutoDraw(True)&amp;#10;right_chest.setAutoDraw(True)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="draw_chests_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="set_shards_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="function reverse_value(num) {&amp;#10;    if ((num === 1)) {&amp;#10;        return 9;&amp;#10;    } else {&amp;#10;        if ((num === 2)) {&amp;#10;            return 8;&amp;#10;        } else {&amp;#10;            if ((num === 3)) {&amp;#10;                return 7;&amp;#10;            } else {&amp;#10;                if ((num === 4)) {&amp;#10;                    return 6;&amp;#10;                } else {&amp;#10;                    if ((num === 5)) {&amp;#10;                        return 5;&amp;#10;                    } else {&amp;#10;                        if ((num === 6)) {&amp;#10;                            return 4;&amp;#10;                        } else {&amp;#10;                            if ((num === 7)) {&amp;#10;                                return 3;&amp;#10;                            } else {&amp;#10;                                if ((num === 8)) {&amp;#10;                                    return 2;&amp;#10;                                } else {&amp;#10;                                    if ((num === 9)) {&amp;#10;                                        return 1;&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;console.log(&quot;counter_balance&quot;, counter_balance);&amp;#10;console.log(&quot;chest_order&quot;, chest_order);&amp;#10;console.log(&quot;left_shard_shapes&quot;, left_shard_shapes);&amp;#10;console.log(&quot;right_shard_shapes&quot;, right_shard_shapes);&amp;#10;left_shard_colors = [];&amp;#10;right_shard_colors = [];&amp;#10;if ((chest_order[0] === &quot;Box1&quot;)) {&amp;#10;    console.log(&quot;box1&quot;);&amp;#10;    if ((counter_balance === &quot;1&quot;)) {&amp;#10;        console.log(&quot;cb1&quot;);&amp;#10;        left_shard_sum = Box1_Sum.toString();&amp;#10;        right_shard_sum = Box2_Sum.toString();&amp;#10;        left_shard_colors = [Box1_val1, Box1_val2, Box1_val3, Box1_val4, Box1_val5, Box1_val6];&amp;#10;        right_shard_colors = [Box2_val1, Box2_val2, Box2_val3, Box2_val4, Box2_val5, Box2_val6];&amp;#10;    } else {&amp;#10;        if ((counter_balance === &quot;2&quot;)) {&amp;#10;            console.log(&quot;cb2&quot;);&amp;#10;            left_shard_sum = Box1_Sum.toString();&amp;#10;            right_shard_sum = Box2_Sum.toString();&amp;#10;            left_shard_colors = [reverse_value(Box1_val1), reverse_value(Box1_val2), reverse_value(Box1_val3), reverse_value(Box1_val4), reverse_value(Box1_val5), reverse_value(Box1_val6)];&amp;#10;            right_shard_colors = [reverse_value(Box2_val1), reverse_value(Box2_val2), reverse_value(Box2_val3), reverse_value(Box2_val4), reverse_value(Box2_val5), reverse_value(Box2_val6)];&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((chest_order[0] === &quot;Box2&quot;)) {&amp;#10;        console.log(&quot;box2&quot;);&amp;#10;        if ((counter_balance === &quot;1&quot;)) {&amp;#10;            console.log(&quot;cb1&quot;);&amp;#10;            left_shard_sum = Box2_Sum.toString();&amp;#10;            right_shard_sum = Box1_Sum.toString();&amp;#10;            left_shard_colors = [Box2_val1, Box2_val2, Box2_val3, Box2_val4, Box2_val5, Box2_val6];&amp;#10;            right_shard_colors = [Box1_val1, Box1_val2, Box1_val3, Box1_val4, Box1_val5, Box1_val6];&amp;#10;        } else {&amp;#10;            if ((counter_balance === &quot;2&quot;)) {&amp;#10;                console.log(&quot;cb2&quot;);&amp;#10;                left_shard_sum = Box2_Sum.toString();&amp;#10;                right_shard_sum = Box1_Sum.toString();&amp;#10;                left_shard_colors = [reverse_value(Box2_val1), reverse_value(Box2_val2), reverse_value(Box2_val3), reverse_value(Box2_val4), reverse_value(Box2_val5), reverse_value(Box2_val6)];&amp;#10;                right_shard_colors = [reverse_value(Box1_val1), reverse_value(Box1_val2), reverse_value(Box1_val3), reverse_value(Box1_val4), reverse_value(Box1_val5), reverse_value(Box1_val6)];&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;console.log(left_shard_colors, &quot;left_shard_colors&quot;);&amp;#10;console.log(right_shard_colors, &quot;right_shard_colors&quot;);&amp;#10;left_shards = [];&amp;#10;right_shards = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(6), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    if ((left_shard_shapes[i] &gt;= 10)) {&amp;#10;        left_shards.push(((((((&quot;stimuli/&quot; + color_1) + &quot;/shard-&quot;) + left_shard_shapes[i].toString()) + &quot;_color-&quot;) + left_shard_colors[i].toString()) + &quot;.png&quot;));&amp;#10;    } else {&amp;#10;        left_shards.push(((((((&quot;stimuli/&quot; + color_1) + &quot;/shard-0&quot;) + left_shard_shapes[i].toString()) + &quot;_color-&quot;) + left_shard_colors[i].toString()) + &quot;.png&quot;));&amp;#10;    }&amp;#10;    if ((right_shard_shapes[i] &gt;= 10)) {&amp;#10;        right_shards.push(((((((&quot;stimuli/&quot; + color_1) + &quot;/shard-&quot;) + right_shard_shapes[i].toString()) + &quot;_color-&quot;) + right_shard_colors[i].toString()) + &quot;.png&quot;));&amp;#10;    } else {&amp;#10;        right_shards.push(((((((&quot;stimuli/&quot; + color_1) + &quot;/shard-0&quot;) + right_shard_shapes[i].toString()) + &quot;_color-&quot;) + right_shard_colors[i].toString()) + &quot;.png&quot;));&amp;#10;    }&amp;#10;}&amp;#10;if ((Number.parseFloat(left_shard_sum) &gt; Number.parseFloat(right_shard_sum))) {&amp;#10;    better_option = &quot;left&quot;;&amp;#10;} else {&amp;#10;    if ((Number.parseFloat(left_shard_sum) &lt; Number.parseFloat(right_shard_sum))) {&amp;#10;        better_option = &quot;right&quot;;&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;better_option&quot;, better_option);&amp;#10;console.log(&quot;chest_order&quot;, chest_order);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="def reverse_value(num):&amp;#10;    if num == 1:&amp;#10;        return 9&amp;#10;    elif num == 2:&amp;#10;        return 8&amp;#10;    elif num == 3:&amp;#10;        return 7&amp;#10;    elif num == 4:&amp;#10;        return 6&amp;#10;    elif num == 5:&amp;#10;        return 5&amp;#10;    elif num == 6:&amp;#10;        return 4&amp;#10;    elif num == 7:&amp;#10;        return 3&amp;#10;    elif num == 8:&amp;#10;        return 2&amp;#10;    elif num == 9:&amp;#10;        return 1&amp;#10;        &amp;#10;print('counter_balance', counter_balance)&amp;#10;print('chest_order', chest_order)&amp;#10;print('left_shard_shapes', left_shard_shapes)&amp;#10;print('right_shard_shapes', right_shard_shapes)&amp;#10;&amp;#10;left_shard_colors = []&amp;#10;right_shard_colors = []&amp;#10;if chest_order[0] == 'Box1':&amp;#10;    print('box1')&amp;#10;    if counter_balance == '1':&amp;#10;        print('cb1')&amp;#10;        left_shard_sum = str(Box1_Sum)&amp;#10;        right_shard_sum = str(Box2_Sum)&amp;#10;        &amp;#10;        left_shard_colors = [Box1_val1,Box1_val2,Box1_val3,&amp;#10;                             Box1_val4,Box1_val5,Box1_val6]&amp;#10;        right_shard_colors = [Box2_val1,Box2_val2,Box2_val3,&amp;#10;                              Box2_val4,Box2_val5,Box2_val6]&amp;#10;&amp;#10;    elif counter_balance == '2':&amp;#10;        print('cb2')&amp;#10;        left_shard_sum = str(Box1_Sum)&amp;#10;        right_shard_sum = str(Box2_Sum)&amp;#10;        &amp;#10;        left_shard_colors = [reverse_value(Box1_val1),reverse_value(Box1_val2),reverse_value(Box1_val3),&amp;#10;                             reverse_value(Box1_val4),reverse_value(Box1_val5),reverse_value(Box1_val6)]&amp;#10;        right_shard_colors = [reverse_value(Box2_val1),reverse_value(Box2_val2),reverse_value(Box2_val3),&amp;#10;                              reverse_value(Box2_val4),reverse_value(Box2_val5),reverse_value(Box2_val6)]&amp;#10;    &amp;#10;elif chest_order[0] == 'Box2':&amp;#10;    print('box2')&amp;#10;    if counter_balance == '1':&amp;#10;        print('cb1')&amp;#10;        left_shard_sum = str(Box2_Sum)&amp;#10;        right_shard_sum = str(Box1_Sum)&amp;#10;        left_shard_colors = [Box2_val1,Box2_val2,Box2_val3,&amp;#10;                              Box2_val4,Box2_val5,Box2_val6]&amp;#10;        right_shard_colors = [Box1_val1,Box1_val2,Box1_val3,&amp;#10;                              Box1_val4,Box1_val5,Box1_val6]&amp;#10;&amp;#10;    elif counter_balance == '2':&amp;#10;        print('cb2')&amp;#10;        left_shard_sum = str(Box2_Sum)&amp;#10;        right_shard_sum = str(Box1_Sum)&amp;#10;        &amp;#10;        left_shard_colors = [reverse_value(Box2_val1),reverse_value(Box2_val2),reverse_value(Box2_val3),&amp;#10;                              reverse_value(Box2_val4),reverse_value(Box2_val5),reverse_value(Box2_val6)]&amp;#10;        right_shard_colors = [reverse_value(Box1_val1),reverse_value(Box1_val2),reverse_value(Box1_val3),&amp;#10;                             reverse_value(Box1_val4),reverse_value(Box1_val5),reverse_value(Box1_val6)]&amp;#10;&amp;#10;print(left_shard_colors, 'left_shard_colors')&amp;#10;print(right_shard_colors, 'right_shard_colors')&amp;#10;&amp;#10;left_shards = []&amp;#10;right_shards = []&amp;#10;for i in range(6):&amp;#10;    ## THIS PART CONVERTS TO JS USING [].PUSH&amp;#10;    if left_shard_shapes[i] &gt;= 10:&amp;#10;        left_shards.append('stimuli/'+color_1+'/shard-' + str(left_shard_shapes[i]) + '_color-' + str(left_shard_colors[i]) + '.png')&amp;#10;    else:&amp;#10;        left_shards.append('stimuli/'+color_1+'/shard-0' + str(left_shard_shapes[i]) + '_color-' + str(left_shard_colors[i]) + '.png')&amp;#10;    &amp;#10;    ## THIS PART CONVERTS TO JS USING [].PUSH&amp;#10;    if right_shard_shapes[i] &gt;= 10:&amp;#10;        right_shards.append('stimuli/'+color_1+'/shard-' + str(right_shard_shapes[i]) + '_color-' + str(right_shard_colors[i]) + '.png')&amp;#10;    else:&amp;#10;        right_shards.append('stimuli/'+color_1+'/shard-0' + str(right_shard_shapes[i]) + '_color-' + str(right_shard_colors[i]) + '.png')&amp;#10;&amp;#10;## determine better option&amp;#10;if float(left_shard_sum) &gt; float(right_shard_sum):&amp;#10;    better_option = 'left'&amp;#10;elif float(left_shard_sum) &lt; float(right_shard_sum):&amp;#10;    better_option = 'right'&amp;#10;&amp;#10;thisExp.addData('better_option', better_option)&amp;#10;&amp;#10;print('chest_order', chest_order)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="set_shards_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="outline_settings_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="console.log(chest_order);&amp;#10;if ((choice_resp_2.keys === &quot;f&quot;)) {&amp;#10;    made_choice = 1;&amp;#10;    this_trial_choice = &quot;left&quot;;&amp;#10;    this_trial_box_choice = chest_order[0];&amp;#10;    if ((better_option === &quot;left&quot;)) {&amp;#10;        correct = 1;&amp;#10;    } else {&amp;#10;        correct = 0;&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((choice_resp_2.keys === &quot;j&quot;)) {&amp;#10;        made_choice = 1;&amp;#10;        this_trial_choice = &quot;right&quot;;&amp;#10;        this_trial_box_choice = chest_order[1];&amp;#10;        if ((better_option === &quot;right&quot;)) {&amp;#10;            correct = 1;&amp;#10;        } else {&amp;#10;            correct = 0;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;agent_choice&quot;, this_trial_choice);&amp;#10;psychoJS.experiment.addData(&quot;agent_box_choice&quot;, this_trial_box_choice);&amp;#10;psychoJS.experiment.addData(&quot;correct_choice&quot;, correct);&amp;#10;correct_choice_count.push(correct);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="print(chest_order)&amp;#10;if choice_resp_2.keys == 'f': #left&amp;#10;    made_choice = 1&amp;#10;    this_trial_choice = 'left'&amp;#10;    this_trial_box_choice = chest_order[0]&amp;#10;    if better_option == 'left':&amp;#10;        correct = 1&amp;#10;    else:&amp;#10;        correct = 0&amp;#10;elif choice_resp_2.keys == 'j': #right&amp;#10;    made_choice = 1&amp;#10;    this_trial_choice = 'right'&amp;#10;    this_trial_box_choice = chest_order[1]&amp;#10;    if better_option == 'right':&amp;#10;        correct = 1&amp;#10;    else:&amp;#10;        correct = 0&amp;#10;&amp;#10;thisExp.addData('agent_choice', this_trial_choice)&amp;#10;thisExp.addData('agent_box_choice', this_trial_box_choice)&amp;#10;thisExp.addData('correct_choice', correct)&amp;#10;correct_choice_count.append(correct)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="outline_settings_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="choice_resp_2">
        <Param val="'f','j'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="choice_resp_2" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="def_randchoice">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import random&amp;#10;&amp;#10;def random_choices(k):&amp;#10;    return random.choices(k, k=6)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Both" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="def_randchoice" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="start_exp"/>
    <Routine name="instr_1"/>
    <LoopInitiator loopType="TrialHandler" name="skip_food">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="FOOD_BOOL * RATE_BOOL" valType="num"/>
      <Param name="name" updates="None" val="skip_food" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="start_food_ratings"/>
    <LoopInitiator loopType="TrialHandler" name="food_rating_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'foodItem': '1%milk.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/1%milk.jpg'}, {'foodItem': 'air popcorn.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/air popcorn.jpg'}, {'foodItem': 'american cheese.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/american cheese.jpg'}, {'foodItem': 'apple slices.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/apple slices.jpg'}, {'foodItem': 'avacado.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/avacado.jpg'}, {'foodItem': 'baby cheese.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/baby cheese.jpg'}, {'foodItem': 'bagel and cc.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/bagel and cc.jpg'}, {'foodItem': 'bagel plain.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/bagel plain.jpg'}, {'foodItem': 'baguette oil.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/baguette oil.jpg'}, {'foodItem': 'baked potato.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/baked potato.jpg'}, {'foodItem': 'banana.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/banana.jpg'}, {'foodItem': 'broccoli cauliflower.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/broccoli cauliflower.jpg'}, {'foodItem': 'brownie.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/brownie.jpg'}, {'foodItem': 'burger.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/burger.jpg'}, {'foodItem': 'celery and carrot sticks.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/celery and carrot sticks.jpg'}, {'foodItem': 'Cheese nachos.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/Cheese nachos.jpg'}, {'foodItem': 'cherries.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/cherries.jpg'}, {'foodItem': 'cherry tomato.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/cherry tomato.jpg'}, {'foodItem': 'chicken nuggets2.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/chicken nuggets2.jpg'}, {'foodItem': 'cookies.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/cookies.jpg'}, {'foodItem': 'corn cob.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/corn cob.jpg'}, {'foodItem': 'cucumber slices.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/cucumber slices.jpg'}, {'foodItem': 'cupcakes am.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/cupcakes am.jpg'}, {'foodItem': 'doughnuts.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/doughnuts.jpg'}, {'foodItem': 'eggs.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/eggs.jpg'}, {'foodItem': 'french fries.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/french fries.jpg'}, {'foodItem': 'fried eggs.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/fried eggs.jpg'}, {'foodItem': 'froot loops w milk.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/froot loops w milk.jpg'}, {'foodItem': 'granola w milk.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/granola w milk.jpg'}, {'foodItem': 'Grapes.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/Grapes.jpg'}, {'foodItem': 'green beans.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/green beans.jpg'}, {'foodItem': 'grilled cheese.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/grilled cheese.jpg'}, {'foodItem': 'grilled chicken strips.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/grilled chicken strips.jpg'}, {'foodItem': 'Hershey Kisses.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/Hershey Kisses.jpg'}, {'foodItem': 'hotdog w must.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/hotdog w must.jpg'}, {'foodItem': 'ice cream sundae 002.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/ice cream sundae 002.jpg'}, {'foodItem': 'kiwi.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/kiwi.jpg'}, {'foodItem': 'lollipops.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/lollipops.jpg'}, {'foodItem': 'm_and_m.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/m_and_m.jpg'}, {'foodItem': 'mac &amp; cheese.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/mac &amp; cheese.jpg'}, {'foodItem': 'mashed potato.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/mashed potato.jpg'}, {'foodItem': 'mini muffins.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/mini muffins.jpg'}, {'foodItem': 'mozarella sticks.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/mozarella sticks.jpg'}, {'foodItem': 'mushrooms.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/mushrooms.jpg'}, {'foodItem': 'orange slices.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/orange slices.jpg'}, {'foodItem': 'PB.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/PB.jpg'}, {'foodItem': 'peaches.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/peaches.jpg'}, {'foodItem': 'pickles.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/pickles.jpg'}, {'foodItem': 'pizza.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/pizza.jpg'}, {'foodItem': 'Pretzels.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/Pretzels.jpg'}, {'foodItem': 'raisin bran w milk.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/raisin bran w milk.jpg'}, {'foodItem': 'raisins.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/raisins.jpg'}, {'foodItem': 'reeses.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/reeses.jpg'}, {'foodItem': 'rice cakes.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/rice cakes.jpg'}, {'foodItem': 'rigatoni and sauce.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/rigatoni and sauce.jpg'}, {'foodItem': 'rigatoni.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/rigatoni.jpg'}, {'foodItem': 'ritz.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/ritz.jpg'}, {'foodItem': 'salad w chicken.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/salad w chicken.jpg'}, {'foodItem': 'saltines.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/saltines.jpg'}, {'foodItem': 'seaweed.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/seaweed.jpg'}, {'foodItem': 'Skim milk.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/Skim milk.jpg'}, {'foodItem': 'soup with spoon.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/soup with spoon.jpg'}, {'foodItem': 'sour patch.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/sour patch.jpg'}, {'foodItem': 'soy chips.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/soy chips.jpg'}, {'foodItem': 'steak.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/steak.jpg'}, {'foodItem': 'strawberries.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/strawberries.jpg'}, {'foodItem': 'string cheese.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/string cheese.jpg'}, {'foodItem': 'sushi w_condiments.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/sushi w_condiments.jpg'}, {'foodItem': 'tacos.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/tacos.jpg'}, {'foodItem': 'trail mix.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/trail mix.jpg'}, {'foodItem': 'Tribe humus pita.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/Tribe humus pita.jpg'}, {'foodItem': 'turkey sandwich.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/turkey sandwich.jpg'}, {'foodItem': 'Whole milk.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/Whole milk.jpg'}, {'foodItem': 'yellow popcorn.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/yellow popcorn.jpg'}, {'foodItem': 'yogurt no spoon.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/yogurt no spoon.jpg'}, {'foodItem': 'yogurt pretzels.jpg', 'path': 'stimuli/food/', 'image': 'stimuli/food/yogurt pretzels.jpg'}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="finalfooditems.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="food_rating_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="rateFood"/>
    <Routine name="fixation_500ms"/>
    <LoopTerminator name="food_rating_loop"/>
    <Routine name="sort_food"/>
    <LoopTerminator name="skip_food"/>
    <LoopInitiator loopType="TrialHandler" name="choose_food_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'whichItem': 'HV1'}, {'whichItem': 'HV2'}, {'whichItem': 'HV3'}, {'whichItem': 'MV1'}, {'whichItem': 'MV2'}, {'whichItem': 'MV3'}, {'whichItem': 'LV1'}, {'whichItem': 'LV2'}, {'whichItem': 'LV3'}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="foodChoiceTrials.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="choose_food_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="choose_food"/>
    <LoopTerminator name="choose_food_loop"/>
    <Routine name="hide_mouse_routine"/>
    <Routine name="instr_2"/>
    <LoopInitiator loopType="TrialHandler" name="skip_practice">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="PRACTICE_BOOL" valType="num"/>
      <Param name="name" updates="None" val="skip_practice" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prac_instr"/>
    <LoopInitiator loopType="TrialHandler" name="practice">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('Box1_val1', 1), ('Box1_val2', 1), ('Box1_val3', 1), ('Box1_val4', 1), ('Box1_val5', 3), ('Box1_val6', 4), ('Box2_ID', 2521), ('Box2_val1', 1), ('Box2_val2', 1), ('Box2_val3', 3), ('Box2_val4', 4), ('Box2_val5', 4), ('Box2_val6', 4), ('Box1_Sum', 11), ('Box2_Sum', 17), ('valDif', -6), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0)]), OrderedDict([('Box1_val1', 1), ('Box1_val2', 1), ('Box1_val3', 1), ('Box1_val4', 2), ('Box1_val5', 4), ('Box1_val6', 2), ('Box2_ID', 2525), ('Box2_val1', 1), ('Box2_val2', 2), ('Box2_val3', 2), ('Box2_val4', 4), ('Box2_val5', 4), ('Box2_val6', 4), ('Box1_Sum', 11), ('Box2_Sum', 17), ('valDif', -6), ('Val_Cat', 1), ('trial_ID', 2), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0)]), OrderedDict([('Box1_val1', 1), ('Box1_val2', 1), ('Box1_val3', 1), ('Box1_val4', 4), ('Box1_val5', 1), ('Box1_val6', 3), ('Box2_ID', 2530), ('Box2_val1', 1), ('Box2_val2', 2), ('Box2_val3', 4), ('Box2_val4', 3), ('Box2_val5', 3), ('Box2_val6', 4), ('Box1_Sum', 11), ('Box2_Sum', 17), ('valDif', -6), ('Val_Cat', 1), ('trial_ID', 3), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1)]), OrderedDict([('Box1_val1', 1), ('Box1_val2', 1), ('Box1_val3', 2), ('Box1_val4', 1), ('Box1_val5', 4), ('Box1_val6', 2), ('Box2_ID', 2535), ('Box2_val1', 1), ('Box2_val2', 3), ('Box2_val3', 1), ('Box2_val4', 4), ('Box2_val5', 4), ('Box2_val6', 4), ('Box1_Sum', 11), ('Box2_Sum', 17), ('valDif', -6), ('Val_Cat', 1), ('trial_ID', 4), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0)]), OrderedDict([('Box1_val1', 5), ('Box1_val2', 5), ('Box1_val3', 5), ('Box1_val4', 5), ('Box1_val5', 7), ('Box1_val6', 8), ('Box2_ID', 2521), ('Box2_val1', 5), ('Box2_val2', 5), ('Box2_val3', 7), ('Box2_val4', 8), ('Box2_val5', 8), ('Box2_val6', 8), ('Box1_Sum', 35), ('Box2_Sum', 41), ('valDif', -6), ('Val_Cat', 2), ('trial_ID', 5), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0)]), OrderedDict([('Box1_val1', 5), ('Box1_val2', 5), ('Box1_val3', 5), ('Box1_val4', 6), ('Box1_val5', 8), ('Box1_val6', 6), ('Box2_ID', 2525), ('Box2_val1', 5), ('Box2_val2', 6), ('Box2_val3', 6), ('Box2_val4', 8), ('Box2_val5', 8), ('Box2_val6', 8), ('Box1_Sum', 35), ('Box2_Sum', 41), ('valDif', -6), ('Val_Cat', 2), ('trial_ID', 6), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0)]), OrderedDict([('Box1_val1', 5), ('Box1_val2', 5), ('Box1_val3', 5), ('Box1_val4', 8), ('Box1_val5', 5), ('Box1_val6', 7), ('Box2_ID', 2530), ('Box2_val1', 5), ('Box2_val2', 6), ('Box2_val3', 8), ('Box2_val4', 7), ('Box2_val5', 7), ('Box2_val6', 8), ('Box1_Sum', 35), ('Box2_Sum', 41), ('valDif', -6), ('Val_Cat', 2), ('trial_ID', 7), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1)]), OrderedDict([('Box1_val1', 5), ('Box1_val2', 5), ('Box1_val3', 6), ('Box1_val4', 5), ('Box1_val5', 8), ('Box1_val6', 6), ('Box2_ID', 2535), ('Box2_val1', 5), ('Box2_val2', 7), ('Box2_val3', 5), ('Box2_val4', 8), ('Box2_val5', 8), ('Box2_val6', 8), ('Box1_Sum', 35), ('Box2_Sum', 41), ('valDif', -6), ('Val_Cat', 2), ('trial_ID', 8), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0)]), OrderedDict([('Box1_val1', 9), ('Box1_val2', 9), ('Box1_val3', 9), ('Box1_val4', 9), ('Box1_val5', 11), ('Box1_val6', 12), ('Box2_ID', 2521), ('Box2_val1', 9), ('Box2_val2', 9), ('Box2_val3', 11), ('Box2_val4', 12), ('Box2_val5', 12), ('Box2_val6', 12), ('Box1_Sum', 59), ('Box2_Sum', 65), ('valDif', -6), ('Val_Cat', 3), ('trial_ID', 9), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0)]), OrderedDict([('Box1_val1', 9), ('Box1_val2', 9), ('Box1_val3', 9), ('Box1_val4', 10), ('Box1_val5', 12), ('Box1_val6', 10), ('Box2_ID', 2525), ('Box2_val1', 9), ('Box2_val2', 10), ('Box2_val3', 10), ('Box2_val4', 12), ('Box2_val5', 12), ('Box2_val6', 12), ('Box1_Sum', 59), ('Box2_Sum', 65), ('valDif', -6), ('Val_Cat', 3), ('trial_ID', 10), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0)]), OrderedDict([('Box1_val1', 9), ('Box1_val2', 9), ('Box1_val3', 9), ('Box1_val4', 12), ('Box1_val5', 9), ('Box1_val6', 11), ('Box2_ID', 2530), ('Box2_val1', 9), ('Box2_val2', 10), ('Box2_val3', 12), ('Box2_val4', 11), ('Box2_val5', 11), ('Box2_val6', 12), ('Box1_Sum', 59), ('Box2_Sum', 65), ('valDif', -6), ('Val_Cat', 3), ('trial_ID', 11), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1)]), OrderedDict([('Box1_val1', 9), ('Box1_val2', 9), ('Box1_val3', 10), ('Box1_val4', 9), ('Box1_val5', 12), ('Box1_val6', 10), ('Box2_ID', 2535), ('Box2_val1', 9), ('Box2_val2', 11), ('Box2_val3', 9), ('Box2_val4', 12), ('Box2_val5', 12), ('Box2_val6', 12), ('Box1_Sum', 59), ('Box2_Sum', 65), ('valDif', -6), ('Val_Cat', 3), ('trial_ID', 12), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="practice.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="practice" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="practice_choice"/>
    <Routine name="fixation_500ms"/>
    <LoopTerminator name="practice"/>
    <LoopTerminator name="skip_practice"/>
    <Routine name="self_instr"/>
    <LoopInitiator loopType="TrialHandler" name="self_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('TrialN', 1), ('Box1_ID', 1), ('Box1_val1', 1), ('Box1_val2', 3), ('Box1_val3', 4), ('Box1_val4', 1), ('Box1_val5', 2), ('Box1_val6', 3), ('Box2_ID', 2), ('Box2_val1', 2), ('Box2_val2', 2), ('Box2_val3', 4), ('Box2_val4', 2), ('Box2_val5', 4), ('Box2_val6', 3), ('Box1_Sum', 14), ('Box2_Sum', 17), ('valDif', -3), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 31), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 2), ('Box1_ID', 3), ('Box1_val1', 4), ('Box1_val2', 4), ('Box1_val3', 1), ('Box1_val4', 2), ('Box1_val5', 4), ('Box1_val6', 2), ('Box2_ID', 4), ('Box2_val1', 4), ('Box2_val2', 3), ('Box2_val3', 4), ('Box2_val4', 1), ('Box2_val5', 2), ('Box2_val6', 4), ('Box1_Sum', 17), ('Box2_Sum', 18), ('valDif', -1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 35), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 3), ('Box1_ID', 5), ('Box1_val1', 2), ('Box1_val2', 2), ('Box1_val3', 3), ('Box1_val4', 1), ('Box1_val5', 4), ('Box1_val6', 3), ('Box2_ID', 6), ('Box2_val1', 2), ('Box2_val2', 3), ('Box2_val3', 4), ('Box2_val4', 2), ('Box2_val5', 1), ('Box2_val6', 2), ('Box1_Sum', 15), ('Box2_Sum', 14), ('valDif', 1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 29), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 4), ('Box1_ID', 7), ('Box1_val1', 3), ('Box1_val2', 4), ('Box1_val3', 3), ('Box1_val4', 3), ('Box1_val5', 4), ('Box1_val6', 2), ('Box2_ID', 8), ('Box2_val1', 3), ('Box2_val2', 2), ('Box2_val3', 1), ('Box2_val4', 2), ('Box2_val5', 4), ('Box2_val6', 4), ('Box1_Sum', 19), ('Box2_Sum', 16), ('valDif', 3), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 35), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 5), ('Box1_ID', 9), ('Box1_val1', 3), ('Box1_val2', 4), ('Box1_val3', 2), ('Box1_val4', 2), ('Box1_val5', 2), ('Box1_val6', 1), ('Box2_ID', 10), ('Box2_val1', 1), ('Box2_val2', 2), ('Box2_val3', 2), ('Box2_val4', 1), ('Box2_val5', 3), ('Box2_val6', 4), ('Box1_Sum', 14), ('Box2_Sum', 13), ('valDif', 1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 27), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 6), ('Box1_ID', 11), ('Box1_val1', 1), ('Box1_val2', 4), ('Box1_val3', 1), ('Box1_val4', 3), ('Box1_val5', 2), ('Box1_val6', 4), ('Box2_ID', 12), ('Box2_val1', 1), ('Box2_val2', 3), ('Box2_val3', 4), ('Box2_val4', 4), ('Box2_val5', 1), ('Box2_val6', 4), ('Box1_Sum', 15), ('Box2_Sum', 17), ('valDif', -2), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 32), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 7), ('Box1_ID', 13), ('Box1_val1', 4), ('Box1_val2', 3), ('Box1_val3', 3), ('Box1_val4', 1), ('Box1_val5', 1), ('Box1_val6', 1), ('Box2_ID', 14), ('Box2_val1', 4), ('Box2_val2', 4), ('Box2_val3', 3), ('Box2_val4', 1), ('Box2_val5', 1), ('Box2_val6', 2), ('Box1_Sum', 13), ('Box2_Sum', 15), ('valDif', -2), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 28), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 8), ('Box1_ID', 15), ('Box1_val1', 3), ('Box1_val2', 1), ('Box1_val3', 4), ('Box1_val4', 4), ('Box1_val5', 4), ('Box1_val6', 2), ('Box2_ID', 16), ('Box2_val1', 1), ('Box2_val2', 3), ('Box2_val3', 4), ('Box2_val4', 4), ('Box2_val5', 3), ('Box2_val6', 2), ('Box1_Sum', 18), ('Box2_Sum', 17), ('valDif', 1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 35), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 9), ('Box1_ID', 17), ('Box1_val1', 2), ('Box1_val2', 3), ('Box1_val3', 2), ('Box1_val4', 1), ('Box1_val5', 1), ('Box1_val6', 4), ('Box2_ID', 18), ('Box2_val1', 2), ('Box2_val2', 1), ('Box2_val3', 4), ('Box2_val4', 3), ('Box2_val5', 1), ('Box2_val6', 1), ('Box1_Sum', 13), ('Box2_Sum', 12), ('valDif', 1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 25), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 10), ('Box1_ID', 19), ('Box1_val1', 1), ('Box1_val2', 4), ('Box1_val3', 2), ('Box1_val4', 3), ('Box1_val5', 1), ('Box1_val6', 4), ('Box2_ID', 20), ('Box2_val1', 1), ('Box2_val2', 2), ('Box2_val3', 3), ('Box2_val4', 1), ('Box2_val5', 3), ('Box2_val6', 1), ('Box1_Sum', 15), ('Box2_Sum', 11), ('valDif', 4), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 26), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 11), ('Box1_ID', 21), ('Box1_val1', 2), ('Box1_val2', 1), ('Box1_val3', 2), ('Box1_val4', 3), ('Box1_val5', 3), ('Box1_val6', 1), ('Box2_ID', 22), ('Box2_val1', 4), ('Box2_val2', 1), ('Box2_val3', 1), ('Box2_val4', 4), ('Box2_val5', 3), ('Box2_val6', 3), ('Box1_Sum', 12), ('Box2_Sum', 16), ('valDif', -4), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 28), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 12), ('Box1_ID', 23), ('Box1_val1', 4), ('Box1_val2', 1), ('Box1_val3', 3), ('Box1_val4', 2), ('Box1_val5', 3), ('Box1_val6', 1), ('Box2_ID', 24), ('Box2_val1', 1), ('Box2_val2', 2), ('Box2_val3', 4), ('Box2_val4', 3), ('Box2_val5', 2), ('Box2_val6', 1), ('Box1_Sum', 14), ('Box2_Sum', 13), ('valDif', 1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 27), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 13), ('Box1_ID', 25), ('Box1_val1', 4), ('Box1_val2', 1), ('Box1_val3', 3), ('Box1_val4', 1), ('Box1_val5', 4), ('Box1_val6', 1), ('Box2_ID', 26), ('Box2_val1', 4), ('Box2_val2', 4), ('Box2_val3', 2), ('Box2_val4', 1), ('Box2_val5', 3), ('Box2_val6', 1), ('Box1_Sum', 14), ('Box2_Sum', 15), ('valDif', -1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 29), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 14), ('Box1_ID', 27), ('Box1_val1', 2), ('Box1_val2', 4), ('Box1_val3', 1), ('Box1_val4', 4), ('Box1_val5', 3), ('Box1_val6', 4), ('Box2_ID', 28), ('Box2_val1', 3), ('Box2_val2', 4), ('Box2_val3', 2), ('Box2_val4', 4), ('Box2_val5', 3), ('Box2_val6', 3), ('Box1_Sum', 18), ('Box2_Sum', 19), ('valDif', -1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 37), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 15), ('Box1_ID', 29), ('Box1_val1', 2), ('Box1_val2', 3), ('Box1_val3', 4), ('Box1_val4', 4), ('Box1_val5', 3), ('Box1_val6', 1), ('Box2_ID', 30), ('Box2_val1', 2), ('Box2_val2', 3), ('Box2_val3', 4), ('Box2_val4', 4), ('Box2_val5', 1), ('Box2_val6', 1), ('Box1_Sum', 17), ('Box2_Sum', 15), ('valDif', 2), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 32), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 16), ('Box1_ID', 31), ('Box1_val1', 2), ('Box1_val2', 2), ('Box1_val3', 4), ('Box1_val4', 3), ('Box1_val5', 1), ('Box1_val6', 2), ('Box2_ID', 32), ('Box2_val1', 1), ('Box2_val2', 4), ('Box2_val3', 1), ('Box2_val4', 4), ('Box2_val5', 3), ('Box2_val6', 4), ('Box1_Sum', 14), ('Box2_Sum', 17), ('valDif', -3), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 31), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 17), ('Box1_ID', 33), ('Box1_val1', 2), ('Box1_val2', 2), ('Box1_val3', 3), ('Box1_val4', 2), ('Box1_val5', 4), ('Box1_val6', 1), ('Box2_ID', 35), ('Box2_val1', 3), ('Box2_val2', 4), ('Box2_val3', 2), ('Box2_val4', 1), ('Box2_val5', 2), ('Box2_val6', 1), ('Box1_Sum', 14), ('Box2_Sum', 13), ('valDif', 1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 27), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 18), ('Box1_ID', 34), ('Box1_val1', 1), ('Box1_val2', 4), ('Box1_val3', 3), ('Box1_val4', 1), ('Box1_val5', 2), ('Box1_val6', 3), ('Box2_ID', 36), ('Box2_val1', 1), ('Box2_val2', 2), ('Box2_val3', 4), ('Box2_val4', 3), ('Box2_val5', 2), ('Box2_val6', 4), ('Box1_Sum', 14), ('Box2_Sum', 16), ('valDif', -2), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 30), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 19), ('Box1_ID', 37), ('Box1_val1', 2), ('Box1_val2', 4), ('Box1_val3', 2), ('Box1_val4', 2), ('Box1_val5', 1), ('Box1_val6', 3), ('Box2_ID', 39), ('Box2_val1', 2), ('Box2_val2', 2), ('Box2_val3', 2), ('Box2_val4', 3), ('Box2_val5', 2), ('Box2_val6', 4), ('Box1_Sum', 14), ('Box2_Sum', 15), ('valDif', -1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 29), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 20), ('Box1_ID', 38), ('Box1_val1', 3), ('Box1_val2', 3), ('Box1_val3', 1), ('Box1_val4', 2), ('Box1_val5', 4), ('Box1_val6', 1), ('Box2_ID', 41), ('Box2_val1', 4), ('Box2_val2', 3), ('Box2_val3', 1), ('Box2_val4', 1), ('Box2_val5', 3), ('Box2_val6', 3), ('Box1_Sum', 14), ('Box2_Sum', 15), ('valDif', -1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 29), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 21), ('Box1_ID', 40), ('Box1_val1', 3), ('Box1_val2', 2), ('Box1_val3', 1), ('Box1_val4', 3), ('Box1_val5', 3), ('Box1_val6', 2), ('Box2_ID', 42), ('Box2_val1', 3), ('Box2_val2', 3), ('Box2_val3', 2), ('Box2_val4', 3), ('Box2_val5', 1), ('Box2_val6', 4), ('Box1_Sum', 14), ('Box2_Sum', 16), ('valDif', -2), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 30), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 22), ('Box1_ID', 43), ('Box1_val1', 1), ('Box1_val2', 3), ('Box1_val3', 3), ('Box1_val4', 3), ('Box1_val5', 4), ('Box1_val6', 2), ('Box2_ID', 44), ('Box2_val1', 4), ('Box2_val2', 4), ('Box2_val3', 2), ('Box2_val4', 2), ('Box2_val5', 1), ('Box2_val6', 4), ('Box1_Sum', 16), ('Box2_Sum', 17), ('valDif', -1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 33), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 23), ('Box1_ID', 45), ('Box1_val1', 2), ('Box1_val2', 1), ('Box1_val3', 3), ('Box1_val4', 4), ('Box1_val5', 4), ('Box1_val6', 2), ('Box2_ID', 46), ('Box2_val1', 1), ('Box2_val2', 4), ('Box2_val3', 2), ('Box2_val4', 4), ('Box2_val5', 4), ('Box2_val6', 4), ('Box1_Sum', 16), ('Box2_Sum', 19), ('valDif', -3), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 35), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 24), ('Box1_ID', 47), ('Box1_val1', 1), ('Box1_val2', 4), ('Box1_val3', 2), ('Box1_val4', 4), ('Box1_val5', 4), ('Box1_val6', 2), ('Box2_ID', 48), ('Box2_val1', 3), ('Box2_val2', 1), ('Box2_val3', 2), ('Box2_val4', 2), ('Box2_val5', 2), ('Box2_val6', 4), ('Box1_Sum', 17), ('Box2_Sum', 14), ('valDif', 3), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 31), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 25), ('Box1_ID', 49), ('Box1_val1', 4), ('Box1_val2', 3), ('Box1_val3', 3), ('Box1_val4', 1), ('Box1_val5', 3), ('Box1_val6', 3), ('Box2_ID', 50), ('Box2_val1', 1), ('Box2_val2', 2), ('Box2_val3', 4), ('Box2_val4', 1), ('Box2_val5', 4), ('Box2_val6', 3), ('Box1_Sum', 17), ('Box2_Sum', 15), ('valDif', 2), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 32), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 26), ('Box1_ID', 51), ('Box1_val1', 1), ('Box1_val2', 3), ('Box1_val3', 1), ('Box1_val4', 1), ('Box1_val5', 3), ('Box1_val6', 2), ('Box2_ID', 53), ('Box2_val1', 4), ('Box2_val2', 1), ('Box2_val3', 3), ('Box2_val4', 2), ('Box2_val5', 2), ('Box2_val6', 4), ('Box1_Sum', 11), ('Box2_Sum', 16), ('valDif', -5), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 27), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 27), ('Box1_ID', 52), ('Box1_val1', 1), ('Box1_val2', 4), ('Box1_val3', 4), ('Box1_val4', 3), ('Box1_val5', 3), ('Box1_val6', 3), ('Box2_ID', 54), ('Box2_val1', 2), ('Box2_val2', 2), ('Box2_val3', 2), ('Box2_val4', 1), ('Box2_val5', 2), ('Box2_val6', 4), ('Box1_Sum', 18), ('Box2_Sum', 13), ('valDif', 5), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 31), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 28), ('Box1_ID', 55), ('Box1_val1', 3), ('Box1_val2', 1), ('Box1_val3', 3), ('Box1_val4', 1), ('Box1_val5', 1), ('Box1_val6', 4), ('Box2_ID', 57), ('Box2_val1', 4), ('Box2_val2', 1), ('Box2_val3', 3), ('Box2_val4', 4), ('Box2_val5', 2), ('Box2_val6', 4), ('Box1_Sum', 13), ('Box2_Sum', 18), ('valDif', -5), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 31), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 29), ('Box1_ID', 56), ('Box1_val1', 3), ('Box1_val2', 1), ('Box1_val3', 2), ('Box1_val4', 4), ('Box1_val5', 2), ('Box1_val6', 1), ('Box2_ID', 58), ('Box2_val1', 2), ('Box2_val2', 2), ('Box2_val3', 1), ('Box2_val4', 2), ('Box2_val5', 4), ('Box2_val6', 1), ('Box1_Sum', 13), ('Box2_Sum', 12), ('valDif', 1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 25), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 30), ('Box1_ID', 59), ('Box1_val1', 4), ('Box1_val2', 1), ('Box1_val3', 2), ('Box1_val4', 1), ('Box1_val5', 2), ('Box1_val6', 3), ('Box2_ID', 60), ('Box2_val1', 4), ('Box2_val2', 2), ('Box2_val3', 1), ('Box2_val4', 4), ('Box2_val5', 3), ('Box2_val6', 4), ('Box1_Sum', 13), ('Box2_Sum', 18), ('valDif', -5), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 31), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 31), ('Box1_ID', 61), ('Box1_val1', 3), ('Box1_val2', 1), ('Box1_val3', 1), ('Box1_val4', 4), ('Box1_val5', 4), ('Box1_val6', 4), ('Box2_ID', 63), ('Box2_val1', 1), ('Box2_val2', 2), ('Box2_val3', 2), ('Box2_val4', 4), ('Box2_val5', 1), ('Box2_val6', 4), ('Box1_Sum', 17), ('Box2_Sum', 14), ('valDif', 3), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 31), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 32), ('Box1_ID', 62), ('Box1_val1', 4), ('Box1_val2', 4), ('Box1_val3', 1), ('Box1_val4', 3), ('Box1_val5', 3), ('Box1_val6', 2), ('Box2_ID', 64), ('Box2_val1', 1), ('Box2_val2', 4), ('Box2_val3', 2), ('Box2_val4', 4), ('Box2_val5', 3), ('Box2_val6', 4), ('Box1_Sum', 17), ('Box2_Sum', 18), ('valDif', -1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 35), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 33), ('Box1_ID', 65), ('Box1_val1', 3), ('Box1_val2', 4), ('Box1_val3', 3), ('Box1_val4', 1), ('Box1_val5', 2), ('Box1_val6', 1), ('Box2_ID', 66), ('Box2_val1', 4), ('Box2_val2', 2), ('Box2_val3', 3), ('Box2_val4', 2), ('Box2_val5', 2), ('Box2_val6', 4), ('Box1_Sum', 14), ('Box2_Sum', 17), ('valDif', -3), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 31), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 34), ('Box1_ID', 67), ('Box1_val1', 4), ('Box1_val2', 1), ('Box1_val3', 2), ('Box1_val4', 1), ('Box1_val5', 3), ('Box1_val6', 3), ('Box2_ID', 68), ('Box2_val1', 4), ('Box2_val2', 3), ('Box2_val3', 3), ('Box2_val4', 4), ('Box2_val5', 1), ('Box2_val6', 3), ('Box1_Sum', 14), ('Box2_Sum', 18), ('valDif', -4), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 32), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 35), ('Box1_ID', 69), ('Box1_val1', 3), ('Box1_val2', 2), ('Box1_val3', 4), ('Box1_val4', 2), ('Box1_val5', 4), ('Box1_val6', 1), ('Box2_ID', 70), ('Box2_val1', 3), ('Box2_val2', 1), ('Box2_val3', 4), ('Box2_val4', 2), ('Box2_val5', 1), ('Box2_val6', 1), ('Box1_Sum', 16), ('Box2_Sum', 12), ('valDif', 4), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 28), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 36), ('Box1_ID', 71), ('Box1_val1', 3), ('Box1_val2', 4), ('Box1_val3', 4), ('Box1_val4', 1), ('Box1_val5', 3), ('Box1_val6', 1), ('Box2_ID', 72), ('Box2_val1', 2), ('Box2_val2', 4), ('Box2_val3', 2), ('Box2_val4', 3), ('Box2_val5', 2), ('Box2_val6', 2), ('Box1_Sum', 16), ('Box2_Sum', 15), ('valDif', 1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 31), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 37), ('Box1_ID', 73), ('Box1_val1', 4), ('Box1_val2', 3), ('Box1_val3', 2), ('Box1_val4', 2), ('Box1_val5', 3), ('Box1_val6', 1), ('Box2_ID', 74), ('Box2_val1', 1), ('Box2_val2', 3), ('Box2_val3', 3), ('Box2_val4', 3), ('Box2_val5', 2), ('Box2_val6', 2), ('Box1_Sum', 15), ('Box2_Sum', 14), ('valDif', 1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 29), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 38), ('Box1_ID', 75), ('Box1_val1', 4), ('Box1_val2', 1), ('Box1_val3', 2), ('Box1_val4', 4), ('Box1_val5', 1), ('Box1_val6', 3), ('Box2_ID', 76), ('Box2_val1', 2), ('Box2_val2', 3), ('Box2_val3', 1), ('Box2_val4', 3), ('Box2_val5', 2), ('Box2_val6', 2), ('Box1_Sum', 15), ('Box2_Sum', 13), ('valDif', 2), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 28), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 39), ('Box1_ID', 77), ('Box1_val1', 3), ('Box1_val2', 3), ('Box1_val3', 1), ('Box1_val4', 2), ('Box1_val5', 2), ('Box1_val6', 4), ('Box2_ID', 78), ('Box2_val1', 2), ('Box2_val2', 3), ('Box2_val3', 4), ('Box2_val4', 4), ('Box2_val5', 1), ('Box2_val6', 3), ('Box1_Sum', 15), ('Box2_Sum', 17), ('valDif', -2), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 32), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 40), ('Box1_ID', 79), ('Box1_val1', 2), ('Box1_val2', 4), ('Box1_val3', 3), ('Box1_val4', 4), ('Box1_val5', 1), ('Box1_val6', 4), ('Box2_ID', 81), ('Box2_val1', 1), ('Box2_val2', 3), ('Box2_val3', 4), ('Box2_val4', 2), ('Box2_val5', 3), ('Box2_val6', 1), ('Box1_Sum', 18), ('Box2_Sum', 14), ('valDif', 4), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 32), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 41), ('Box1_ID', 80), ('Box1_val1', 1), ('Box1_val2', 2), ('Box1_val3', 1), ('Box1_val4', 4), ('Box1_val5', 2), ('Box1_val6', 2), ('Box2_ID', 82), ('Box2_val1', 1), ('Box2_val2', 1), ('Box2_val3', 4), ('Box2_val4', 3), ('Box2_val5', 1), ('Box2_val6', 3), ('Box1_Sum', 12), ('Box2_Sum', 13), ('valDif', -1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 25), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 42), ('Box1_ID', 83), ('Box1_val1', 3), ('Box1_val2', 3), ('Box1_val3', 3), ('Box1_val4', 4), ('Box1_val5', 1), ('Box1_val6', 4), ('Box2_ID', 84), ('Box2_val1', 1), ('Box2_val2', 3), ('Box2_val3', 4), ('Box2_val4', 2), ('Box2_val5', 1), ('Box2_val6', 4), ('Box1_Sum', 18), ('Box2_Sum', 15), ('valDif', 3), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 33), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 43), ('Box1_ID', 85), ('Box1_val1', 2), ('Box1_val2', 1), ('Box1_val3', 1), ('Box1_val4', 3), ('Box1_val5', 3), ('Box1_val6', 3), ('Box2_ID', 88), ('Box2_val1', 3), ('Box2_val2', 4), ('Box2_val3', 2), ('Box2_val4', 4), ('Box2_val5', 1), ('Box2_val6', 2), ('Box1_Sum', 13), ('Box2_Sum', 16), ('valDif', -3), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 29), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 44), ('Box1_ID', 86), ('Box1_val1', 4), ('Box1_val2', 4), ('Box1_val3', 3), ('Box1_val4', 2), ('Box1_val5', 2), ('Box1_val6', 4), ('Box2_ID', 89), ('Box2_val1', 1), ('Box2_val2', 2), ('Box2_val3', 3), ('Box2_val4', 3), ('Box2_val5', 3), ('Box2_val6', 4), ('Box1_Sum', 19), ('Box2_Sum', 16), ('valDif', 3), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 35), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 45), ('Box1_ID', 87), ('Box1_val1', 1), ('Box1_val2', 2), ('Box1_val3', 2), ('Box1_val4', 4), ('Box1_val5', 2), ('Box1_val6', 2), ('Box2_ID', 90), ('Box2_val1', 2), ('Box2_val2', 1), ('Box2_val3', 2), ('Box2_val4', 4), ('Box2_val5', 4), ('Box2_val6', 1), ('Box1_Sum', 13), ('Box2_Sum', 14), ('valDif', -1), ('Val_Cat', 1), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 27), ('Design_Cell', 'L')]), OrderedDict([('TrialN', 1), ('Box1_ID', 1), ('Box1_val1', 5), ('Box1_val2', 7), ('Box1_val3', 8), ('Box1_val4', 5), ('Box1_val5', 6), ('Box1_val6', 7), ('Box2_ID', 2), ('Box2_val1', 6), ('Box2_val2', 6), ('Box2_val3', 8), ('Box2_val4', 6), ('Box2_val5', 8), ('Box2_val6', 7), ('Box1_Sum', 38), ('Box2_Sum', 41), ('valDif', -3), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 79), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 2), ('Box1_ID', 3), ('Box1_val1', 8), ('Box1_val2', 8), ('Box1_val3', 5), ('Box1_val4', 6), ('Box1_val5', 8), ('Box1_val6', 6), ('Box2_ID', 4), ('Box2_val1', 8), ('Box2_val2', 7), ('Box2_val3', 8), ('Box2_val4', 5), ('Box2_val5', 6), ('Box2_val6', 8), ('Box1_Sum', 41), ('Box2_Sum', 42), ('valDif', -1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 83), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 3), ('Box1_ID', 5), ('Box1_val1', 6), ('Box1_val2', 6), ('Box1_val3', 7), ('Box1_val4', 5), ('Box1_val5', 8), ('Box1_val6', 7), ('Box2_ID', 6), ('Box2_val1', 6), ('Box2_val2', 7), ('Box2_val3', 8), ('Box2_val4', 6), ('Box2_val5', 5), ('Box2_val6', 6), ('Box1_Sum', 39), ('Box2_Sum', 38), ('valDif', 1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 77), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 4), ('Box1_ID', 7), ('Box1_val1', 7), ('Box1_val2', 8), ('Box1_val3', 7), ('Box1_val4', 7), ('Box1_val5', 8), ('Box1_val6', 6), ('Box2_ID', 8), ('Box2_val1', 7), ('Box2_val2', 6), ('Box2_val3', 5), ('Box2_val4', 6), ('Box2_val5', 8), ('Box2_val6', 8), ('Box1_Sum', 43), ('Box2_Sum', 40), ('valDif', 3), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 83), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 5), ('Box1_ID', 9), ('Box1_val1', 7), ('Box1_val2', 8), ('Box1_val3', 6), ('Box1_val4', 6), ('Box1_val5', 6), ('Box1_val6', 5), ('Box2_ID', 10), ('Box2_val1', 5), ('Box2_val2', 6), ('Box2_val3', 6), ('Box2_val4', 5), ('Box2_val5', 7), ('Box2_val6', 8), ('Box1_Sum', 38), ('Box2_Sum', 37), ('valDif', 1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 75), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 6), ('Box1_ID', 11), ('Box1_val1', 5), ('Box1_val2', 8), ('Box1_val3', 5), ('Box1_val4', 7), ('Box1_val5', 6), ('Box1_val6', 8), ('Box2_ID', 12), ('Box2_val1', 5), ('Box2_val2', 7), ('Box2_val3', 8), ('Box2_val4', 8), ('Box2_val5', 5), ('Box2_val6', 8), ('Box1_Sum', 39), ('Box2_Sum', 41), ('valDif', -2), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 80), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 7), ('Box1_ID', 13), ('Box1_val1', 8), ('Box1_val2', 7), ('Box1_val3', 7), ('Box1_val4', 5), ('Box1_val5', 5), ('Box1_val6', 5), ('Box2_ID', 14), ('Box2_val1', 8), ('Box2_val2', 8), ('Box2_val3', 7), ('Box2_val4', 5), ('Box2_val5', 5), ('Box2_val6', 6), ('Box1_Sum', 37), ('Box2_Sum', 39), ('valDif', -2), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 76), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 8), ('Box1_ID', 15), ('Box1_val1', 7), ('Box1_val2', 5), ('Box1_val3', 8), ('Box1_val4', 8), ('Box1_val5', 8), ('Box1_val6', 6), ('Box2_ID', 16), ('Box2_val1', 5), ('Box2_val2', 7), ('Box2_val3', 8), ('Box2_val4', 8), ('Box2_val5', 7), ('Box2_val6', 6), ('Box1_Sum', 42), ('Box2_Sum', 41), ('valDif', 1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 83), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 9), ('Box1_ID', 17), ('Box1_val1', 6), ('Box1_val2', 7), ('Box1_val3', 6), ('Box1_val4', 5), ('Box1_val5', 5), ('Box1_val6', 8), ('Box2_ID', 18), ('Box2_val1', 6), ('Box2_val2', 5), ('Box2_val3', 8), ('Box2_val4', 7), ('Box2_val5', 5), ('Box2_val6', 5), ('Box1_Sum', 37), ('Box2_Sum', 36), ('valDif', 1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 73), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 10), ('Box1_ID', 19), ('Box1_val1', 5), ('Box1_val2', 8), ('Box1_val3', 6), ('Box1_val4', 7), ('Box1_val5', 5), ('Box1_val6', 8), ('Box2_ID', 20), ('Box2_val1', 5), ('Box2_val2', 6), ('Box2_val3', 7), ('Box2_val4', 5), ('Box2_val5', 7), ('Box2_val6', 5), ('Box1_Sum', 39), ('Box2_Sum', 35), ('valDif', 4), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 74), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 11), ('Box1_ID', 21), ('Box1_val1', 6), ('Box1_val2', 5), ('Box1_val3', 6), ('Box1_val4', 7), ('Box1_val5', 7), ('Box1_val6', 5), ('Box2_ID', 22), ('Box2_val1', 8), ('Box2_val2', 5), ('Box2_val3', 5), ('Box2_val4', 8), ('Box2_val5', 7), ('Box2_val6', 7), ('Box1_Sum', 36), ('Box2_Sum', 40), ('valDif', -4), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 76), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 12), ('Box1_ID', 23), ('Box1_val1', 8), ('Box1_val2', 5), ('Box1_val3', 7), ('Box1_val4', 6), ('Box1_val5', 7), ('Box1_val6', 5), ('Box2_ID', 24), ('Box2_val1', 5), ('Box2_val2', 6), ('Box2_val3', 8), ('Box2_val4', 7), ('Box2_val5', 6), ('Box2_val6', 5), ('Box1_Sum', 38), ('Box2_Sum', 37), ('valDif', 1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 75), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 13), ('Box1_ID', 25), ('Box1_val1', 8), ('Box1_val2', 5), ('Box1_val3', 7), ('Box1_val4', 5), ('Box1_val5', 8), ('Box1_val6', 5), ('Box2_ID', 26), ('Box2_val1', 8), ('Box2_val2', 8), ('Box2_val3', 6), ('Box2_val4', 5), ('Box2_val5', 7), ('Box2_val6', 5), ('Box1_Sum', 38), ('Box2_Sum', 39), ('valDif', -1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 77), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 14), ('Box1_ID', 27), ('Box1_val1', 6), ('Box1_val2', 8), ('Box1_val3', 5), ('Box1_val4', 8), ('Box1_val5', 7), ('Box1_val6', 8), ('Box2_ID', 28), ('Box2_val1', 7), ('Box2_val2', 8), ('Box2_val3', 6), ('Box2_val4', 8), ('Box2_val5', 7), ('Box2_val6', 7), ('Box1_Sum', 42), ('Box2_Sum', 43), ('valDif', -1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 85), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 15), ('Box1_ID', 29), ('Box1_val1', 6), ('Box1_val2', 7), ('Box1_val3', 8), ('Box1_val4', 8), ('Box1_val5', 7), ('Box1_val6', 5), ('Box2_ID', 30), ('Box2_val1', 6), ('Box2_val2', 7), ('Box2_val3', 8), ('Box2_val4', 8), ('Box2_val5', 5), ('Box2_val6', 5), ('Box1_Sum', 41), ('Box2_Sum', 39), ('valDif', 2), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 80), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 16), ('Box1_ID', 31), ('Box1_val1', 6), ('Box1_val2', 6), ('Box1_val3', 8), ('Box1_val4', 7), ('Box1_val5', 5), ('Box1_val6', 6), ('Box2_ID', 32), ('Box2_val1', 5), ('Box2_val2', 8), ('Box2_val3', 5), ('Box2_val4', 8), ('Box2_val5', 7), ('Box2_val6', 8), ('Box1_Sum', 38), ('Box2_Sum', 41), ('valDif', -3), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 79), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 17), ('Box1_ID', 33), ('Box1_val1', 6), ('Box1_val2', 6), ('Box1_val3', 7), ('Box1_val4', 6), ('Box1_val5', 8), ('Box1_val6', 5), ('Box2_ID', 35), ('Box2_val1', 7), ('Box2_val2', 8), ('Box2_val3', 6), ('Box2_val4', 5), ('Box2_val5', 6), ('Box2_val6', 5), ('Box1_Sum', 38), ('Box2_Sum', 37), ('valDif', 1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 75), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 18), ('Box1_ID', 34), ('Box1_val1', 5), ('Box1_val2', 8), ('Box1_val3', 7), ('Box1_val4', 5), ('Box1_val5', 6), ('Box1_val6', 7), ('Box2_ID', 36), ('Box2_val1', 5), ('Box2_val2', 6), ('Box2_val3', 8), ('Box2_val4', 7), ('Box2_val5', 6), ('Box2_val6', 8), ('Box1_Sum', 38), ('Box2_Sum', 40), ('valDif', -2), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 78), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 19), ('Box1_ID', 37), ('Box1_val1', 6), ('Box1_val2', 8), ('Box1_val3', 6), ('Box1_val4', 6), ('Box1_val5', 5), ('Box1_val6', 7), ('Box2_ID', 39), ('Box2_val1', 6), ('Box2_val2', 6), ('Box2_val3', 6), ('Box2_val4', 7), ('Box2_val5', 6), ('Box2_val6', 8), ('Box1_Sum', 38), ('Box2_Sum', 39), ('valDif', -1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 77), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 20), ('Box1_ID', 38), ('Box1_val1', 7), ('Box1_val2', 7), ('Box1_val3', 5), ('Box1_val4', 6), ('Box1_val5', 8), ('Box1_val6', 5), ('Box2_ID', 41), ('Box2_val1', 8), ('Box2_val2', 7), ('Box2_val3', 5), ('Box2_val4', 5), ('Box2_val5', 7), ('Box2_val6', 7), ('Box1_Sum', 38), ('Box2_Sum', 39), ('valDif', -1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 77), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 21), ('Box1_ID', 40), ('Box1_val1', 7), ('Box1_val2', 6), ('Box1_val3', 5), ('Box1_val4', 7), ('Box1_val5', 7), ('Box1_val6', 6), ('Box2_ID', 42), ('Box2_val1', 7), ('Box2_val2', 7), ('Box2_val3', 6), ('Box2_val4', 7), ('Box2_val5', 5), ('Box2_val6', 8), ('Box1_Sum', 38), ('Box2_Sum', 40), ('valDif', -2), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 78), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 22), ('Box1_ID', 43), ('Box1_val1', 5), ('Box1_val2', 7), ('Box1_val3', 7), ('Box1_val4', 7), ('Box1_val5', 8), ('Box1_val6', 6), ('Box2_ID', 44), ('Box2_val1', 8), ('Box2_val2', 8), ('Box2_val3', 6), ('Box2_val4', 6), ('Box2_val5', 5), ('Box2_val6', 8), ('Box1_Sum', 40), ('Box2_Sum', 41), ('valDif', -1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 81), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 23), ('Box1_ID', 45), ('Box1_val1', 6), ('Box1_val2', 5), ('Box1_val3', 7), ('Box1_val4', 8), ('Box1_val5', 8), ('Box1_val6', 6), ('Box2_ID', 46), ('Box2_val1', 5), ('Box2_val2', 8), ('Box2_val3', 6), ('Box2_val4', 8), ('Box2_val5', 8), ('Box2_val6', 8), ('Box1_Sum', 40), ('Box2_Sum', 43), ('valDif', -3), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 83), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 24), ('Box1_ID', 47), ('Box1_val1', 5), ('Box1_val2', 8), ('Box1_val3', 6), ('Box1_val4', 8), ('Box1_val5', 8), ('Box1_val6', 6), ('Box2_ID', 48), ('Box2_val1', 7), ('Box2_val2', 5), ('Box2_val3', 6), ('Box2_val4', 6), ('Box2_val5', 6), ('Box2_val6', 8), ('Box1_Sum', 41), ('Box2_Sum', 38), ('valDif', 3), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 79), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 25), ('Box1_ID', 49), ('Box1_val1', 8), ('Box1_val2', 7), ('Box1_val3', 7), ('Box1_val4', 5), ('Box1_val5', 7), ('Box1_val6', 7), ('Box2_ID', 50), ('Box2_val1', 5), ('Box2_val2', 6), ('Box2_val3', 8), ('Box2_val4', 5), ('Box2_val5', 8), ('Box2_val6', 7), ('Box1_Sum', 41), ('Box2_Sum', 39), ('valDif', 2), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 80), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 26), ('Box1_ID', 51), ('Box1_val1', 5), ('Box1_val2', 7), ('Box1_val3', 5), ('Box1_val4', 5), ('Box1_val5', 7), ('Box1_val6', 6), ('Box2_ID', 53), ('Box2_val1', 8), ('Box2_val2', 5), ('Box2_val3', 7), ('Box2_val4', 6), ('Box2_val5', 6), ('Box2_val6', 8), ('Box1_Sum', 35), ('Box2_Sum', 40), ('valDif', -5), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 75), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 27), ('Box1_ID', 52), ('Box1_val1', 5), ('Box1_val2', 8), ('Box1_val3', 8), ('Box1_val4', 7), ('Box1_val5', 7), ('Box1_val6', 7), ('Box2_ID', 54), ('Box2_val1', 6), ('Box2_val2', 6), ('Box2_val3', 6), ('Box2_val4', 5), ('Box2_val5', 6), ('Box2_val6', 8), ('Box1_Sum', 42), ('Box2_Sum', 37), ('valDif', 5), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 79), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 28), ('Box1_ID', 55), ('Box1_val1', 7), ('Box1_val2', 5), ('Box1_val3', 7), ('Box1_val4', 5), ('Box1_val5', 5), ('Box1_val6', 8), ('Box2_ID', 57), ('Box2_val1', 8), ('Box2_val2', 5), ('Box2_val3', 7), ('Box2_val4', 8), ('Box2_val5', 6), ('Box2_val6', 8), ('Box1_Sum', 37), ('Box2_Sum', 42), ('valDif', -5), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 79), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 29), ('Box1_ID', 56), ('Box1_val1', 7), ('Box1_val2', 5), ('Box1_val3', 6), ('Box1_val4', 8), ('Box1_val5', 6), ('Box1_val6', 5), ('Box2_ID', 58), ('Box2_val1', 6), ('Box2_val2', 6), ('Box2_val3', 5), ('Box2_val4', 6), ('Box2_val5', 8), ('Box2_val6', 5), ('Box1_Sum', 37), ('Box2_Sum', 36), ('valDif', 1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 73), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 30), ('Box1_ID', 59), ('Box1_val1', 8), ('Box1_val2', 5), ('Box1_val3', 6), ('Box1_val4', 5), ('Box1_val5', 6), ('Box1_val6', 7), ('Box2_ID', 60), ('Box2_val1', 8), ('Box2_val2', 6), ('Box2_val3', 5), ('Box2_val4', 8), ('Box2_val5', 7), ('Box2_val6', 8), ('Box1_Sum', 37), ('Box2_Sum', 42), ('valDif', -5), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 79), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 31), ('Box1_ID', 61), ('Box1_val1', 7), ('Box1_val2', 5), ('Box1_val3', 5), ('Box1_val4', 8), ('Box1_val5', 8), ('Box1_val6', 8), ('Box2_ID', 63), ('Box2_val1', 5), ('Box2_val2', 6), ('Box2_val3', 6), ('Box2_val4', 8), ('Box2_val5', 5), ('Box2_val6', 8), ('Box1_Sum', 41), ('Box2_Sum', 38), ('valDif', 3), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 79), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 32), ('Box1_ID', 62), ('Box1_val1', 8), ('Box1_val2', 8), ('Box1_val3', 5), ('Box1_val4', 7), ('Box1_val5', 7), ('Box1_val6', 6), ('Box2_ID', 64), ('Box2_val1', 5), ('Box2_val2', 8), ('Box2_val3', 6), ('Box2_val4', 8), ('Box2_val5', 7), ('Box2_val6', 8), ('Box1_Sum', 41), ('Box2_Sum', 42), ('valDif', -1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 83), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 33), ('Box1_ID', 65), ('Box1_val1', 7), ('Box1_val2', 8), ('Box1_val3', 7), ('Box1_val4', 5), ('Box1_val5', 6), ('Box1_val6', 5), ('Box2_ID', 66), ('Box2_val1', 8), ('Box2_val2', 6), ('Box2_val3', 7), ('Box2_val4', 6), ('Box2_val5', 6), ('Box2_val6', 8), ('Box1_Sum', 38), ('Box2_Sum', 41), ('valDif', -3), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 79), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 34), ('Box1_ID', 67), ('Box1_val1', 8), ('Box1_val2', 5), ('Box1_val3', 6), ('Box1_val4', 5), ('Box1_val5', 7), ('Box1_val6', 7), ('Box2_ID', 68), ('Box2_val1', 8), ('Box2_val2', 7), ('Box2_val3', 7), ('Box2_val4', 8), ('Box2_val5', 5), ('Box2_val6', 7), ('Box1_Sum', 38), ('Box2_Sum', 42), ('valDif', -4), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 80), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 35), ('Box1_ID', 69), ('Box1_val1', 7), ('Box1_val2', 6), ('Box1_val3', 8), ('Box1_val4', 6), ('Box1_val5', 8), ('Box1_val6', 5), ('Box2_ID', 70), ('Box2_val1', 7), ('Box2_val2', 5), ('Box2_val3', 8), ('Box2_val4', 6), ('Box2_val5', 5), ('Box2_val6', 5), ('Box1_Sum', 40), ('Box2_Sum', 36), ('valDif', 4), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 76), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 36), ('Box1_ID', 71), ('Box1_val1', 7), ('Box1_val2', 8), ('Box1_val3', 8), ('Box1_val4', 5), ('Box1_val5', 7), ('Box1_val6', 5), ('Box2_ID', 72), ('Box2_val1', 6), ('Box2_val2', 8), ('Box2_val3', 6), ('Box2_val4', 7), ('Box2_val5', 6), ('Box2_val6', 6), ('Box1_Sum', 40), ('Box2_Sum', 39), ('valDif', 1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 79), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 37), ('Box1_ID', 73), ('Box1_val1', 8), ('Box1_val2', 7), ('Box1_val3', 6), ('Box1_val4', 6), ('Box1_val5', 7), ('Box1_val6', 5), ('Box2_ID', 74), ('Box2_val1', 5), ('Box2_val2', 7), ('Box2_val3', 7), ('Box2_val4', 7), ('Box2_val5', 6), ('Box2_val6', 6), ('Box1_Sum', 39), ('Box2_Sum', 38), ('valDif', 1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 77), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 38), ('Box1_ID', 75), ('Box1_val1', 8), ('Box1_val2', 5), ('Box1_val3', 6), ('Box1_val4', 8), ('Box1_val5', 5), ('Box1_val6', 7), ('Box2_ID', 76), ('Box2_val1', 6), ('Box2_val2', 7), ('Box2_val3', 5), ('Box2_val4', 7), ('Box2_val5', 6), ('Box2_val6', 6), ('Box1_Sum', 39), ('Box2_Sum', 37), ('valDif', 2), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 76), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 39), ('Box1_ID', 77), ('Box1_val1', 7), ('Box1_val2', 7), ('Box1_val3', 5), ('Box1_val4', 6), ('Box1_val5', 6), ('Box1_val6', 8), ('Box2_ID', 78), ('Box2_val1', 6), ('Box2_val2', 7), ('Box2_val3', 8), ('Box2_val4', 8), ('Box2_val5', 5), ('Box2_val6', 7), ('Box1_Sum', 39), ('Box2_Sum', 41), ('valDif', -2), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 80), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 40), ('Box1_ID', 79), ('Box1_val1', 6), ('Box1_val2', 8), ('Box1_val3', 7), ('Box1_val4', 8), ('Box1_val5', 5), ('Box1_val6', 8), ('Box2_ID', 81), ('Box2_val1', 5), ('Box2_val2', 7), ('Box2_val3', 8), ('Box2_val4', 6), ('Box2_val5', 7), ('Box2_val6', 5), ('Box1_Sum', 42), ('Box2_Sum', 38), ('valDif', 4), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 80), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 41), ('Box1_ID', 80), ('Box1_val1', 5), ('Box1_val2', 6), ('Box1_val3', 5), ('Box1_val4', 8), ('Box1_val5', 6), ('Box1_val6', 6), ('Box2_ID', 82), ('Box2_val1', 5), ('Box2_val2', 5), ('Box2_val3', 8), ('Box2_val4', 7), ('Box2_val5', 5), ('Box2_val6', 7), ('Box1_Sum', 36), ('Box2_Sum', 37), ('valDif', -1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 73), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 42), ('Box1_ID', 83), ('Box1_val1', 7), ('Box1_val2', 7), ('Box1_val3', 7), ('Box1_val4', 8), ('Box1_val5', 5), ('Box1_val6', 8), ('Box2_ID', 84), ('Box2_val1', 5), ('Box2_val2', 7), ('Box2_val3', 8), ('Box2_val4', 6), ('Box2_val5', 5), ('Box2_val6', 8), ('Box1_Sum', 42), ('Box2_Sum', 39), ('valDif', 3), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 81), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 43), ('Box1_ID', 85), ('Box1_val1', 6), ('Box1_val2', 5), ('Box1_val3', 5), ('Box1_val4', 7), ('Box1_val5', 7), ('Box1_val6', 7), ('Box2_ID', 88), ('Box2_val1', 7), ('Box2_val2', 8), ('Box2_val3', 6), ('Box2_val4', 8), ('Box2_val5', 5), ('Box2_val6', 6), ('Box1_Sum', 37), ('Box2_Sum', 40), ('valDif', -3), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 77), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 44), ('Box1_ID', 86), ('Box1_val1', 8), ('Box1_val2', 8), ('Box1_val3', 7), ('Box1_val4', 6), ('Box1_val5', 6), ('Box1_val6', 8), ('Box2_ID', 89), ('Box2_val1', 5), ('Box2_val2', 6), ('Box2_val3', 7), ('Box2_val4', 7), ('Box2_val5', 7), ('Box2_val6', 8), ('Box1_Sum', 43), ('Box2_Sum', 40), ('valDif', 3), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 83), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 45), ('Box1_ID', 87), ('Box1_val1', 5), ('Box1_val2', 6), ('Box1_val3', 6), ('Box1_val4', 8), ('Box1_val5', 6), ('Box1_val6', 6), ('Box2_ID', 90), ('Box2_val1', 6), ('Box2_val2', 5), ('Box2_val3', 6), ('Box2_val4', 8), ('Box2_val5', 8), ('Box2_val6', 5), ('Box1_Sum', 37), ('Box2_Sum', 38), ('valDif', -1), ('Val_Cat', 2), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 75), ('Design_Cell', 'M')]), OrderedDict([('TrialN', 1), ('Box1_ID', 1), ('Box1_val1', 9), ('Box1_val2', 11), ('Box1_val3', 12), ('Box1_val4', 9), ('Box1_val5', 10), ('Box1_val6', 11), ('Box2_ID', 2), ('Box2_val1', 10), ('Box2_val2', 10), ('Box2_val3', 12), ('Box2_val4', 10), ('Box2_val5', 12), ('Box2_val6', 11), ('Box1_Sum', 62), ('Box2_Sum', 65), ('valDif', -3), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 127), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 2), ('Box1_ID', 3), ('Box1_val1', 12), ('Box1_val2', 12), ('Box1_val3', 9), ('Box1_val4', 10), ('Box1_val5', 12), ('Box1_val6', 10), ('Box2_ID', 4), ('Box2_val1', 12), ('Box2_val2', 11), ('Box2_val3', 12), ('Box2_val4', 9), ('Box2_val5', 10), ('Box2_val6', 12), ('Box1_Sum', 65), ('Box2_Sum', 66), ('valDif', -1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 131), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 3), ('Box1_ID', 5), ('Box1_val1', 10), ('Box1_val2', 10), ('Box1_val3', 11), ('Box1_val4', 9), ('Box1_val5', 12), ('Box1_val6', 11), ('Box2_ID', 6), ('Box2_val1', 10), ('Box2_val2', 11), ('Box2_val3', 12), ('Box2_val4', 10), ('Box2_val5', 9), ('Box2_val6', 10), ('Box1_Sum', 63), ('Box2_Sum', 62), ('valDif', 1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 125), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 4), ('Box1_ID', 7), ('Box1_val1', 11), ('Box1_val2', 12), ('Box1_val3', 11), ('Box1_val4', 11), ('Box1_val5', 12), ('Box1_val6', 10), ('Box2_ID', 8), ('Box2_val1', 11), ('Box2_val2', 10), ('Box2_val3', 9), ('Box2_val4', 10), ('Box2_val5', 12), ('Box2_val6', 12), ('Box1_Sum', 67), ('Box2_Sum', 64), ('valDif', 3), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 131), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 5), ('Box1_ID', 9), ('Box1_val1', 11), ('Box1_val2', 12), ('Box1_val3', 10), ('Box1_val4', 10), ('Box1_val5', 10), ('Box1_val6', 9), ('Box2_ID', 10), ('Box2_val1', 9), ('Box2_val2', 10), ('Box2_val3', 10), ('Box2_val4', 9), ('Box2_val5', 11), ('Box2_val6', 12), ('Box1_Sum', 62), ('Box2_Sum', 61), ('valDif', 1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 123), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 6), ('Box1_ID', 11), ('Box1_val1', 9), ('Box1_val2', 12), ('Box1_val3', 9), ('Box1_val4', 11), ('Box1_val5', 10), ('Box1_val6', 12), ('Box2_ID', 12), ('Box2_val1', 9), ('Box2_val2', 11), ('Box2_val3', 12), ('Box2_val4', 12), ('Box2_val5', 9), ('Box2_val6', 12), ('Box1_Sum', 63), ('Box2_Sum', 65), ('valDif', -2), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 128), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 7), ('Box1_ID', 13), ('Box1_val1', 12), ('Box1_val2', 11), ('Box1_val3', 11), ('Box1_val4', 9), ('Box1_val5', 9), ('Box1_val6', 9), ('Box2_ID', 14), ('Box2_val1', 12), ('Box2_val2', 12), ('Box2_val3', 11), ('Box2_val4', 9), ('Box2_val5', 9), ('Box2_val6', 10), ('Box1_Sum', 61), ('Box2_Sum', 63), ('valDif', -2), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 124), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 8), ('Box1_ID', 15), ('Box1_val1', 11), ('Box1_val2', 9), ('Box1_val3', 12), ('Box1_val4', 12), ('Box1_val5', 12), ('Box1_val6', 10), ('Box2_ID', 16), ('Box2_val1', 9), ('Box2_val2', 11), ('Box2_val3', 12), ('Box2_val4', 12), ('Box2_val5', 11), ('Box2_val6', 10), ('Box1_Sum', 66), ('Box2_Sum', 65), ('valDif', 1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 131), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 9), ('Box1_ID', 17), ('Box1_val1', 10), ('Box1_val2', 11), ('Box1_val3', 10), ('Box1_val4', 9), ('Box1_val5', 9), ('Box1_val6', 12), ('Box2_ID', 18), ('Box2_val1', 10), ('Box2_val2', 9), ('Box2_val3', 12), ('Box2_val4', 11), ('Box2_val5', 9), ('Box2_val6', 9), ('Box1_Sum', 61), ('Box2_Sum', 60), ('valDif', 1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 121), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 10), ('Box1_ID', 19), ('Box1_val1', 9), ('Box1_val2', 12), ('Box1_val3', 10), ('Box1_val4', 11), ('Box1_val5', 9), ('Box1_val6', 12), ('Box2_ID', 20), ('Box2_val1', 9), ('Box2_val2', 10), ('Box2_val3', 11), ('Box2_val4', 9), ('Box2_val5', 11), ('Box2_val6', 9), ('Box1_Sum', 63), ('Box2_Sum', 59), ('valDif', 4), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 122), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 11), ('Box1_ID', 21), ('Box1_val1', 10), ('Box1_val2', 9), ('Box1_val3', 10), ('Box1_val4', 11), ('Box1_val5', 11), ('Box1_val6', 9), ('Box2_ID', 22), ('Box2_val1', 12), ('Box2_val2', 9), ('Box2_val3', 9), ('Box2_val4', 12), ('Box2_val5', 11), ('Box2_val6', 11), ('Box1_Sum', 60), ('Box2_Sum', 64), ('valDif', -4), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 124), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 12), ('Box1_ID', 23), ('Box1_val1', 12), ('Box1_val2', 9), ('Box1_val3', 11), ('Box1_val4', 10), ('Box1_val5', 11), ('Box1_val6', 9), ('Box2_ID', 24), ('Box2_val1', 9), ('Box2_val2', 10), ('Box2_val3', 12), ('Box2_val4', 11), ('Box2_val5', 10), ('Box2_val6', 9), ('Box1_Sum', 62), ('Box2_Sum', 61), ('valDif', 1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 123), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 13), ('Box1_ID', 25), ('Box1_val1', 12), ('Box1_val2', 9), ('Box1_val3', 11), ('Box1_val4', 9), ('Box1_val5', 12), ('Box1_val6', 9), ('Box2_ID', 26), ('Box2_val1', 12), ('Box2_val2', 12), ('Box2_val3', 10), ('Box2_val4', 9), ('Box2_val5', 11), ('Box2_val6', 9), ('Box1_Sum', 62), ('Box2_Sum', 63), ('valDif', -1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 125), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 14), ('Box1_ID', 27), ('Box1_val1', 10), ('Box1_val2', 12), ('Box1_val3', 9), ('Box1_val4', 12), ('Box1_val5', 11), ('Box1_val6', 12), ('Box2_ID', 28), ('Box2_val1', 11), ('Box2_val2', 12), ('Box2_val3', 10), ('Box2_val4', 12), ('Box2_val5', 11), ('Box2_val6', 11), ('Box1_Sum', 66), ('Box2_Sum', 67), ('valDif', -1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 133), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 15), ('Box1_ID', 29), ('Box1_val1', 10), ('Box1_val2', 11), ('Box1_val3', 12), ('Box1_val4', 12), ('Box1_val5', 11), ('Box1_val6', 9), ('Box2_ID', 30), ('Box2_val1', 10), ('Box2_val2', 11), ('Box2_val3', 12), ('Box2_val4', 12), ('Box2_val5', 9), ('Box2_val6', 9), ('Box1_Sum', 65), ('Box2_Sum', 63), ('valDif', 2), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 128), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 16), ('Box1_ID', 31), ('Box1_val1', 10), ('Box1_val2', 10), ('Box1_val3', 12), ('Box1_val4', 11), ('Box1_val5', 9), ('Box1_val6', 10), ('Box2_ID', 32), ('Box2_val1', 9), ('Box2_val2', 12), ('Box2_val3', 9), ('Box2_val4', 12), ('Box2_val5', 11), ('Box2_val6', 12), ('Box1_Sum', 62), ('Box2_Sum', 65), ('valDif', -3), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 127), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 17), ('Box1_ID', 33), ('Box1_val1', 10), ('Box1_val2', 10), ('Box1_val3', 11), ('Box1_val4', 10), ('Box1_val5', 12), ('Box1_val6', 9), ('Box2_ID', 35), ('Box2_val1', 11), ('Box2_val2', 12), ('Box2_val3', 10), ('Box2_val4', 9), ('Box2_val5', 10), ('Box2_val6', 9), ('Box1_Sum', 62), ('Box2_Sum', 61), ('valDif', 1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 123), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 18), ('Box1_ID', 34), ('Box1_val1', 9), ('Box1_val2', 12), ('Box1_val3', 11), ('Box1_val4', 9), ('Box1_val5', 10), ('Box1_val6', 11), ('Box2_ID', 36), ('Box2_val1', 9), ('Box2_val2', 10), ('Box2_val3', 12), ('Box2_val4', 11), ('Box2_val5', 10), ('Box2_val6', 12), ('Box1_Sum', 62), ('Box2_Sum', 64), ('valDif', -2), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 126), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 19), ('Box1_ID', 37), ('Box1_val1', 10), ('Box1_val2', 12), ('Box1_val3', 10), ('Box1_val4', 10), ('Box1_val5', 9), ('Box1_val6', 11), ('Box2_ID', 39), ('Box2_val1', 10), ('Box2_val2', 10), ('Box2_val3', 10), ('Box2_val4', 11), ('Box2_val5', 10), ('Box2_val6', 12), ('Box1_Sum', 62), ('Box2_Sum', 63), ('valDif', -1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 125), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 20), ('Box1_ID', 38), ('Box1_val1', 11), ('Box1_val2', 11), ('Box1_val3', 9), ('Box1_val4', 10), ('Box1_val5', 12), ('Box1_val6', 9), ('Box2_ID', 41), ('Box2_val1', 12), ('Box2_val2', 11), ('Box2_val3', 9), ('Box2_val4', 9), ('Box2_val5', 11), ('Box2_val6', 11), ('Box1_Sum', 62), ('Box2_Sum', 63), ('valDif', -1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 125), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 21), ('Box1_ID', 40), ('Box1_val1', 11), ('Box1_val2', 10), ('Box1_val3', 9), ('Box1_val4', 11), ('Box1_val5', 11), ('Box1_val6', 10), ('Box2_ID', 42), ('Box2_val1', 11), ('Box2_val2', 11), ('Box2_val3', 10), ('Box2_val4', 11), ('Box2_val5', 9), ('Box2_val6', 12), ('Box1_Sum', 62), ('Box2_Sum', 64), ('valDif', -2), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 126), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 22), ('Box1_ID', 43), ('Box1_val1', 9), ('Box1_val2', 11), ('Box1_val3', 11), ('Box1_val4', 11), ('Box1_val5', 12), ('Box1_val6', 10), ('Box2_ID', 44), ('Box2_val1', 12), ('Box2_val2', 12), ('Box2_val3', 10), ('Box2_val4', 10), ('Box2_val5', 9), ('Box2_val6', 12), ('Box1_Sum', 64), ('Box2_Sum', 65), ('valDif', -1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 129), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 23), ('Box1_ID', 45), ('Box1_val1', 10), ('Box1_val2', 9), ('Box1_val3', 11), ('Box1_val4', 12), ('Box1_val5', 12), ('Box1_val6', 10), ('Box2_ID', 46), ('Box2_val1', 9), ('Box2_val2', 12), ('Box2_val3', 10), ('Box2_val4', 12), ('Box2_val5', 12), ('Box2_val6', 12), ('Box1_Sum', 64), ('Box2_Sum', 67), ('valDif', -3), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 131), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 24), ('Box1_ID', 47), ('Box1_val1', 9), ('Box1_val2', 12), ('Box1_val3', 10), ('Box1_val4', 12), ('Box1_val5', 12), ('Box1_val6', 10), ('Box2_ID', 48), ('Box2_val1', 11), ('Box2_val2', 9), ('Box2_val3', 10), ('Box2_val4', 10), ('Box2_val5', 10), ('Box2_val6', 12), ('Box1_Sum', 65), ('Box2_Sum', 62), ('valDif', 3), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 127), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 25), ('Box1_ID', 49), ('Box1_val1', 12), ('Box1_val2', 11), ('Box1_val3', 11), ('Box1_val4', 9), ('Box1_val5', 11), ('Box1_val6', 11), ('Box2_ID', 50), ('Box2_val1', 9), ('Box2_val2', 10), ('Box2_val3', 12), ('Box2_val4', 9), ('Box2_val5', 12), ('Box2_val6', 11), ('Box1_Sum', 65), ('Box2_Sum', 63), ('valDif', 2), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 128), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 26), ('Box1_ID', 51), ('Box1_val1', 9), ('Box1_val2', 11), ('Box1_val3', 9), ('Box1_val4', 9), ('Box1_val5', 11), ('Box1_val6', 10), ('Box2_ID', 53), ('Box2_val1', 12), ('Box2_val2', 9), ('Box2_val3', 11), ('Box2_val4', 10), ('Box2_val5', 10), ('Box2_val6', 12), ('Box1_Sum', 59), ('Box2_Sum', 64), ('valDif', -5), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 123), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 27), ('Box1_ID', 52), ('Box1_val1', 9), ('Box1_val2', 12), ('Box1_val3', 12), ('Box1_val4', 11), ('Box1_val5', 11), ('Box1_val6', 11), ('Box2_ID', 54), ('Box2_val1', 10), ('Box2_val2', 10), ('Box2_val3', 10), ('Box2_val4', 9), ('Box2_val5', 10), ('Box2_val6', 12), ('Box1_Sum', 66), ('Box2_Sum', 61), ('valDif', 5), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 127), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 28), ('Box1_ID', 55), ('Box1_val1', 11), ('Box1_val2', 9), ('Box1_val3', 11), ('Box1_val4', 9), ('Box1_val5', 9), ('Box1_val6', 12), ('Box2_ID', 57), ('Box2_val1', 12), ('Box2_val2', 9), ('Box2_val3', 11), ('Box2_val4', 12), ('Box2_val5', 10), ('Box2_val6', 12), ('Box1_Sum', 61), ('Box2_Sum', 66), ('valDif', -5), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 127), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 29), ('Box1_ID', 56), ('Box1_val1', 11), ('Box1_val2', 9), ('Box1_val3', 10), ('Box1_val4', 12), ('Box1_val5', 10), ('Box1_val6', 9), ('Box2_ID', 58), ('Box2_val1', 10), ('Box2_val2', 10), ('Box2_val3', 9), ('Box2_val4', 10), ('Box2_val5', 12), ('Box2_val6', 9), ('Box1_Sum', 61), ('Box2_Sum', 60), ('valDif', 1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 121), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 30), ('Box1_ID', 59), ('Box1_val1', 12), ('Box1_val2', 9), ('Box1_val3', 10), ('Box1_val4', 9), ('Box1_val5', 10), ('Box1_val6', 11), ('Box2_ID', 60), ('Box2_val1', 12), ('Box2_val2', 10), ('Box2_val3', 9), ('Box2_val4', 12), ('Box2_val5', 11), ('Box2_val6', 12), ('Box1_Sum', 61), ('Box2_Sum', 66), ('valDif', -5), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 127), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 31), ('Box1_ID', 61), ('Box1_val1', 11), ('Box1_val2', 9), ('Box1_val3', 9), ('Box1_val4', 12), ('Box1_val5', 12), ('Box1_val6', 12), ('Box2_ID', 63), ('Box2_val1', 9), ('Box2_val2', 10), ('Box2_val3', 10), ('Box2_val4', 12), ('Box2_val5', 9), ('Box2_val6', 12), ('Box1_Sum', 65), ('Box2_Sum', 62), ('valDif', 3), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 127), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 32), ('Box1_ID', 62), ('Box1_val1', 12), ('Box1_val2', 12), ('Box1_val3', 9), ('Box1_val4', 11), ('Box1_val5', 11), ('Box1_val6', 10), ('Box2_ID', 64), ('Box2_val1', 9), ('Box2_val2', 12), ('Box2_val3', 10), ('Box2_val4', 12), ('Box2_val5', 11), ('Box2_val6', 12), ('Box1_Sum', 65), ('Box2_Sum', 66), ('valDif', -1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 131), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 33), ('Box1_ID', 65), ('Box1_val1', 11), ('Box1_val2', 12), ('Box1_val3', 11), ('Box1_val4', 9), ('Box1_val5', 10), ('Box1_val6', 9), ('Box2_ID', 66), ('Box2_val1', 12), ('Box2_val2', 10), ('Box2_val3', 11), ('Box2_val4', 10), ('Box2_val5', 10), ('Box2_val6', 12), ('Box1_Sum', 62), ('Box2_Sum', 65), ('valDif', -3), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 127), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 34), ('Box1_ID', 67), ('Box1_val1', 12), ('Box1_val2', 9), ('Box1_val3', 10), ('Box1_val4', 9), ('Box1_val5', 11), ('Box1_val6', 11), ('Box2_ID', 68), ('Box2_val1', 12), ('Box2_val2', 11), ('Box2_val3', 11), ('Box2_val4', 12), ('Box2_val5', 9), ('Box2_val6', 11), ('Box1_Sum', 62), ('Box2_Sum', 66), ('valDif', -4), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 128), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 35), ('Box1_ID', 69), ('Box1_val1', 11), ('Box1_val2', 10), ('Box1_val3', 12), ('Box1_val4', 10), ('Box1_val5', 12), ('Box1_val6', 9), ('Box2_ID', 70), ('Box2_val1', 11), ('Box2_val2', 9), ('Box2_val3', 12), ('Box2_val4', 10), ('Box2_val5', 9), ('Box2_val6', 9), ('Box1_Sum', 64), ('Box2_Sum', 60), ('valDif', 4), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 124), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 36), ('Box1_ID', 71), ('Box1_val1', 11), ('Box1_val2', 12), ('Box1_val3', 12), ('Box1_val4', 9), ('Box1_val5', 11), ('Box1_val6', 9), ('Box2_ID', 72), ('Box2_val1', 10), ('Box2_val2', 12), ('Box2_val3', 10), ('Box2_val4', 11), ('Box2_val5', 10), ('Box2_val6', 10), ('Box1_Sum', 64), ('Box2_Sum', 63), ('valDif', 1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 127), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 37), ('Box1_ID', 73), ('Box1_val1', 12), ('Box1_val2', 11), ('Box1_val3', 10), ('Box1_val4', 10), ('Box1_val5', 11), ('Box1_val6', 9), ('Box2_ID', 74), ('Box2_val1', 9), ('Box2_val2', 11), ('Box2_val3', 11), ('Box2_val4', 11), ('Box2_val5', 10), ('Box2_val6', 10), ('Box1_Sum', 63), ('Box2_Sum', 62), ('valDif', 1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 125), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 38), ('Box1_ID', 75), ('Box1_val1', 12), ('Box1_val2', 9), ('Box1_val3', 10), ('Box1_val4', 12), ('Box1_val5', 9), ('Box1_val6', 11), ('Box2_ID', 76), ('Box2_val1', 10), ('Box2_val2', 11), ('Box2_val3', 9), ('Box2_val4', 11), ('Box2_val5', 10), ('Box2_val6', 10), ('Box1_Sum', 63), ('Box2_Sum', 61), ('valDif', 2), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 3), ('varDif', 1), ('Val_Sum', 124), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 39), ('Box1_ID', 77), ('Box1_val1', 11), ('Box1_val2', 11), ('Box1_val3', 9), ('Box1_val4', 10), ('Box1_val5', 10), ('Box1_val6', 12), ('Box2_ID', 78), ('Box2_val1', 10), ('Box2_val2', 11), ('Box2_val3', 12), ('Box2_val4', 12), ('Box2_val5', 9), ('Box2_val6', 11), ('Box1_Sum', 63), ('Box2_Sum', 65), ('valDif', -2), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 128), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 40), ('Box1_ID', 79), ('Box1_val1', 10), ('Box1_val2', 12), ('Box1_val3', 11), ('Box1_val4', 12), ('Box1_val5', 9), ('Box1_val6', 12), ('Box2_ID', 81), ('Box2_val1', 9), ('Box2_val2', 11), ('Box2_val3', 12), ('Box2_val4', 10), ('Box2_val5', 11), ('Box2_val6', 9), ('Box1_Sum', 66), ('Box2_Sum', 62), ('valDif', 4), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 4), ('Box2_Variance', 4), ('varDif', 0), ('Val_Sum', 128), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 41), ('Box1_ID', 80), ('Box1_val1', 9), ('Box1_val2', 10), ('Box1_val3', 9), ('Box1_val4', 12), ('Box1_val5', 10), ('Box1_val6', 10), ('Box2_ID', 82), ('Box2_val1', 9), ('Box2_val2', 9), ('Box2_val3', 12), ('Box2_val4', 11), ('Box2_val5', 9), ('Box2_val6', 11), ('Box1_Sum', 60), ('Box2_Sum', 61), ('valDif', -1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 121), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 42), ('Box1_ID', 83), ('Box1_val1', 11), ('Box1_val2', 11), ('Box1_val3', 11), ('Box1_val4', 12), ('Box1_val5', 9), ('Box1_val6', 12), ('Box2_ID', 84), ('Box2_val1', 9), ('Box2_val2', 11), ('Box2_val3', 12), ('Box2_val4', 10), ('Box2_val5', 9), ('Box2_val6', 12), ('Box1_Sum', 66), ('Box2_Sum', 63), ('valDif', 3), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 129), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 43), ('Box1_ID', 85), ('Box1_val1', 10), ('Box1_val2', 9), ('Box1_val3', 9), ('Box1_val4', 11), ('Box1_val5', 11), ('Box1_val6', 11), ('Box2_ID', 88), ('Box2_val1', 11), ('Box2_val2', 12), ('Box2_val3', 10), ('Box2_val4', 12), ('Box2_val5', 9), ('Box2_val6', 10), ('Box1_Sum', 61), ('Box2_Sum', 64), ('valDif', -3), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 125), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 44), ('Box1_ID', 86), ('Box1_val1', 12), ('Box1_val2', 12), ('Box1_val3', 11), ('Box1_val4', 10), ('Box1_val5', 10), ('Box1_val6', 12), ('Box2_ID', 89), ('Box2_val1', 9), ('Box2_val2', 10), ('Box2_val3', 11), ('Box2_val4', 11), ('Box2_val5', 11), ('Box2_val6', 12), ('Box1_Sum', 67), ('Box2_Sum', 64), ('valDif', 3), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 4), ('varDif', -1), ('Val_Sum', 131), ('Design_Cell', 'H')]), OrderedDict([('TrialN', 45), ('Box1_ID', 87), ('Box1_val1', 9), ('Box1_val2', 10), ('Box1_val3', 10), ('Box1_val4', 12), ('Box1_val5', 10), ('Box1_val6', 10), ('Box2_ID', 90), ('Box2_val1', 10), ('Box2_val2', 9), ('Box2_val3', 10), ('Box2_val4', 12), ('Box2_val5', 12), ('Box2_val6', 9), ('Box1_Sum', 61), ('Box2_Sum', 62), ('valDif', -1), ('Val_Cat', 3), ('trial_ID', 1), ('Box1_Variance', 3), ('Box2_Variance', 3), ('varDif', 0), ('Val_Sum', 123), ('Design_Cell', 'H')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="trials.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="self_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="choice"/>
    <Routine name="fixation_500ms"/>
    <LoopTerminator name="self_trials"/>
    <Routine name="colorblindness"/>
    <Routine name="ender"/>
    <LoopInitiator loopType="TrialHandler" name="bonus_disp">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="BONUS_BOOL" valType="num"/>
      <Param name="name" updates="None" val="bonus_disp" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="reward"/>
    <LoopTerminator name="bonus_disp"/>
  </Flow>
</PsychoPy2experiment>
